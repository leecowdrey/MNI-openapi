openapi: 3.1.0
info:
  title: Network Intelligence APIs
  description: |
    **MarlinDT Network Intelligence** provides analytical and prediction insights for telecommunications infrastructure and services.
  contact:
    name: Merkator
    x-name-full: Merkator nv/sa
    x-name-location: Vliegwezenlaan 48 · 1731 Zellik · Belgium
    x-name-telephone: "+3223092112"
    x-combined-contact: https://marlindt.com/
    url: https://www.merkator.com/
    email: support@marlindt.net
  license:
    name: Proprietary License
    url: https://www.merkator.com/
    x-copyright: © 2024-2025 Merkator nv/sa. All rights reserved.
  version: 1.0.0.1752261937
externalDocs:
  description: Application User Manual
  url: /mni/v1/doc/html/user-guide/index.html
servers:
- url: /mni/v1
paths:
  /api:
    get:
      summary: Return either JSON or YAML OpenAPI definition
      security:
      - openId:
        - read:mni_api
      operationId: getOpenAPI
      tags:
      - APIs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: byte
            application/yaml:
              schema:
                type: string
                format: byte
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
  /api/readiness:
    get:
      summary: Returns a simple status response about the operational state of MNI (readiness)
      security:
      - openId:
        - read:mni_api
      operationId: getReadiness
      tags:
      - APIs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  point:
                    $ref: "#/components/schemas/dateTime"
              examples:
                ok:
                  value:
                    point: "20241118T150800"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ui/statistic:
    get:
      summary: Returns a simple resource statistics held in MNI
      security:
      - openId:
        - read:mni_ui
      operationId: getSimpleStatistics
      tags:
      - UI Helpers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: object
                    properties:
                      email:
                        type: integer
                        minimum: 0
                      kafka:
                        type: integer
                        minimum: 0
                      map:
                        type: integer
                        minimum: 0
                      workflow:
                        type: integer
                        minimum: 0
                  alerts:
                    type: object
                    properties:
                      available:
                        type: integer
                        minimum: 0
                      active:
                        type: object
                        properties:
                          callbacks:
                            type: integer
                            minimum: 0
                          publish:
                            type: integer
                            minimum: 0
                          notify:
                            type: integer
                            minimum: 0
                          workflow:
                            type: integer
                            minimum: 0
                  queues:
                    type: object
                    properties:
                      predict:
                        type: object
                        properties:
                          pending:
                            type: integer
                            minimum: 0
                          completed:
                            type: integer
                            minimum: 0
                  resources:
                    type: object
                    properties:
                      cables:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
                      ducts:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
                      nes:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
                      poles:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
                      services:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
                      sites:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
                      trenches:
                        type: object
                        properties:
                          total:
                            type: integer
                            minimum: 0
                          active:
                            type: integer
                            minimum: 0
                          inactive:
                            type: integer
                            minimum: 0
              examples:
                simple:
                  value:
                    providers:
                      email: 1
                      kafka: 1
                      map: 1
                      workflow: 1
                    alerts:
                      available: 4
                      active:
                        callbacks: 0
                        publish: 0
                        notify: 0
                        workflow: 0
                    queues:
                      predict:
                        pending: 0
                        completed: 17
                    resources:
                      cables:
                        total: 1
                        active: 1
                        inactive: 0
                      ducts:
                        total: 1
                        active: 1
                        inactive: 0
                      nes:
                        total: 0
                        active: 0
                        inactive: 0
                      poles:
                        total: 2
                        active: 2
                        inactive: 0
                      services:
                        total: 0
                        active: 0
                        inactive: 0
                      sites:
                        total: 0
                        active: 0
                        inactive: 0
                      trenches:
                        total: 1
                        active: 1
                        inactive: 0
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ui/mapRender:
    get:
      summary: Get default Map render URL details for UI usage
      security:
      - openId:
        - read:mni_ui
      operationId: getMapRender
      tags:
      - UI Helpers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  url:
                    type: string
                    format: url
                    description: URL for map rendering operations
              examples:
                sample:
                  value:
                    vendor: "Google Maps"
                    url: "https://maps.googleapis.com/maps/api/js?key=googleSuppliedKey"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alerts:
    get:
      summary: Export alerts in bulk
      security:
      - openId:
        - read:mni_alert
      operationId: getMultipleAlerts
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  type: object
                  properties:
                    alertId:
                      $ref: "#/components/schemas/alertId"
                    description:
                      type: string
                    delete:
                      $ref: "#/components/schemas/delete"
              examples:
                sample:
                  value:
                  - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    description: Switching/Routing Classifiers
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert:
    get:
      summary: List of all available alerts
      security:
      - openId:
        - read:mni_alert
      operationId: getAllAlerts
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/alertId"
              examples:
                sample:
                  value:
                  - ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                  - 3e8c816b-499d-4809-bc97-3f17d3fff2a5
                  - 6d3bd8bd-093f-4f17-b391-5f4f83984a97
                  - 6aa7845b-e6fa-4668-a0cc-45d5b46fa4cc
                  - aee8b41f-97ab-4e35-88c7-b40391dca6f7
                  - 438463bc-9f9f-4410-b937-2d3acd04b24e
                  - 16bbab26-545e-4ece-b55c-015a34f19847
                  - ebbb4134-f0fd-4c9f-99bf-c994ddc15890
                  - 370a5524-781c-4f5f-b47d-c498c3f60839
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single alert
      security:
      - openId:
        - write:mni_internal
      operationId: addSingleAlert
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - description
              - delete
              - function
              properties:
                description:
                  type: string
                delete:
                  $ref: "#/components/schemas/delete"
                function:
                  type: string
                  default: "noop();"
            examples:
              sample:
                value:
                  description: "Switching/Routing Classifiers"
                  delete: false
                  function: noop();
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  alertId:
                    $ref: "#/components/schemas/alertId"
              example:
                alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/{alertId}:
    delete:
      summary: Remove single alert
      security:
      - openId:
        - write:mni_internal
      parameters:
      - $ref: "#/components/parameters/alertId"
      operationId: deleteSingleAlert
      tags:
      - Alerts
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update aspects of a single alert
      security:
      - openId:
        - write:mni_internal
      operationId: updateSingleAlert
      tags:
      - Alerts
      parameters:
      - $ref: "#/components/parameters/alertId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                delete:
                  $ref: "#/components/schemas/delete"
                function:
                  type: string
                  default: "noop();"
            examples:
              sample:
                value:
                  function: "jobAlertNePortUtil75();"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified alert details
      security:
      - openId:
        - read:mni_alert
      parameters:
      - $ref: "#/components/parameters/alertId"
      operationId: getSingleAlert
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  alertId:
                    $ref: "#/components/schemas/alertId"
                  description:
                    type: string
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                sample:
                  value:
                    alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    description: Switching/Routing Classifiers
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/content/{alertContentId}:
    get:
      summary: List single alert content details
      security:
      - openId:
        - read:mni_alert
      operationId: getSingleAlertContent
      parameters:
      - $ref: "#/components/parameters/alertContentId"
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  alertContentId:
                    $ref: "#/components/schemas/alertContentId"
                  alertId:
                    $ref: "#/components/schemas/alertId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  content:
                    type: string
                    minLength: 1
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Remove single alert content
      security:
      - openId:
        - write:mni_internal
      parameters:
      - $ref: "#/components/parameters/alertContentId"
      operationId: deleteSingleAlertContent
      tags:
      - Alerts
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/content:
    get:
      summary: List all alert content
      security:
      - openId:
        - read:mni_alert
      operationId: getAllAlertContent
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/alertContentId"
              examples:
                sample:
                  value:
                  - 312bd231-f52b-41eb-af17-d3caa730c209
                  - e60f9712-dda3-4537-9538-17e96e87bd0d
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single alert content
      security:
      - openId:
        - write:mni_internal
      operationId: addSingleAlertContent
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - alertId
              - content
              properties:
                alertId:
                  $ref: "#/components/schemas/alertId"
                point:
                  $ref: "#/components/schemas/dateTime"
                content:
                  type: string
                  minLength: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  alertContentId:
                    $ref: "#/components/schemas/alertContentId"
              example:
                alertContentId: e60f9712-dda3-4537-9538-17e96e87bd0d
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/cable:
    get:
      summary: List known cable costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllCableCosts
      tags:
      - Costs - Cable
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - technology
                  - unit
                  - costPerUnit
                  properties:
                    technology:
                      $ref: "#/components/schemas/cableTechnology"
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - technology: copper
                    unit: m
                    costPerUnit: 1
                  - technology: ethernet
                    unit: m
                    costPerUnit: 1
                  - technology: singleFiber
                    unit: m
                    costPerUnit: 1
                  - technology: multiFiber
                    unit: m
                    costPerUnit: 1
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single cable cost
      security:
      - openId:
        - write:mni_cost
      operationId: addCableCost
      tags:
      - Costs - Cable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - technology
              - unit
              - costPerUnit
              properties:
                technology:
                  $ref: "#/components/schemas/cableTechnology"
                unit:
                  $ref: "#/components/schemas/sizeUnit"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  technology: coax
                  unit: m
                  costPerUnit: 1
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing cable cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceCableCost
      tags:
      - Costs - Cable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - technology
              - unit
              - costPerUnit
              properties:
                technology:
                  $ref: "#/components/schemas/cableTechnology"
                unit:
                  $ref: "#/components/schemas/sizeUnit"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  technology: singleFiber
                  unit: m
                  costPerUnit: 1.50
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single cable cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteCableCost
      tags:
      - Costs - Cable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - technology
              properties:
                technology:
                  $ref: "#/components/schemas/cableTechnology"
            examples:
              sample:
                value:
                  technology: coax
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/duct:
    get:
      summary: List known duct costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllDuctCosts
      tags:
      - Costs - Duct
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - category
                  - configuration
                  - unit
                  - costPerUnit
                  properties:
                    category:
                      $ref: "#/components/schemas/ductSizeCategory"
                    configuration:
                      $ref: "#/components/schemas/ductConfiguration"
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - category: duct
                    configuration: 1
                    unit: m
                    costPerUnit: 1
                  - category: microduct
                    configuration: 19
                    unit: m
                    costPerUnit: 2
                  - category: subduct
                    configuration: 2
                    unit: m
                    costPerUnit: 1.25
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single duct cost
      security:
      - openId:
        - write:mni_cost
      operationId: addDuctCost
      tags:
      - Costs - Duct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - category
              - configuration
              - unit
              - costPerUnit
              properties:
                category:
                  $ref: "#/components/schemas/ductSizeCategory"
                configuration:
                  $ref: "#/components/schemas/ductConfiguration"
                unit:
                  $ref: "#/components/schemas/sizeUnit"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  category: duct
                  configuration: 24
                  unit: m
                  costPerUnit: 2
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing duct cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceDuctCost
      tags:
      - Costs - Duct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - category
              - configuration
              - unit
              - costPerUnit
              properties:
                category:
                  $ref: "#/components/schemas/ductSizeCategory"
                configuration:
                  $ref: "#/components/schemas/ductConfiguration"
                unit:
                  $ref: "#/components/schemas/sizeUnit"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  category: duct
                  configuration: 12
                  unit: m
                  costPerUnit: 1.10
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single duct cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteDuctCost
      tags:
      - Costs - Duct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - category
              - configuration
              properties:
                category:
                  $ref: "#/components/schemas/ductSizeCategory"
                configuration:
                  $ref: "#/components/schemas/ductConfiguration"
            examples:
              sample:
                value:
                  category: duct
                  configuration: 19
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/ne:
    get:
      summary: List known ne costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllNeCosts
      tags:
      - Costs - Ne
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - vendor
                  - model
                  - costPerUnit
                  properties:
                    vendor:
                      type: string
                    model:
                      type: string
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - vendor: Cisco Systems, Inc.
                    model: C8300-1N1S-4T2X
                    costPerUnit: 7199.61
                  - vendor: Juniper Networks
                    model: MX240
                    costPerUnit: 27250.00
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single ne cost
      security:
      - openId:
        - write:mni_cost
      operationId: addNeCost
      tags:
      - Costs - Ne
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - vendor
              - model
              - costPerUnit
              properties:
                vendor:
                  type: string
                model:
                  type: string
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  vendor: Juniper Networks
                  model: MX250
                  costPerUnit: 32768.00
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing ne cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceNeCost
      tags:
      - Costs - Ne
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - vendor
              - model
              - costPerUnit
              properties:
                vendor:
                  type: string
                model:
                  type: string
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  vendor: Juniper Networks
                  model: MX240
                  costPerUnit: 26250.00
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single ne cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteNeCost
      tags:
      - Costs - Ne
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - vendor
              - model
              properties:
                vendor:
                  type: string
                model:
                  type: string
            examples:
              sample:
                value:
                  vendor: Juniper Networks
                  model: MX250
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/pole:
    get:
      summary: List known pole costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllPoleCosts
      tags:
      - Costs - Pole
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - purpose
                  - classifier
                  - costPerUnit
                  properties:
                    purpose:
                      $ref: "#/components/schemas/polePurpose"
                    classifier:
                      $ref: "#/components/schemas/heightClassifier"
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - purpose: service/drop
                    classifier: highways
                    costPerUnit: 1
                  - purpose: service/drop
                    classifier: rural
                    costPerUnit: 1
                  - purpose: backhaul
                    classifier: rural
                    costPerUnit: 1
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single pole cost
      security:
      - openId:
        - write:mni_cost
      operationId: addPoleCost
      tags:
      - Costs - Pole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - classifier
              - costPerUnit
              properties:
                purpose:
                  $ref: "#/components/schemas/polePurpose"
                classifier:
                  $ref: "#/components/schemas/heightClassifier"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  purpose: link
                  classifier: commercial
                  costPerUnit: 1
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing pole cost
      security:
      - openId:
        - write:mni_cost
      operationId: replacePoleCost
      tags:
      - Costs - Pole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - classifier
              - costPerUnit
              properties:
                purpose:
                  $ref: "#/components/schemas/polePurpose"
                classifier:
                  $ref: "#/components/schemas/heightClassifier"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  purpose: link
                  classifier: commercial
                  costPerUnit: 2.50
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single pole cost
      security:
      - openId:
        - write:mni_cost
      operationId: deletePoleCost
      tags:
      - Costs - Pole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - classifier
              properties:
                purpose:
                  $ref: "#/components/schemas/polePurpose"
                classifier:
                  $ref: "#/components/schemas/heightClassifier"
            examples:
              sample:
                value:
                  purpose: link
                  classifier: commercial
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/rack:
    get:
      summary: List known rack costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllRackCosts
      tags:
      - Costs - Rack
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - slots
                  - costPerUnit
                  properties:
                    slots:
                      $ref: "#/components/schemas/rackSlots"
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - slots: 1
                    costPerUnit: 1
                  - slots: 2
                    costPerUnit: 2
                  - slots: 3
                    costPerUnit: 3
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single rack cost
      security:
      - openId:
        - write:mni_cost
      operationId: addRackCost
      tags:
      - Costs - Rack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - slots
              - costPerUnit
              properties:
                slots:
                  $ref: "#/components/schemas/rackSlots"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  slots: 24
                  costPerUnit: 24
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing rack cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceRackCost
      tags:
      - Costs - Rack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - slots
              - costPerUnit
              properties:
                slots:
                  $ref: "#/components/schemas/rackSlots"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  slots: 48
                  costPerUnit: 50
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single rack cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteRackCost
      tags:
      - Costs - Rack
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - slots
              properties:
                slots:
                  $ref: "#/components/schemas/rackSlots"
            examples:
              sample:
                value:
                  slots: 48
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/service:
    get:
      summary: List known service costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllServiceCosts
      tags:
      - Costs - Service
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - type
                  - rate
                  - unit
                  - costPerUnit
                  properties:
                    type:
                      $ref: "#/components/schemas/serviceType"
                    rate:
                      type: integer
                      minimum: 1
                      maximum: 768
                    unit:
                      type: string
                      enum:
                      - Mbps
                      - Gbps
                      - Tbps
                    lagMembers:
                      type: integer
                      minimum: 0
                      maximum: 256
                      default: 0
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - type: broadband
                    rate: 67
                    unit: Mbps
                    costPerUnit: 31.23
                  - type: optical
                    rate: 1
                    unit: Gbps
                    costPerUnit: 256.78
                  - type: optical
                    rate: 1
                    unit: Gbps
                    lagMembers: 2
                    costPerUnit: 512.34
                  - type: sogea
                    rate: 1
                    unit: Gbps
                    costPerUnit: 62.46
                  - type: unclassified
                    rate: 1
                    unit: Gbps
                    costPerUnit: 100.00
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single service cost
      security:
      - openId:
        - write:mni_cost
      operationId: addServiceCost
      tags:
      - Costs - Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - type
              - rate
              - unit
              - costPerUnit
              properties:
                type:
                  $ref: "#/components/schemas/serviceType"
                rate:
                  type: integer
                  minimum: 1
                  maximum: 768
                unit:
                  type: string
                  enum:
                  - Mbps
                  - Gbps
                  - Tbps
                lagMembers:
                  type: integer
                  minimum: 0
                  maximum: 256
                  default: 0
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  type: circuit
                  rate: 256
                  unit: Mbps
                  costPerUnit: 34.56
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing service cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceServiceCost
      tags:
      - Costs - Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - type
              - rate
              - unit
              - costPerUnit
              properties:
                type:
                  $ref: "#/components/schemas/serviceType"
                rate:
                  type: integer
                  minimum: 1
                  maximum: 768
                unit:
                  type: string
                  enum:
                  - Mbps
                  - Gbps
                  - Tbps
                lagMembers:
                  type: integer
                  minimum: 0
                  maximum: 256
                  default: 0
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  type: circuit
                  rate: 256
                  unit: Mbps
                  costPerUnit: 56.78
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single service cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteServiceCost
      tags:
      - Costs - Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - type
              - rate
              - unit
              properties:
                type:
                  $ref: "#/components/schemas/serviceType"
                rate:
                  type: integer
                  minimum: 1
                  maximum: 768
                unit:
                  type: string
                  enum:
                  - Mbps
                  - Gbps
                  - Tbps
                lagMembers:
                  type: integer
                  minimum: 0
                  maximum: 256
                  default: 0
            examples:
              sample:
                value:
                  type: circuit
                  rate: 256
                  unit: Mbps
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/site:
    get:
      summary: List known site costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllSiteCosts
      tags:
      - Costs - Site
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - area
                  - type
                  - costPerUnit
                  properties:
                    area:
                      $ref: "#/components/schemas/areaType"
                    type:
                      $ref: "#/components/schemas/siteType"
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - area: industrial
                    type: dc
                    costPerUnit: 1
                  - area: mixed
                    type: colo
                    costPerUnit: 1
                  - area: psz
                    type: pop
                    costPerUnit: 1
                  - area: residential
                    type: street
                    costPerUnit: 1
                  - area: rural
                    type: street
                    costPerUnit: 1
                  - area: urban
                    type: exchange
                    costPerUnit: 1
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single site cost
      security:
      - openId:
        - write:mni_cost
      operationId: addSiteCost
      tags:
      - Costs - Site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - area
              - type
              - costPerUnit
              properties:
                area:
                  $ref: "#/components/schemas/areaType"
                type:
                  $ref: "#/components/schemas/siteType"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  area: mixed
                  type: street
                  costPerUnit: 1
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing site cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceSiteCost
      tags:
      - Costs - Site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - area
              - type
              - costPerUnit
              properties:
                area:
                  $ref: "#/components/schemas/areaType"
                type:
                  $ref: "#/components/schemas/siteType"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  area: mixed
                  type: street
                  costPerUnit: 2.50
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single site cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteSiteCost
      tags:
      - Costs - Site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - area
              - type
              properties:
                area:
                  $ref: "#/components/schemas/areaType"
                type:
                  $ref: "#/components/schemas/siteType"
            examples:
              sample:
                value:
                  area: psz
                  type: exchange
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cost/trench:
    get:
      summary: List known trench costs
      security:
      - openId:
        - read:mni_cost
      operationId: getAllTrenchCosts
      tags:
      - Costs - Trench
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: object
                  required:
                  - purpose
                  - unit
                  - costPerUnit
                  properties:
                    purpose:
                      $ref: "#/components/schemas/trenchPurpose"
                    type:
                      description: is only included when purpose is `unclassified`
                      $ref: "#/components/schemas/constructionType"
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                    costPerUnit:
                      type: number
                      format: currency
                      minimum: 0
              examples:
                sample:
                  value:
                  - purpose: service/drop
                    unit: m
                    costPerUnit: 5
                  - purpose: pole
                    unit: m
                    costPerUnit: 6.5
                  - purpose: unclassified
                    type: large
                    unit: m
                    costPerUnit: 30
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single trench cost
      security:
      - openId:
        - write:mni_cost
      operationId: addTrenchCost
      tags:
      - Costs - Trench
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - unit
              - costPerUnit
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                type:
                  description: only include when purpose is `unclassified`
                  $ref: "#/components/schemas/constructionType"
                unit:
                  $ref: "#/components/schemas/sizeUnit"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  purpose: service/drop
                  unit: m
                  costPerUnit: 5
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    put:
      summary: Replace single existing trench cost
      security:
      - openId:
        - write:mni_cost
      operationId: replaceTrenchCost
      tags:
      - Costs - Trench
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - unit
              - costPerUnit
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                type:
                  description: only include when purpose is `unclassified`
                  $ref: "#/components/schemas/constructionType"
                unit:
                  $ref: "#/components/schemas/sizeUnit"
                costPerUnit:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  purpose: service/drop
                  unit: m
                  costPerUnit: 5.50
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Remove single trench cost
      security:
      - openId:
        - write:mni_cost
      operationId: deleteTrenchCost
      tags:
      - Costs - Trench
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                type:
                  description: only include when purpose is `unclassified`
                  $ref: "#/components/schemas/constructionType"
            examples:
              sample:
                value:
                  purpose: service/drop
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cve/ne/{neId}:
    get:
      summary: List known and impacting CVEs for specified NE
      security:
      - openId:
        - read:mni_alert
      operationId: getCveByNe
      parameters:
      - $ref: "#/components/parameters/neId"
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  known:
                    type: array
                    minItems: 0
                    items:
                      $ref: "#/components/schemas/cveId"
                  impacting:
                    type: array
                    minItems: 0
                    items:
                      $ref: "#/components/schemas/cveId"
              examples:
                sample:
                  value:
                    known:
                    - CVE-2025-5516
                    impacting:
                    - CVE-2025-5516
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cve/{cveId}:
    get:
      summary: List single CVE details
      security:
      - openId:
        - read:mni_alert
      operationId: getSingleCve
      parameters:
      - $ref: "#/components/parameters/cveId"
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cveId:
                    $ref: "#/components/schemas/cveId"
                  published:
                    $ref: "#/components/schemas/dateTime"
                  unpdated:
                    $ref: "#/components/schemas/dateTime"
                  vendor:
                    type: string
                  uri:
                    type: string
                    format: url
                  platforms:
                    type: array
                    minItems: 1
                    items:
                      type: string
                  versions:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                      - lessThan
                      - status
                      - version
                      - versionType
                      properties:
                        lessThan:
                          type: string
                        status:
                          type: string
                        version:
                          type: string
                        versionType:
                          type: string
              examples:
                sample:
                  value:
                    cveId: CVE-2025-5516
                    published: 20250516T181900
                    vendor: Merkator nv/sa
                    uri: 2025/5xxx/CVE-2025-5516.json
                    platforms:
                    - MNI
                    versions:
                    - lessThan: "1.0"
                      status: affected
                      version: "0"
                      versionType: semver
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Remove single CVE
      security:
      - openId:
        - write:mni_internal
      parameters:
      - $ref: "#/components/parameters/cveId"
      operationId: deleteSingleCve
      tags:
      - Alerts
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cve:
    get:
      summary: List all CVE for known vendors
      security:
      - openId:
        - read:mni_alert
      operationId: getAllCve
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/cveId"
              examples:
                sample:
                  value:
                  - CVE-2025-5880
                  - CVE-2025-5881
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single CVE
      security:
      - openId:
        - write:mni_internal
      operationId: addSingleCve
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - cveId
              - published
              - vendor
              - uri
              - platforms
              - versions
              properties:
                cveId:
                  $ref: "#/components/schemas/cveId"
                published:
                  $ref: "#/components/schemas/dateTime"
                unpdated:
                  $ref: "#/components/schemas/dateTime"
                vendor:
                  type: string
                uri:
                  type: string
                  format: url
                platforms:
                  type: array
                  minItems: 1
                  items:
                    type: string
                versions:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                    - lessThan
                    - status
                    - version
                    - versionType
                    properties:
                      lessThan:
                        type: string
                      status:
                        type: string
                      version:
                        type: string
                      versionType:
                        type: string
            examples:
              sample:
                value:
                  cveId: CVE-2025-5516
                  published: 20250516T181900
                  vendor: Merkator nv/sa
                  uri: 2025/5xxx/CVE-2025-5516.json
                  platforms:
                  - MNI
                  versions:
                  - lessThan: "1.0"
                    status: "affected"
                    version: "0"
                    versionType: "semver"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cveId:
                    $ref: "#/components/schemas/cveId"
              example:
                cveId: CVE-2025-5516
        "202":
          description: OK but CVE already existed and was not updated
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
  /alert/callback:
    post:
      summary: Subscribe to one or more alerts
      security:
      - openId:
        - write:mni_alert
      operationId: subscribeAlert
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - requestorId
              - alerts
              properties:
                requestorId:
                  $ref: "#/components/schemas/requestorId"
                alerts:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                    - alertId
                    - callbackUrl
                    properties:
                      alertId:
                        $ref: "#/components/schemas/alertId"
                      callbackUrl:
                        description: fully qualified callback URL of the subscribing endpoint to receive the HTTP POST callback, example `https://10.72.23.21/reply`
                      username:
                        type: string
                      password:
                        type: string
                      authentication:
                        $ref: "#/components/schemas/callbackAuthentication"
                      retries:
                        description: maximum retries in any single alert callback
                        type: integer
                        minimum: 0
                        maximum: 8
                        default: 1
                      retryDelay:
                        description: number of seconds between retries
                        type: integer
                        minimum: 0
                        maximum: 86400
                        default: 60
                      maxLifeRetries:
                        description: |
                          maximum number of permitted retry attempts for the entire life of this request, *note*:
                            when exceeded this callback alert will be automatically deleted
                        type: integer
                        minimum: 0
                        maximum: 255
                        default: 16
            examples:
              sample:
                value:
                  requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                  alerts:
                  - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    callbackUrl: https://10.72.23.21/reply
                    username: internal
                    password: service
                    authentication: basic
                    retries: 3
                    retryDelay: 180
                    maxLifeRetries: 24
      callbacks:
        alertEvent:
          "{$callbackUrl}":
            post:
              security:
              - openId:
                - read:mni_alert
              summary: expected alert callback
              operationId: read:mni_alert
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      required:
                      - subscriptionId
                      - content
                      properties:
                        subscriptionId:
                          $ref: "#/components/schemas/subscriptionId"
                        content:
                          type: object
              responses:
                # Expected responses to the callback message
                "200":
                  $ref: "#/components/responses/Okay"
                "400":
                  $ref: "#/components/responses/BadRequest"
                "404":
                  $ref: "#/components/responses/NotFound"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestorId:
                    $ref: "#/components/schemas/requestorId"
                  alerts:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      properties:
                        alertId:
                          $ref: "#/components/schemas/alertId"
                        subscriptionId:
                          $ref: "#/components/schemas/subscriptionId"
              example:
                requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                alerts:
                - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                  subscriptionId: 3ffc8917-f24d-4d6d-9665-83ecaf05feee
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Unsubscribe from one or more alerts
      security:
      - openId:
        - write:mni_alert
      operationId: unsubscribeAlert
      tags:
      - Alerts
      parameters:
      - $ref: "#/components/parameters/requestorId"
      - $ref: "#/components/parameters/subscriptionId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/publish:
    post:
      summary: Publish one or more alerts to Kafka broker
      security:
      - openId:
        - write:mni_alert
      operationId: publishAlert
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - requestorId
              - alerts
              properties:
                requestorId:
                  $ref: "#/components/schemas/requestorId"
                alerts:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                    - alertId
                    - kafkaProducerId
                    - topic
                    properties:
                      alertId:
                        $ref: "#/components/schemas/alertId"
                      kafkaProducerId:
                        $ref: "#/components/schemas/kafkaProducerId"
                      topic:
                        $ref: "#/components/schemas/kafkaTopic"
            examples:
              sample:
                value:
                  requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                  alerts:
                  - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    kafkaProducerId: 7e3360a0-ce0e-406c-b3a3-d04c6c5500c
                    topic: mni-L23-classifiers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestorId:
                    $ref: "#/components/schemas/requestorId"
                  alerts:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                      - alertId
                      - publicationId
                      properties:
                        alertId:
                          $ref: "#/components/schemas/alertId"
                        publicationId:
                          description: unique alert publication identifier for the publishing endpoint - this is required to unpublish from the alert
                          type: string
                          format: uuid
              example:
                requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                alerts:
                - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                  publicationId: 3ffc8917-f24d-4d6d-9665-83ecaf05feee
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Unpublish one or more alerts
      security:
      - openId:
        - write:mni_alert
      operationId: unpublishAlert
      tags:
      - Alerts
      parameters:
      - $ref: "#/components/parameters/requestorId"
      - $ref: "#/components/parameters/publicationId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/notify/{notificationId}:
    get:
      summary: get one alert definition
      security:
      - openId:
        - read:mni_alert
      operationId: getNotifyAlert
      tags:
      - Alerts
      parameters:
      - $ref: "#/components/parameters/notificationIdentifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  alertId:
                    $ref: "#/components/schemas/alertId"
                  emailProviderId:
                    $ref: "#/components/schemas/emailProviderId"
                  subject:
                    type: string
                    minLength: 1
                    maxLength: 998
                    pattern: '[ -~]'
                  recipients:
                    type: array
                    minItems: 1
                    items:
                      type: string
                      format: email
              example:
                alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                emailProviderId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
                subject: mni-L23-classifiers alert
                recipients:
                - engineer@telsdn.net
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/notify:
    post:
      summary: notify one or more alerts to Email recipient
      security:
      - openId:
        - write:mni_alert
      operationId: notifyAlert
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - requestorId
              - alerts
              properties:
                requestorId:
                  $ref: "#/components/schemas/requestorId"
                alerts:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                    - alertId
                    - emailProviderId
                    - subject
                    - recipients
                    properties:
                      alertId:
                        $ref: "#/components/schemas/alertId"
                      emailProviderId:
                        $ref: "#/components/schemas/emailProviderId"
                      subject:
                        type: string
                        minLength: 1
                        maxLength: 998
                        pattern: '[ -~]'
                      recipients:
                        type: array
                        minItems: 1
                        items:
                          type: string
                          format: email
            examples:
              sample:
                value:
                  requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                  alerts:
                  - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    emailProviderId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
                    subject: mni-L23-classifiers alert
                    recipients:
                    - engineer@telsdn.net
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestorId:
                    $ref: "#/components/schemas/requestorId"
                  alerts:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                      - alertId
                      - notificationId
                      properties:
                        alertId:
                          $ref: "#/components/schemas/alertId"
                        notificationId:
                          description: unique alert notification identifier for the notifying endpoint - this is required to unnotify from the alert
                          type: string
                          format: uuid
              example:
                requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                alerts:
                - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                  notificationId: 3ffc8917-f24d-4d6d-9665-83ecaf05feee
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Unnotify one or more alerts
      security:
      - openId:
        - write:mni_alert
      operationId: unNotifyAlert
      tags:
      - Alerts
      parameters:
      - $ref: "#/components/parameters/requestorId"
      - $ref: "#/components/parameters/notificationId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/workflow:
    post:
      summary: Assign one or more alerts to a workflow runner
      security:
      - openId:
        - write:mni_alert
      operationId: workflowAlertAssign
      tags:
      - Alerts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - requestorId
              - alerts
              properties:
                requestorId:
                  type: string
                  description: unique identifier of the requesting originator
                  format: uuid
                alerts:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                    - alertId
                    - workflowEngineId
                    - flowName
                    properties:
                      alertId:
                        $ref: "#/components/schemas/alertId"
                      workflowEngineId:
                        $ref: "#/components/schemas/workflowEngineId"
                      flowName:
                        $ref: "#/components/schemas/flowName"
            examples:
              sample:
                value:
                  requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                  alerts:
                  - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    workflowEngineId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
                    flowName: BandwidthConsumptionA2B
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestorId:
                    $ref: "#/components/schemas/requestorId"
                  alerts:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                      - alertId
                      - workflowRunnerId
                      properties:
                        alertId:
                          $ref: "#/components/schemas/alertId"
                        workflowRunnerId:
                          description: unique alert workflow runner identifier for the alert - this is required to unassign from alert from the workflow runner
                          type: string
                          format: uuid
              example:
                requestorId: 7c48ef5f-3499-4daf-be2c-82d2b487d869
                alerts:
                - alertId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                  workflowRunnerId: 3ffc8917-f24d-4d6d-9665-83ecaf05feee
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Unassign one or more alerts from a workflow runner
      security:
      - openId:
        - write:mni_alert
      operationId: workflowAlertUnassign
      tags:
      - Alerts
      parameters:
      - $ref: "#/components/parameters/requestorId"
      - $ref: "#/components/parameters/workflowRunnerId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/queue/{qId}:
    delete:
      summary: Remove item from internal alert queue
      security:
      - openId:
        - write:mni_internal
      parameters:
      - $ref: "#/components/parameters/qId"
      operationId: deleteAlertQueueItem
      tags:
      - Alerts
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /alert/queue:
    get:
      summary: Returns next item awaiting processing from internal alert queue
      security:
      - openId:
        - read:mni_internal
      operationId: getNextAlertQueueItem
      tags:
      - Alerts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                - qId
                - point
                - type
                - id
                properties:
                  qId:
                    description: internal queue reference
                    type: integer
                    minimum: 0
                  point:
                    $ref: "#/components/schemas/dateTime"
                  type:
                    description: alert cateogry
                    type: string
                    enum:
                    - callback
                    - publish
                    - notify
                    - workflow
                  id:
                    description: related alert identifier
                    type: string
                    format: uuid
                  callback:
                    description: optional related callback alert identifier
                    type: string
                    format: uuid
                  publish:
                    description: optional related publish alert identifier
                    type: string
                    format: uuid
                  notify:
                    description: optional elated notify alert identifier
                    type: string
                    format: uuid
                  workflow:
                    description: optional related workflow alert identifier
                    type: string
                    format: uuid
              examples:
                sample:
                  value:
                    qId: 1
                    point: 20250603T181900
                    type: callback
                    id: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
                    callback: 3ffc8917-f24d-4d6d-9665-83ecaf05feee
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cables:
    get:
      summary: Export cables in bulk
      security:
      - openId:
        - read:mni_cable
      operationId: getMultipleCables
      tags:
      - Cables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                  - type: object
                    properties:
                      cableId:
                        $ref: "#/components/schemas/cableId"
                      poleId:
                        $ref: "#/components/schemas/poleId"
                      point:
                        $ref: "#/components/schemas/dateTime"
                      technology:
                        $ref: "#/components/schemas/cableTechnology"
                      configuration:
                        $ref: "#/components/schemas/cableConfiguration"
                      state:
                        $ref: "#/components/schemas/cableState"
                      source:
                        $ref: "#/components/schemas/source"
                      delete:
                        $ref: "#/components/schemas/delete"
                  - type: object
                    properties:
                      cableId:
                        $ref: "#/components/schemas/cableId"
                      ductId:
                        $ref: "#/components/schemas/ductId"
                      point:
                        $ref: "#/components/schemas/dateTime"
                      technology:
                        $ref: "#/components/schemas/cableTechnology"
                      configuration:
                        $ref: "#/components/schemas/cableConfiguration"
                      state:
                        $ref: "#/components/schemas/cableState"
                      source:
                        $ref: "#/components/schemas/source"
                      delete:
                        $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import cables in bulk
      security:
      - openId:
        - write:mni_cable
      operationId: addMultipleCables
      tags:
      - Cables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single cables definitions inside JSON array,
                *note*: existing cables (with same identifier) will be replaced
              minItems: 1
              items:
                oneOf:
                - type: object
                  required:
                  - poleId
                  - point
                  - technology
                  - configuration
                  - state
                  properties:
                    cableId:
                      description: optionally specify the internal cable identifier
                      $ref: "#/components/schemas/cableId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    technology:
                      $ref: "#/components/schemas/cableTechnology"
                    configuration:
                      $ref: "#/components/schemas/cableConfiguration"
                    state:
                      $ref: "#/components/schemas/cableState"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
                - type: object
                  required:
                  - ductId
                  - point
                  - technology
                  - configuration
                  - state
                  properties:
                    cableId:
                      description: optionally specify the internal cable identifier
                      $ref: "#/components/schemas/cableId"
                    ductId:
                      $ref: "#/components/schemas/ductId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    technology:
                      $ref: "#/components/schemas/cableTechnology"
                    configuration:
                      $ref: "#/components/schemas/cableConfiguration"
                    state:
                      $ref: "#/components/schemas/cableState"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal cable identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/cableId"
              examples:
                sample:
                  value:
                  - 5520aca1-4727-431a-aa9c-23f2e54b8a41
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cable:
    get:
      summary: List of all known cables
      security:
      - openId:
        - read:mni_cable
      operationId: getAllCables
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Cables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/cableId"
              examples:
                sample:
                  value:
                  - 5520aca1-4727-431a-aa9c-23f2e54b8a41
                  - 3970af86-e19f-4e4c-810b-246aea08f941
                  - 84eabb13-c76e-466d-8993-7d7ee4695682
                  - 31d0f438-0f60-4b09-917e-95f373af9fd2
                  - c731866d-7347-4e56-acf9-abab931cf83e
                  - 6bbbd7f1-f551-489b-abfc-fcf0be0880ce
                  - d321fc40-8cb9-4db5-99d7-5c5e96d2a146
                  - d5527663-e75f-41c5-a7a4-7db82ed49b07
                  - 77ece265-d111-40c6-b4e2-1aa5e8c182aa
                  - b8e322d3-6004-43ad-93c1-7ba73ec4fe97
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single cable
      security:
      - openId:
        - write:mni_cable
      operationId: addSingleCable
      tags:
      - Cables
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                required:
                - poleId
                - technology
                - configuration
                - state
                properties:
                  poleId:
                    $ref: "#/components/schemas/poleId"
                  technology:
                    $ref: "#/components/schemas/cableTechnology"
                  configuration:
                    $ref: "#/components/schemas/cableConfiguration"
                  state:
                    $ref: "#/components/schemas/cableState"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              - type: object
                required:
                - ductId
                - technology
                - configuration
                - state
                properties:
                  ductId:
                    $ref: "#/components/schemas/ductId"
                  technology:
                    $ref: "#/components/schemas/cableTechnology"
                  configuration:
                    $ref: "#/components/schemas/cableConfiguration"
                  state:
                    $ref: "#/components/schemas/cableState"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
            examples:
              ethernet:
                value:
                  ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: ethernet
                  configuration:
                    category: Cat6A
                    rate: 10
                    unit: Gbps
                  state: free
                  source: historical
                  delete: false
              single:
                value:
                  poleId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: singleFiber
                  configuration:
                    strands: 1
                    mode: SMOF
                  state: free
                  source: historical
                  delete: false
              multi:
                value:
                  poleId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: multiFiber
                  configuration:
                    ribbons: 12
                    strands: 24
                    mode: MMOF
                  state: free
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cableId:
                    $ref: "#/components/schemas/cableId"
              examples:
                service/drop:
                  value:
                    cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cables/state:
    get:
      summary: Simple statistics for cables
      security:
      - openId:
        - read:mni_cable
      operationId: getCablesSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Cables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cables/capacity/state:
    get:
      summary: State capacity for cables
      security:
      - openId:
        - read:mni_cable
      operationId: getCablesCapacityState
      parameters:
      - $ref: "#/components/parameters/dateFrom"
      - $ref: "#/components/parameters/dateTo"
      - $ref: "#/components/parameters/dateBefore"
      - $ref: "#/components/parameters/dateAfter"
      - $ref: "#/components/parameters/aggregationUnit"
      tags:
      - Cables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  by:
                    $ref: "#/components/schemas/aggregationUnit"
                  cable:
                    $ref: "#/components/schemas/cableCapacityState"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cable/{cableId}:
    delete:
      summary: delete single cable
      security:
      - openId:
        - write:mni_cable
      operationId: deleteSingleCable
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace entire single cable
      security:
      - openId:
        - write:mni_cable
      operationId: replaceSingleCable
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                required:
                - ductId
                - technology
                - configuration
                - state
                properties:
                  ductId:
                    $ref: "#/components/schemas/ductId"
                  technology:
                    $ref: "#/components/schemas/cableTechnology"
                  configuration:
                    $ref: "#/components/schemas/cableConfiguration"
                  state:
                    $ref: "#/components/schemas/cableState"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              - type: object
                required:
                - poleId
                - technology
                - configuration
                - state
                properties:
                  poleId:
                    $ref: "#/components/schemas/poleId"
                  technology:
                    $ref: "#/components/schemas/cableTechnology"
                  configuration:
                    $ref: "#/components/schemas/cableConfiguration"
                  state:
                    $ref: "#/components/schemas/cableState"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
            examples:
              multi:
                value:
                  ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: multiFiber
                  configuration:
                    ribbons: 24
                    strands: 48
                    mode: MMOF
                  state: used
                  source: historical
                  delete: false
              single:
                value:
                  poleId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: singleFiber
                  configuration:
                    strands: 18
                    mode: SMOF
                  state: used
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update aspects of a single cable
      security:
      - openId:
        - write:mni_cable
      operationId: updateSingleCable
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                properties:
                  cableId:
                    $ref: "#/components/schemas/cableId"
                  ductId:
                    $ref: "#/components/schemas/ductId"
                  technology:
                    $ref: "#/components/schemas/cableTechnology"
                  configuration:
                    $ref: "#/components/schemas/cableConfiguration"
                  state:
                    $ref: "#/components/schemas/cableState"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              - type: object
                properties:
                  cableId:
                    $ref: "#/components/schemas/cableId"
                  poleId:
                    $ref: "#/components/schemas/poleId"
                  technology:
                    $ref: "#/components/schemas/cableTechnology"
                  configuration:
                    $ref: "#/components/schemas/cableConfiguration"
                  state:
                    $ref: "#/components/schemas/cableState"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
            examples:
              multi:
                value:
                  cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                  ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: multiFiber
                  configuration:
                    ribbons: 24
                    strands: 48
                    mode: MMOF
                  state: free
                  source: historical
                  delete: false
              single:
                value:
                  cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                  poleId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                  technology: singleFiber
                  configuration:
                    strands: 18
                    mode: SMOF
                  state: free
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified cable
      security:
      - openId:
        - read:mni_cable
      operationId: getSingleCable
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    cableId:
                      $ref: "#/components/schemas/cableId"
                    ductId:
                      $ref: "#/components/schemas/ductId"
                    technology:
                      $ref: "#/components/schemas/cableTechnology"
                    configuration:
                      $ref: "#/components/schemas/cableConfiguration"
                    state:
                      $ref: "#/components/schemas/cableState"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
                - type: object
                  properties:
                    cableId:
                      $ref: "#/components/schemas/cableId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                    technology:
                      $ref: "#/components/schemas/cableTechnology"
                    configuration:
                      $ref: "#/components/schemas/cableConfiguration"
                    state:
                      $ref: "#/components/schemas/cableState"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
              examples:
                ethernet:
                  value:
                    cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                    ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    technology: ethernet
                    state: used
                    source: historical
                    delete: false
                single:
                  value:
                    cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                    ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                    configuration:
                      strands: 48
                      mode: SMOF
                    technology: singleFiber
                    state: free
                    source: historical
                    delete: false
                multi:
                  value:
                    cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                    ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                    configuration:
                      ribbons: 24
                      strands: 48
                      mode: MMOF
                    technology: multiFiber
                    state: free
                    source: historical
                    delete: false
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cable/{cableId}/state/single/{strand}:
    patch:
      summary: Update usage state specific fiber strand inside a fiber optic cable
      security:
      - openId:
        - write:mni_cable
      operationId: updateSingleCableStrandState
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      - $ref: "#/components/parameters/strand"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: "#/components/schemas/cableState"
            examples:
              single:
                value:
                  state: used
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cable/{cableId}/state/multi/{ribbon}/{strand}:
    patch:
      summary: Update usage state specific fiber strand in a given ribbon inside a fiber optic cable
      security:
      - openId:
        - write:mni_cable
      operationId: updateSingleCableRibbonStrandState
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      - $ref: "#/components/parameters/ribbon"
      - $ref: "#/components/parameters/strand"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: "#/components/schemas/cableState"
            examples:
              multi:
                value:
                  state: used
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cable/{cableId}/channel/{channel}:
    patch:
      summary: Update usage state specific channel inside a coaxial cable
      security:
      - openId:
        - write:mni_cable
      operationId: updateSingleCableCoaxState
      tags:
      - Cables
      parameters:
      - $ref: "#/components/parameters/cableId"
      - $ref: "#/components/parameters/channel"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: "#/components/schemas/cableState"
            examples:
              single:
                value:
                  state: used
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /cable/timeline/{cableId}:
    get:
      summary: timeline points for specified cable
      security:
      - openId:
        - read:mni_cable
      operationId: getCableTimeline
      parameters:
      - $ref: "#/components/parameters/cableId"
      tags:
      - Cables
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /currency:
    get:
      summary: List of all defined currencies
      security:
      - openId:
        - read:mni_api
      operationId: getAllCurrencies
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Currencies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    currencyId:
                      $ref: "#/components/schemas/currencyId"
                    name:
                      $ref: "#/components/schemas/currencyName"
                    symbol:
                      $ref: "#/components/schemas/currencySymbol"
                    isoCode:
                      $ref: "#/components/schemas/currencyIsoCode"
                    rate:
                      description: currency conversion rate from default currency to this currency
                      type: number
                      format: currency
              examples:
                sample:
                  value:
                  - currencyId: 578a82ad-a7ce-4f9c-ba5f-fbe27c1886f5
                    name: 'Euro'
                    symbol: '€'
                    isoCode: EUR
                    rate: 1
                  - currencyId: 007fa4b5-9776-4e99-a116-095398b5d47a
                    name: 'Sterling'
                    symbol: '£'
                    isoCode: GBP
                    rate: 0.85
                  - currencyId: 300e2d59-e873-4ecc-a3ad-58e44e3f3c03
                    name: 'United States dollar'
                    symbol: '$'
                    isoCode: USD
                    rate: 1.17
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /currency/default:
    get:
      summary: Get default monetary currency
      security:
      - openId:
        - read:mni_api
      operationId: getDefaultCurrency
      tags:
      - Currencies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  currencyId:
                    $ref: "#/components/schemas/currencyId"
                  name:
                    $ref: "#/components/schemas/currencyName"
                  symbol:
                    $ref: "#/components/schemas/currencySymbol"
                  isoCode:
                    $ref: "#/components/schemas/currencyIsoCode"
              examples:
                sample:
                  value:
                    currencyId: 578a82ad-a7ce-4f9c-ba5f-fbe27c1886f5
                    name: 'Euro'
                    symbol: '€'
                    isoCode: EUR
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /currency{currencyId}:
    patch:
      summary: update currency conversion rate
      security:
      - openId:
        - write:mni_admin
      operationId: updateCurrencyRate
      parameters:
      - $ref: "#/components/parameters/currencyId"
      tags:
      - Currencies
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - rate
              properties:
                rate:
                  type: number
                  format: currency
                  minimum: 0
            examples:
              sample:
                value:
                  rate: 0.85
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Change default currency
      security:
      - openId:
        - write:mni_admin
      operationId: updateCurrencyDefault
      parameters:
      - $ref: "#/components/parameters/currencyId"
      tags:
      - Currencies
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ducts:
    get:
      summary: Export ducts in bulk
      security:
      - openId:
        - read:mni_duct
      operationId: getMultipleDucts
      tags:
      - Ducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ductId:
                      $ref: "#/components/schemas/ductId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    purpose:
                      $ref: "#/components/schemas/ductPurpose"
                    category:
                      $ref: "#/components/schemas/ductSizeCategory"
                    configuration:
                      $ref: "#/components/schemas/ductConfiguration"
                    state:
                      $ref: "#/components/schemas/ductState"
                    within:
                      description: |
                        for a microduct or subduct which duct or microduct is it contained within
                      $ref: "#/components/schemas/ductId"
                    placement:
                      $ref: "#/components/schemas/ductPlacement"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import ducts in bulk
      security:
      - openId:
        - write:mni_duct
      operationId: addMultipleDucts
      tags:
      - Ducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single duct definitions inside JSON array, 
                *note*: existing ducts (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - trenchId
                - purpose
                - category
                - configuration
                - placement
                - state
                properties:
                  ductId:
                    description: optionally specify the internal duct identifier
                    $ref: "#/components/schemas/ductId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  trenchId:
                    $ref: "#/components/schemas/trenchId"
                  purpose:
                    $ref: "#/components/schemas/ductPurpose"
                  category:
                    $ref: "#/components/schemas/ductSizeCategory"
                  configuration:
                    $ref: "#/components/schemas/ductConfiguration"
                  state:
                    $ref: "#/components/schemas/ductState"
                  within:
                    description: |
                      for a microduct or subduct which duct or microduct is it contained within
                    $ref: "#/components/schemas/ductId"
                  placement:
                    $ref: "#/components/schemas/ductPlacement"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal duct identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/ductId"
              examples:
                sample:
                  value:
                  - 4f61c862-cbd6-4455-9cf2-3d478406c693
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ducts/state:
    get:
      summary: Simple statistics for ducts
      security:
      - openId:
        - read:mni_duct
      operationId: getDuctsSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Ducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /duct:
    post:
      summary: Add single duct
      security:
      - openId:
        - write:mni_duct
      operationId: addSingleDuct
      tags:
      - Ducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - trenchId
              - purpose
              - category
              - configuration
              - placement
              - state
              properties:
                trenchId:
                  $ref: "#/components/schemas/trenchId"
                purpose:
                  $ref: "#/components/schemas/ductPurpose"
                category:
                  $ref: "#/components/schemas/ductSizeCategory"
                configuration:
                  $ref: "#/components/schemas/ductConfiguration"
                state:
                  $ref: "#/components/schemas/ductState"
                within:
                  description: |
                    for a microduct or subduct which duct or microduct is it contained within
                  $ref: "#/components/schemas/ductId"
                placement:
                  $ref: "#/components/schemas/ductPlacement"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                  purpose: cable
                  category: microduct
                  configuration: 24
                  state: free
                  placement:
                    horizontal: 1579
                    vertical: 350
                    unit: mm
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ductId:
                    $ref: "#/components/schemas/ductId"
              examples:
                service/drop:
                  value:
                    ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: List of all known ducts
      security:
      - openId:
        - read:mni_duct
      operationId: getAllDuct
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Ducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ductId"
              examples:
                sample:
                  value:
                  - 4f61c862-cbd6-4455-9cf2-3d478406c693
                  - 1ed39d9c-b95b-4745-a93c-f2fd49ef740d
                  - 74d91189-0b4f-4734-9666-b3b030502e80
                  - 253c57de-00ef-4819-b509-b99e82990125
                  - eadfd1fb-2356-4666-9fd1-288bb393fa2a
                  - b78af928-5e4f-43f3-bc61-fcef3af0740f
                  - d9d00870-f242-4597-8168-152e0945709a
                  - 224c9a62-f49e-4ff8-a4cb-b20dab18345a
                  - cec8b457-59ce-4b13-9627-b2d0a15248c5
                  - f9f67501-9674-47a2-a0dc-d40f9c6554aa
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ducts/capacity/state:
    get:
      summary: State capacity for ducts
      security:
      - openId:
        - read:mni_duct
      operationId: getDuctsCapacityState
      parameters:
      - $ref: "#/components/parameters/dateFrom"
      - $ref: "#/components/parameters/dateTo"
      - $ref: "#/components/parameters/dateBefore"
      - $ref: "#/components/parameters/dateAfter"
      - $ref: "#/components/parameters/aggregationUnit"
      tags:
      - Ducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  by:
                    $ref: "#/components/schemas/aggregationUnit"
                  duct:
                    type: array
                    items:
                      type: object
                      properties:
                        ductId:
                          $ref: "#/components/schemas/ductId"
                        within:
                          description: |
                            for a microduct or subduct which duct or microduct is it contained within
                          $ref: "#/components/schemas/ductId"
                        trenchId:
                          $ref: "#/components/schemas/trenchId"
                        capacity:
                          type: array
                          items:
                            type: object
                            properties:
                              period:
                                $ref: "#/components/schemas/datePeriod"
                              state:
                                $ref: "#/components/schemas/ductState"
              examples:
                sample:
                  value:
                    by: "quarter"
                    duct:
                    - ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                      trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                      capacity:
                      - period: "Q32024"
                        state: "free"
                      - period: "Q42024"
                        state: "used"
                      - period: "Q12025"
                        state: "used"
                    - ductId: 1ed39d9c-b95b-4745-a93c-f2fd49ef740d
                      trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                      capacity:
                      - period: "Q32024"
                        state: "free"
                      - period: "Q42024"
                        state: "free"
                      - period: "Q12025"
                        state: "free"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /duct/{ductId}:
    delete:
      summary: delete single duct
      security:
      - openId:
        - write:mni_duct
      operationId: deleteSingleDuct
      tags:
      - Ducts
      parameters:
      - $ref: "#/components/parameters/ductId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace entire single duct
      security:
      - openId:
        - write:mni_duct
      operationId: replaceSingleDuct
      tags:
      - Ducts
      parameters:
      - $ref: "#/components/parameters/ductId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - trenchId
              - purpose
              - category
              - configuration
              - placement
              - state
              properties:
                trenchId:
                  $ref: "#/components/schemas/trenchId"
                purpose:
                  $ref: "#/components/schemas/ductPurpose"
                category:
                  $ref: "#/components/schemas/ductSizeCategory"
                configuration:
                  $ref: "#/components/schemas/ductConfiguration"
                state:
                  $ref: "#/components/schemas/ductState"
                within:
                  description: |
                    for a microduct or subduct which duct or microduct is it contained within
                  $ref: "#/components/schemas/ductId"
                placement:
                  $ref: "#/components/schemas/ductPlacement"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                  purpose: cable
                  category: microduct
                  configuration: 12
                  state: free
                  placement:
                    horizontal: 1579
                    vertical: 350
                    unit: mm
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update aspects of a single duct
      security:
      - openId:
        - write:mni_duct
      operationId: updateSingleDuct
      tags:
      - Ducts
      parameters:
      - $ref: "#/components/parameters/ductId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trenchId:
                  $ref: "#/components/schemas/trenchId"
                purpose:
                  $ref: "#/components/schemas/ductPurpose"
                category:
                  $ref: "#/components/schemas/ductSizeCategory"
                configuration:
                  $ref: "#/components/schemas/ductConfiguration"
                state:
                  $ref: "#/components/schemas/ductState"
                within:
                  description: |
                    for a microduct or subduct which duct or microduct is it contained within
                  $ref: "#/components/schemas/ductId"
                placement:
                  $ref: "#/components/schemas/ductPlacement"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  state: used
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified duct
      security:
      - openId:
        - read:mni_duct
      operationId: getSingleDuct
      tags:
      - Ducts
      parameters:
      - $ref: "#/components/parameters/ductId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ductId:
                    $ref: "#/components/schemas/ductId"
                  trenchId:
                    $ref: "#/components/schemas/trenchId"
                  purpose:
                    $ref: "#/components/schemas/ductPurpose"
                  category:
                    $ref: "#/components/schemas/ductSizeCategory"
                  configuration:
                    $ref: "#/components/schemas/ductConfiguration"
                  state:
                    $ref: "#/components/schemas/ductState"
                  within:
                    description: |
                      for a microduct or subduct which duct or microduct is it contained within
                    $ref: "#/components/schemas/ductId"
                  placement:
                    $ref: "#/components/schemas/ductPlacement"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                sample:
                  value:
                    ductId: 4f61c862-cbd6-4455-9cf2-3d478406c693
                    trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                    purpose: cable
                    category: microduct
                    configuration: 24
                    state: used
                    placement:
                      horizontal: 1579
                      vertical: 350
                      unit: mm
                    source: historical
                    delete: false
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /services:
    get:
      summary: Export services in bulk
      security:
      - openId:
        - read:mni_service
      operationId: getMultipleServices
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  type: object
                  properties:
                    serviceId:
                      $ref: "#/components/schemas/serviceId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    reference:
                      type: string
                    customer:
                      type: object
                      properties:
                        name:
                          type: string
                        reference:
                          type: string
                    commissioned:
                      $ref: "#/components/schemas/date"
                    decommissioned:
                      $ref: "#/components/schemas/date"
                    lag:
                      description: Link Aggregation Group for bundling multiple connection points
                      type: object
                      properties:
                        group:
                          type: string
                        members:
                          type: integer
                          minimum: 0
                          maximum: 256
                          default: 0
                    link:
                      type: object
                      properties:
                        ingress:
                          type: array
                          minItems: 1
                          maxItems: 256
                          items:
                            type: object
                            properties:
                              neId:
                                $ref: "#/components/schemas/neId"
                              port:
                                $ref: "#/components/schemas/portName"
                              cVlanId:
                                $ref: "#/components/schemas/vlanId"
                                default: 0
                              sVlanId:
                                $ref: "#/components/schemas/vlanId"
                              member:
                                type: integer
                                minimum: 0
                                maximum: 256
                                default: 0
                        egress:
                          type: array
                          minItems: 1
                          maxItems: 256
                          items:
                            type: object
                            properties:
                              neId:
                                $ref: "#/components/schemas/neId"
                              port:
                                $ref: "#/components/schemas/portName"
                              cVlanId:
                                $ref: "#/components/schemas/vlanId"
                                default: 0
                              sVlanId:
                                $ref: "#/components/schemas/vlanId"
                              member:
                                type: integer
                                minimum: 0
                                maximum: 256
                                default: 0
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import services in bulk
      security:
      - openId:
        - write:mni_service
      operationId: addMultipleServices
      tags:
      - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single service definitions inside JSON array, 
                *note*: existing services (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - customer
                - commissioned
                - link
                properties:
                  serviceId:
                    description: optionally specify the internal service identifier
                    $ref: "#/components/schemas/serviceId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  reference:
                    type: string
                  customer:
                    type: object
                    required:
                    - name
                    properties:
                      name:
                        type: string
                      reference:
                        type: string
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  lag:
                    description: Link Aggregation Group for bundling multiple connection points
                    type: object
                    properties:
                      group:
                        type: string
                      members:
                        type: integer
                        minimum: 0
                        maximum: 256
                        default: 0
                  link:
                    type: object
                    required:
                    - ingress
                    - egress
                    properties:
                      ingress:
                        type: array
                        minItems: 1
                        maxItems: 256
                        items:
                          type: object
                          required:
                          - neId
                          - port
                          properties:
                            neId:
                              $ref: "#/components/schemas/neId"
                            port:
                              $ref: "#/components/schemas/portName"
                            cVlanId:
                              $ref: "#/components/schemas/vlanId"
                              default: 0
                            sVlanId:
                              $ref: "#/components/schemas/vlanId"
                            member:
                              type: integer
                              minimum: 0
                              maximum: 256
                              default: 0
                      egress:
                        type: array
                        minItems: 1
                        maxItems: 256
                        items:
                          type: object
                          required:
                          - neId
                          - port
                          properties:
                            neId:
                              $ref: "#/components/schemas/neId"
                            port:
                              $ref: "#/components/schemas/portName"
                            cVlanId:
                              $ref: "#/components/schemas/vlanId"
                              default: 0
                            sVlanId:
                              $ref: "#/components/schemas/vlanId"
                            member:
                              type: integer
                              minimum: 0
                              maximum: 256
                              default: 0
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal service identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/serviceId"
              examples:
                sample:
                  value:
                  - 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /duct/timeline/{ductId}:
    get:
      summary: timeline points for specified duct
      security:
      - openId:
        - read:mni_duct
      operationId: getDuctTimeline
      parameters:
      - $ref: "#/components/parameters/ductId"
      tags:
      - Ducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /service/timeline/{serviceId}:
    get:
      summary: timeline points for specified service
      security:
      - openId:
        - read:mni_service
      operationId: getServiceTimeline
      parameters:
      - $ref: "#/components/parameters/serviceId"
      tags:
      - Services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /services/state:
    get:
      summary: Simple statistics for services
      security:
      - openId:
        - read:mni_service
      operationId: getServicesSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /service:
    get:
      summary: List of all known services
      security:
      - openId:
        - read:mni_service
      operationId: getAllServices
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/serviceId"
              examples:
                sample:
                  value:
                  - dab18895-c0ab-4267-815c-1d04b1b66586
                  - be0b48c3-b149-42c7-abdc-65ac8a635f79
                  - 97fc88b7-f292-410d-8e5e-99644da22eb6
                  - 21f9393b-f07c-4007-bc40-ddf583c44204
                  - 6af1aa26-0e73-45a3-8593-d9dda68d9e21
                  - 7b253875-48c5-4cf7-b46a-495f67d2c58d
                  - a0f8a856-38ae-430c-a648-7a46534e1ac6
                  - e80a4d88-d56b-4d35-b25d-ab68e17d09c6
                  - 88a1237b-3a03-4037-ad5f-cc4c705b8e53
                  - e6e6a1c9-b233-477b-9e2d-58b99ca26fbe
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single Service
      security:
      - openId:
        - write:mni_service
      operationId: addSingleService
      tags:
      - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - reference
              - customer
              - commissioned
              - link
              properties:
                reference:
                  type: string
                customer:
                  type: object
                  required:
                  - name
                  properties:
                    name:
                      type: string
                    reference:
                      type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                rate:
                  description: maximum service rate
                  type: integer
                  minimum: 1
                  maximum: 768
                  default: 0
                unit:
                  description: unit of service rate
                  type: string
                  enum:
                  - Mbps
                  - Gbps
                  - Tbps
                  default: Gbps
                lag:
                  description: Link Aggregation Group for bundling multiple connection points
                  type: object
                  properties:
                    group:
                      type: string
                    members:
                      type: integer
                      minimum: 0
                      maximum: 256
                      default: 0
                link:
                  type: object
                  required:
                  - ingress
                  - egress
                  properties:
                    ingress:
                      type: array
                      minItems: 1
                      maxItems: 256
                      items:
                        type: object
                        required:
                        - neId
                        - port
                        - cVlanId
                        properties:
                          neId:
                            $ref: "#/components/schemas/neId"
                          port:
                            $ref: "#/components/schemas/portName"
                          cVlanId:
                            $ref: "#/components/schemas/vlanId"
                            default: 0
                          sVlanId:
                            $ref: "#/components/schemas/vlanId"
                          member:
                            type: integer
                            minimum: 0
                            maximum: 256
                            default: 0
                    egress:
                      type: array
                      minItems: 1
                      maxItems: 256
                      items:
                        type: object
                        required:
                        - neId
                        - port
                        - cVlanId
                        properties:
                          neId:
                            $ref: "#/components/schemas/neId"
                          port:
                            $ref: "#/components/schemas/portName"
                          cVlanId:
                            $ref: "#/components/schemas/vlanId"
                            default: 0
                          sVlanId:
                            $ref: "#/components/schemas/vlanId"
                          member:
                            type: integer
                            minimum: 0
                            maximum: 256
                            default: 0
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  reference: ZX2034-10-10
                  customer:
                    name: Bluevia
                    reference: sample
                  commissioned: "20241010"
                  rate: 1
                  unit: Gbps
                  lag:
                    group: LAG1
                    members: 2
                  link:
                    ingress:
                    - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                      port: ge-0/0/1
                      cVlanId: 0
                      member: 1
                    - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                      port: ge-0/0/2
                      cVlanId: 0
                      member: 2
                    egress:
                    - neId: 9fa85349-4a8d-4014-bf95-344fdfad1a7f
                      port: ge-0/0/1
                      cVlanId: 0
                      member: 1
                    - neId: 1074dfb1-b03d-484f-b46a-35957669d468
                      port: ge-0/0/2
                      cVlanId: 0
                      member: 2
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceId:
                    $ref: "#/components/schemas/serviceId"
              example:
                serviceId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /service/{serviceId}:
    patch:
      summary: Update single service
      security:
      - openId:
        - write:mni_service
      operationId: updateSingleService
      parameters:
      - $ref: "#/components/parameters/serviceId"
      tags:
      - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  type: string
                customer:
                  type: object
                  properties:
                    name:
                      type: string
                    reference:
                      type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                rate:
                  description: maximum service rate
                  type: integer
                  minimum: 0
                  maximum: 768
                unit:
                  description: unit of service rate
                  type: string
                  enum:
                  - Mbps
                  - Gbps
                  - Tbps
                lag:
                  description: Link Aggregation Group for bundling multiple connection points
                  type: object
                  properties:
                    group:
                      type: string
                    members:
                      type: integer
                      minimum: 0
                      maximum: 256
                      default: 0
                link:
                  type: object
                  properties:
                    ingress:
                      type: array
                      minItems: 1
                      maxItems: 256
                      items:
                        type: object
                        properties:
                          neId:
                            $ref: "#/components/schemas/neId"
                          port:
                            $ref: "#/components/schemas/portName"
                          cVlanId:
                            $ref: "#/components/schemas/vlanId"
                            default: 0
                          sVlanId:
                            $ref: "#/components/schemas/vlanId"
                          member:
                            type: integer
                            minimum: 0
                            maximum: 256
                            default: 0
                    egress:
                      type: array
                      minItems: 1
                      maxItems: 256
                      items:
                        type: object
                        properties:
                          neId:
                            $ref: "#/components/schemas/neId"
                          port:
                            $ref: "#/components/schemas/portName"
                          cVlanId:
                            $ref: "#/components/schemas/vlanId"
                            default: 0
                          sVlanId:
                            $ref: "#/components/schemas/vlanId"
                          member:
                            type: integer
                            minimum: 0
                            maximum: 256
                            default: 0
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  link:
                    ingress:
                    - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                      port: ge-1/0/1
                    egress:
                    - neId: 9fa85349-4a8d-4014-bf95-344fdfad1a7f
                      port: ge-1/0/1
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace single service
      security:
      - openId:
        - write:mni_service
      operationId: replaceSingleService
      parameters:
      - $ref: "#/components/parameters/serviceId"
      tags:
      - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - customer
              - commissioned
              - link
              properties:
                reference:
                  type: string
                customer:
                  type: object
                  properties:
                    name:
                      type: string
                    reference:
                      type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                rate:
                  description: maximum service rate
                  type: integer
                  minimum: 0
                  maximum: 768
                  default: 0
                unit:
                  description: unit of service rate
                  type: string
                  enum:
                  - Mbps
                  - Gbps
                  - Tbps
                  default: Gbps
                lag:
                  description: Link Aggregation Group for bundling multiple connection points
                  type: object
                  properties:
                    group:
                      type: string
                    members:
                      type: integer
                      minimum: 0
                      maximum: 256
                      default: 0
                link:
                  type: object
                  required:
                  - ingress
                  - egress
                  properties:
                    ingress:
                      type: array
                      minItems: 1
                      maxItems: 256
                      items:
                        type: object
                        required:
                        - neId
                        - port
                        - cVlanId
                        - member
                        properties:
                          neId:
                            $ref: "#/components/schemas/neId"
                          port:
                            $ref: "#/components/schemas/portName"
                          cVlanId:
                            $ref: "#/components/schemas/vlanId"
                            default: 0
                          sVlanId:
                            $ref: "#/components/schemas/vlanId"
                          member:
                            type: integer
                            minimum: 0
                            maximum: 256
                            default: 0
                    egress:
                      type: array
                      minItems: 1
                      maxItems: 256
                      items:
                        type: object
                        required:
                        - neId
                        - port
                        - cVlanId
                        - member
                        properties:
                          neId:
                            $ref: "#/components/schemas/neId"
                          port:
                            $ref: "#/components/schemas/portName"
                          cVlanId:
                            $ref: "#/components/schemas/vlanId"
                            default: 0
                          sVlanId:
                            $ref: "#/components/schemas/vlanId"
                          member:
                            type: integer
                            minimum: 0
                            maximum: 256
                            default: 0
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  reference: ZX2034-10-10
                  customer:
                    name: Bluevia
                    reference: sample
                  commissioned: "20241010"
                  rate: 1
                  unit: Gbps
                  lag:
                    group: LAG1
                    members: 2
                  link:
                    ingress:
                    - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                      port: ge-1/0/1
                      cVlanId: 0
                      member: 1
                    - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                      port: ge-0/0/2
                      cVlanId: 0
                      member: 2
                    egress:
                    - neId: 9fa85349-4a8d-4014-bf95-344fdfad1a7f
                      port: ge-0/0/1
                      cVlanId: 0
                      member: 1
                    - neId: 1074dfb1-b03d-484f-b46a-35957669d468
                      port: ge-0/0/2
                      cVlanId: 0
                      member: 2
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete specified Service
      security:
      - openId:
        - write:mni_service
      operationId: deleteSingleService
      tags:
      - Services
      parameters:
      - $ref: "#/components/parameters/serviceId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified service
      security:
      - openId:
        - read:mni_service
      parameters:
      - $ref: "#/components/parameters/serviceId"
      - $ref: "#/components/parameters/dateTime"
      operationId: getSingleService
      tags:
      - Services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceId:
                    $ref: "#/components/schemas/serviceId"
                  reference:
                    type: string
                  customer:
                    type: object
                    required:
                    - name
                    properties:
                      name:
                        type: string
                      reference:
                        type: string
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  rate:
                    description: maximum service rate
                    type: integer
                    minimum: 0
                    maximum: 768
                    default: 0
                  unit:
                    description: unit of service rate
                    type: string
                    enum:
                    - Mbps
                    - Gbps
                    - Tbps
                    default: Gbps
                  lag:
                    description: Link Aggregation Group for bundling multiple connection points
                    type: object
                    properties:
                      group:
                        type: string
                      members:
                        type: integer
                        minimum: 0
                        maximum: 256
                        default: 0
                  link:
                    type: object
                    properties:
                      ingress:
                        type: array
                        minItems: 1
                        maxItems: 256
                        items:
                          type: object
                          properties:
                            neId:
                              $ref: "#/components/schemas/neId"
                            port:
                              $ref: "#/components/schemas/portName"
                            cVlanId:
                              $ref: "#/components/schemas/vlanId"
                              default: 0
                            sVlanId:
                              $ref: "#/components/schemas/vlanId"
                            member:
                              type: integer
                              minimum: 0
                              maximum: 256
                              default: 0
                      egress:
                        type: array
                        minItems: 1
                        maxItems: 256
                        items:
                          type: object
                          properties:
                            neId:
                              $ref: "#/components/schemas/neId"
                            port:
                              $ref: "#/components/schemas/portName"
                            cVlanId:
                              $ref: "#/components/schemas/vlanId"
                              default: 0
                            sVlanId:
                              $ref: "#/components/schemas/vlanId"
                            member:
                              type: integer
                              minimum: 0
                              maximum: 256
                              default: 0
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                sample:
                  value:
                    serviceId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                    reference: ZX2034-10-10
                    customer:
                      name: Bluevia
                      reference: sample
                    commissioned: "20241010"
                    rate: 1
                    unit: Gbps
                    lag:
                      group: LAG1
                      members: 2
                    link:
                      ingress:
                      - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                        port: ge-0/0/1
                        cVlanId: 0
                        member: 1
                      - neId: 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                        port: ge-0/0/2
                        cVlanId: 0
                        member: 2
                      egress:
                      - neId: 9fa85349-4a8d-4014-bf95-344fdfad1a7f
                        port: ge-0/0/1
                        cVlanId: 0
                        member: 1
                      - neId: 1074dfb1-b03d-484f-b46a-35957669d468
                        port: ge-0/0/2
                        cVlanId: 0
                        member: 2
                    source: historical
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /sites:
    get:
      summary: Export sites in bulk
      security:
      - openId:
        - read:mni_site
      operationId: getMultipleSites
      tags:
      - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    reference:
                      type: string
                    commissioned:
                      $ref: "#/components/schemas/date"
                    decommissioned:
                      $ref: "#/components/schemas/date"
                    area:
                      $ref: "#/components/schemas/areaType"
                      default: unclassified
                    type:
                      $ref: "#/components/schemas/siteType"
                      default: unclassified
                    location:
                      type: object
                      properties:
                        country:
                          $ref: "#/components/schemas/countryCode"
                        region:
                          type: string
                        town:
                          type: string
                        district:
                          type: string
                        street:
                          type: string
                        premisesNameNumber:
                          type: string
                        postalCode:
                          type: string
                        coordinate:
                          $ref: "#/components/schemas/coordinate"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import sites in bulk
      security:
      - openId:
        - write:mni_site
      operationId: addMultipleSites
      tags:
      - Sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single site definitions inside JSON array,
                *note*: existing sites (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - point
                - reference
                - commissioned
                - location
                properties:
                  siteId:
                    description: optionally specify the site internal identifier
                    $ref: "#/components/schemas/siteId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  reference:
                    type: string
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  area:
                    $ref: "#/components/schemas/areaType"
                    default: unclassified
                  type:
                    $ref: "#/components/schemas/siteType"
                    default: unclassified
                  location:
                    type: object
                    required:
                    - country
                    - region
                    - town
                    - street
                    - premisesNameNumber
                    - postalCode
                    - coordinate
                    properties:
                      country:
                        $ref: "#/components/schemas/countryCode"
                      region:
                        type: string
                      town:
                        type: string
                      district:
                        type: string
                      street:
                        type: string
                      premisesNameNumber:
                        type: string
                      postalCode:
                        type: string
                      coordinate:
                        $ref: "#/components/schemas/coordinate"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal site identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/siteId"
              examples:
                sample:
                  value:
                  - 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /sites/state:
    get:
      summary: Simple statistics for sites
      security:
      - openId:
        - read:mni_site
      operationId: getSitesSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /sites/distance:
    post:
      summary: Using an ellipsoidal model of the earths surface returns the distance between two sites
      security:
      - openId:
        - read:mni_site
      operationId: distanceSites
      tags:
      - Sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - from
              - to
              properties:
                from:
                  $ref: "#/components/schemas/siteId"
                to:
                  $ref: "#/components/schemas/siteId"
            examples:
              sample:
                value:
                  from: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                  to: "0de00152-657a-43c8-92ba-245428a23d74"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance:
                    type: number
                  unit:
                    $ref: "#/components/schemas/sizeUnit"
                    default: "m"
              example:
                distance: 17.234567
                unit: "m"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /site:
    get:
      summary: List of all known sites
      security:
      - openId:
        - read:mni_site
      operationId: getAllSites
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/siteId"
              examples:
                sample:
                  value:
                  - 07bc9f28-cc27-4f3a-958b-dd8fd1034c2c
                  - 0de00152-657a-43c8-92ba-245428a23d74
                  - 582ad17e-d1cc-41f9-8277-09b2f7112d58
                  - 7060d226-d483-43c6-8432-4ed4de0fcd27
                  - bdf1c15a-c91f-472f-bde6-2b3ff212b051
                  - ffb9e869-a240-4a99-9f46-109802fb44e6
                  - 532dc221-d753-4799-815c-d7b9d36c59bc
                  - 43939c0a-fade-44d5-9eb3-4e50f9698d13
                  - 2e8c5466-4d0c-4193-91e0-605a45770833
                  - e883b5ce-fca6-474d-873a-7b7cdaef097e
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single Site
      security:
      - openId:
        - write:mni_site
      operationId: addSingleSite
      tags:
      - Sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - reference
              - commissioned
              - location
              properties:
                reference:
                  type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                onNet:
                  type: boolean
                  default: false
                area:
                  $ref: "#/components/schemas/areaType"
                  default: unclassified
                type:
                  $ref: "#/components/schemas/siteType"
                  default: unclassified
                location:
                  type: object
                  required:
                  - country
                  - region
                  - town
                  - street
                  - premisesNameNumber
                  - postalCode
                  - coordinate
                  properties:
                    country:
                      $ref: "#/components/schemas/countryCode"
                    region:
                      type: string
                    town:
                      type: string
                    district:
                      type: string
                    street:
                      type: string
                    premisesNameNumber:
                      type: string
                    postalCode:
                      type: string
                    coordinate:
                      $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              single:
                value:
                  reference: esp-zar-daro1
                  commissioned: "20241010"
                  onNet: true
                  area: commercial
                  type: exchange
                  location:
                    country: ESP
                    region: Zaragoza
                    town: Daroca
                    street: Avenue
                    premisesNameNumber: "32"
                    postalCode: "91234"
                    coordinate:
                      x: -112.26454
                      y: 36.09447
                      z: 2357
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  siteId:
                    $ref: "#/components/schemas/siteId"
              example:
                siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /site/offnet:
    get:
      summary: List of all known off-network (offNet) sites
      security:
      - openId:
        - read:mni_site
      operationId: getAllSitesOffNet
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    reference:
                      type: string
                    area:
                      $ref: "#/components/schemas/areaType"
                    type:
                      $ref: "#/components/schemas/siteType"
                    postalCode:
                      type: string
                    country:
                      $ref: "#/components/schemas/countryCode"
              examples:
                sample:
                  value:
                  - siteId: 01d6c476-16f8-4c86-9e5b-3caa733b217d
                    reference: "1 Elmley Lane, WR9 0PN"
                    area: rural
                    type: street
                    postalCode: "WR9 0PN"
                    country: GBR
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /site/onnet:
    get:
      summary: List of all known on-network (onNet) sites
      security:
      - openId:
        - read:mni_site
      operationId: getAllSitesOnNet
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    reference:
                      type: string
                    area:
                      $ref: "#/components/schemas/areaType"
                    type:
                      $ref: "#/components/schemas/siteType"
                    postalCode:
                      type: string
                    country:
                      $ref: "#/components/schemas/countryCode"
              examples:
                sample:
                  value:
                  - siteId: 07ebecfd-5341-4f02-88f8-4f5330398f69
                    reference: "bel-zel-m1"
                    area: urban
                    type: street
                    postalCode: "1731"
                    country: BEL
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /site/{siteId}:
    patch:
      summary: Update aspects of single site
      security:
      - openId:
        - write:mni_site
      operationId: updateSingleSite
      parameters:
      - $ref: "#/components/parameters/siteId"
      tags:
      - Sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                onNet:
                  type: boolean
                  default: false
                area:
                  $ref: "#/components/schemas/areaType"
                type:
                  $ref: "#/components/schemas/siteType"
                location:
                  type: object
                  properties:
                    country:
                      $ref: "#/components/schemas/countryCode"
                    region:
                      type: string
                    town:
                      type: string
                    district:
                      type: string
                    street:
                      type: string
                    premisesNameNumber:
                      type: string
                    postalCode:
                      type: string
                    coordinate:
                      $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              single:
                value:
                  reference: esp-zar-daro1
                  commissioned: "20241010"
                  decommissioned: "20250931"
                  onNet: true
                  area: commercial
                  type: exchange
                  location:
                    country: ESP
                    region: Zaragoza
                    town: Daroca
                    street: Avenue
                    premisesNameNumber: "32"
                    postalCode: "91232"
                    coordinate:
                      x: -112.26454
                      y: 36.09447
                      z: 2357
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  siteId:
                    $ref: "#/components/schemas/siteId"
              example:
                siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace single site
      security:
      - openId:
        - write:mni_site
      operationId: replaceSingleSite
      parameters:
      - $ref: "#/components/parameters/siteId"
      tags:
      - Sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - reference
              - commissioned
              - location
              properties:
                reference:
                  type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                onNet:
                  type: boolean
                  default: false
                area:
                  $ref: "#/components/schemas/areaType"
                type:
                  $ref: "#/components/schemas/siteType"
                location:
                  type: object
                  required:
                  - country
                  - town
                  - street
                  - premisesNameNumber
                  - postalCode
                  - coordinate
                  properties:
                    country:
                      $ref: "#/components/schemas/countryCode"
                    region:
                      type: string
                    town:
                      type: string
                    district:
                      type: string
                    street:
                      type: string
                    premisesNameNumber:
                      type: string
                    postalCode:
                      type: string
                    coordinate:
                      $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              single:
                value:
                  reference: esp-zar-daro1
                  commissioned: "20241010"
                  onNet: true
                  area: commercial
                  type: exchange
                  location:
                    country: ESP
                    region: Zaragoza
                    town: Daroca
                    street: Avenue
                    premisesNameNumber: "32"
                    postalCode: "91232"
                    coordinate:
                      x: -112.26454
                      y: 36.09447
                      z: 2357
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete specified Site
      security:
      - openId:
        - write:mni_site
      operationId: deleteSingleSite
      tags:
      - Sites
      parameters:
      - $ref: "#/components/parameters/siteId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified site
      security:
      - openId:
        - read:mni_site
      operationId: getSingleSite
      tags:
      - Sites
      parameters:
      - $ref: "#/components/parameters/siteId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  siteId:
                    $ref: "#/components/schemas/siteId"
                  reference:
                    type: string
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  onNet:
                    type: boolean
                    default: false
                  area:
                    $ref: "#/components/schemas/areaType"
                  type:
                    $ref: "#/components/schemas/siteType"
                  location:
                    type: object
                    properties:
                      country:
                        $ref: "#/components/schemas/countryCode"
                      region:
                        type: string
                      town:
                        type: string
                      district:
                        type: string
                      street:
                        type: string
                      premisesNameNumber:
                        type: string
                      postalCode:
                        type: string
                      coordinate:
                        $ref: "#/components/schemas/coordinate"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                single:
                  value:
                    siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                    reference: esp-zar-daro1
                    commissioned: "20241010"
                    onNet: true
                    area: commercial
                    type: exchange
                    location:
                      country: ESP
                      region: Zaragoza
                      town: Daroca
                      street: Avenue
                      premisesNameNumber: "32"
                      postalCode: "91234"
                      coordinate:
                        x: -112.26454
                        y: 36.09447
                        z: 2357
                    source: historical
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /site/timeline/{siteId}:
    get:
      summary: timeline points for specified site
      security:
      - openId:
        - read:mni_site
      operationId: getSiteTimeline
      parameters:
      - $ref: "#/components/parameters/siteId"
      tags:
      - Sites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /racks:
    get:
      summary: Export racks in bulk
      security:
      - openId:
        - read:mni_rack
      operationId: getMultipleRacks
      tags:
      - Racks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rackId:
                      $ref: "#/components/schemas/rackId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    reference:
                      type: string
                    commissioned:
                      $ref: "#/components/schemas/date"
                    decommissioned:
                      $ref: "#/components/schemas/date"
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    floor:
                      description: floor level, 0 is ground level
                      type: integer
                    area:
                      description: room or allocated area
                      type: string
                    row:
                      type: integer
                      minimum: 0
                    column:
                      type: integer
                      minimum: 0
                    coordinate:
                      $ref: "#/components/schemas/coordinate"
                    dimensions:
                      $ref: "#/components/schemas/dimensions"
                    slots:
                      $ref: "#/components/schemas/rackSlots"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import racks in bulk
      security:
      - openId:
        - write:mni_rack
      operationId: addMultipleRacks
      tags:
      - Racks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single rack definitions inside JSON array,
                *note*: existing racks (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - point
                - reference
                - commissioned
                - siteId
                - slots
                properties:
                  rackId:
                    description: optionally specify the internal rack identifier
                    $ref: "#/components/schemas/rackId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  reference:
                    type: string
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  siteId:
                    $ref: "#/components/schemas/siteId"
                  floor:
                    description: floor level, 0 is ground level
                    type: integer
                  area:
                    description: room or allocated area
                    type: string
                  row:
                    type: integer
                    minimum: 0
                  column:
                    type: integer
                    minimum: 0
                  coordinate:
                    $ref: "#/components/schemas/coordinate"
                  dimensions:
                    $ref: "#/components/schemas/dimensions"
                  slots:
                    $ref: "#/components/schemas/rackSlots"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal rack identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/rackId"
              examples:
                sample:
                  value:
                  - a84eed87-277f-46ac-9ee3-094c0d104f1f
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /racks/state:
    get:
      summary: Simple statistics for racks
      security:
      - openId:
        - read:mni_rack
      operationId: getRacksSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Racks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /rack:
    get:
      summary: List of all known racks
      security:
      - openId:
        - read:mni_rack
      operationId: getAllracks
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Racks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/rackId"
              examples:
                sample:
                  value:
                  - a84eed87-277f-46ac-9ee3-094c0d104f1f
                  - fc1409a5-ddde-48af-858c-bb3b1f06cb02
                  - c86c169c-0cca-4b55-a71c-81f2d0dac49b
                  - f7c45506-435d-449a-a334-b438f9a7bee7
                  - ccdc9a6e-0728-4073-9c33-892e294315be
                  - fb66a40c-d6a4-41eb-a93a-07e2835908e6
                  - 08678ce9-e188-4af7-bc39-a88af5b36b17
                  - 617a6fc7-b9a2-4792-8f23-9c0d0919f699
                  - fa3f37c9-b663-47ca-8add-82f068cd3688
                  - 98662042-c745-4fd0-af32-ecda683c5ca0
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single Rack
      security:
      - openId:
        - write:mni_rack
      operationId: addSingleRack
      tags:
      - Racks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - reference
              - commissioned
              - siteId
              - slots
              properties:
                reference:
                  type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                siteId:
                  $ref: "#/components/schemas/siteId"
                floor:
                  description: floor level, 0 is ground level
                  type: integer
                area:
                  description: room or allocated area
                  type: string
                row:
                  type: integer
                  minimum: 0
                column:
                  type: integer
                  minimum: 0
                coordinate:
                  $ref: "#/components/schemas/coordinate"
                dimensions:
                  $ref: "#/components/schemas/dimensions"
                slots:
                  $ref: "#/components/schemas/rackSlots"
                slotUsage:
                  description: slot usage is considered free unless indicated otherwise
                  type: array
                  items:
                    type: object
                    required:
                    - slot
                    - usage
                    properties:
                      slot:
                        $ref: "#/components/schemas/rackSlots"
                      usage:
                        $ref: "#/components/schemas/rackSlotUsage"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              single:
                value:
                  reference: esp-zar-f0-01
                  commissioned: "20241010"
                  siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  floor: 0
                  area: commercial
                  row: 1
                  column: 1
                  coordinate:
                    x: -112.26454
                    y: 36.09447
                    z: 2357
                  dimensions:
                    depth: 914.40
                    height: 2000
                    width: 600
                    unit: mm
                  slots: 42
                  slotUsage:
                  - slot: 1
                    usage: reserved
                  - slot: 2
                    usage: used
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rackId:
                    $ref: "#/components/schemas/rackId"
              examples:
                esp-zar-f0-01:
                  value:
                    rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /rack/{rackId}:
    patch:
      summary: Update aspects of single rack
      security:
      - openId:
        - write:mni_rack
      operationId: updateSingleRack
      parameters:
      - $ref: "#/components/parameters/rackId"
      tags:
      - Racks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                siteId:
                  $ref: "#/components/schemas/siteId"
                floor:
                  description: floor level, 0 is ground level
                  type: integer
                area:
                  description: room or allocated area
                  type: string
                row:
                  type: integer
                  minimum: 0
                column:
                  type: integer
                  minimum: 0
                coordinate:
                  $ref: "#/components/schemas/coordinate"
                dimensions:
                  $ref: "#/components/schemas/dimensions"
                slots:
                  $ref: "#/components/schemas/rackSlots"
                slotUsage:
                  description: slot usage is considered free unless indicated otherwise
                  type: array
                  items:
                    type: object
                    required:
                    - slot
                    - usage
                    properties:
                      slot:
                        $ref: "#/components/schemas/rackSlots"
                      usage:
                        $ref: "#/components/schemas/rackSlotUsage"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              single:
                value:
                  slotUsage:
                  - slot: 3
                    usage: used
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace single rack
      security:
      - openId:
        - write:mni_rack
      operationId: replaceSingleRack
      parameters:
      - $ref: "#/components/parameters/rackId"
      tags:
      - Racks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - reference
              - commissioned
              - siteId
              properties:
                reference:
                  type: string
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                siteId:
                  $ref: "#/components/schemas/siteId"
                floor:
                  description: floor level, 0 is ground level
                  type: integer
                area:
                  description: room or allocated area
                  type: string
                row:
                  type: integer
                  minimum: 0
                column:
                  type: integer
                  minimum: 0
                coordinate:
                  $ref: "#/components/schemas/coordinate"
                dimensions:
                  $ref: "#/components/schemas/dimensions"
                slots:
                  $ref: "#/components/schemas/rackSlots"
                slotUsage:
                  description: slot usage is considered free unless indicated otherwise
                  type: array
                  items:
                    type: object
                    required:
                    - slot
                    - usage
                    properties:
                      slot:
                        $ref: "#/components/schemas/rackSlots"
                      usage:
                        $ref: "#/components/schemas/rackSlotUsage"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              single:
                value:
                  reference: esp-zar-f0-01
                  commissioned: "20241010"
                  siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  floor: 0
                  area: commercial
                  row: 1
                  column: 1
                  coordinate:
                    x: -112.26454
                    y: 36.09447
                    z: 2357
                  dimensions:
                    depth: 914.40
                    height: 2000
                    width: 600
                    unit: mm
                  slots: 42
                  slotUsage:
                  - slot: 1
                    usage: reserved
                  - slot: 2
                    usage: used
                  - slot: 3
                    usage: used
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: delete specified rack
      security:
      - openId:
        - write:mni_rack
      operationId: deleteSingleRack
      tags:
      - Racks
      parameters:
      - $ref: "#/components/parameters/rackId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified rack
      security:
      - openId:
        - read:mni_rack
      operationId: getSingleRack
      tags:
      - Racks
      parameters:
      - $ref: "#/components/parameters/rackId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rackId:
                    $ref: "#/components/schemas/rackId"
                  reference:
                    type: string
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  siteId:
                    $ref: "#/components/schemas/siteId"
                  floor:
                    description: floor level, 0 is ground level
                    type: integer
                  area:
                    description: room or allocated area
                    type: string
                  row:
                    type: integer
                    minimum: 0
                  column:
                    type: integer
                    minimum: 0
                  coordinate:
                    $ref: "#/components/schemas/coordinate"
                  dimensions:
                    $ref: "#/components/schemas/dimensions"
                  slots:
                    $ref: "#/components/schemas/rackSlots"
                  slotUsage:
                    description: slot usage is considered free unless indicated otherwise
                    type: array
                    items:
                      type: object
                      required:
                      - slot
                      - usage
                      properties:
                        slot:
                          $ref: "#/components/schemas/rackSlots"
                        usage:
                          $ref: "#/components/schemas/rackSlotUsage"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                esp-zar-f0-01:
                  value:
                    rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
                    reference: esp-zar-f0-01
                    commissioned: "20241010"
                    siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                    floor: 0
                    area: commercial
                    row: 1
                    column: 1
                    coordinate:
                      x: -112.26454
                      y: 36.09447
                      z: 2357
                    dimensions:
                      depth: 914.40
                      height: 2000
                      width: 600
                      unit: mm
                    slots: 42
                    slotUsage:
                    - slot: 1
                      usage: reserved
                    - slot: 2
                      usage: used
                    - slot: 3
                      usage: used
                    - slot: 4
                      usage: free
                    - slot: 5
                      usage: free
                    - slot: 6
                      usage: free
                    - slot: 7
                      usage: free
                    - slot: 8
                      usage: free
                    - slot: 9
                      usage: free
                    - slot: 10
                      usage: free
                    - slot: 11
                      usage: free
                    - slot: 12
                      usage: free
                    - slot: 13
                      usage: free
                    - slot: 14
                      usage: free
                    - slot: 15
                      usage: free
                    - slot: 16
                      usage: free
                    - slot: 17
                      usage: free
                    - slot: 18
                      usage: free
                    - slot: 19
                      usage: free
                    - slot: 20
                      usage: free
                    - slot: 21
                      usage: free
                    - slot: 22
                      usage: free
                    - slot: 23
                      usage: free
                    - slot: 24
                      usage: free
                    - slot: 25
                      usage: free
                    - slot: 26
                      usage: free
                    - slot: 27
                      usage: free
                    - slot: 28
                      usage: free
                    - slot: 29
                      usage: free
                    - slot: 30
                      usage: free
                    - slot: 31
                      usage: free
                    - slot: 32
                      usage: free
                    - slot: 33
                      usage: free
                    - slot: 34
                      usage: free
                    - slot: 35
                      usage: free
                    - slot: 36
                      usage: free
                    - slot: 37
                      usage: free
                    - slot: 38
                      usage: free
                    - slot: 39
                      usage: free
                    - slot: 40
                      usage: free
                    - slot: 41
                      usage: free
                    - slot: 42
                      usage: free
                    source: historical
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /rack/slots/{rackId}:
    get:
      summary: slot usage for specified rack
      security:
      - openId:
        - read:mni_rack
      operationId: getSingleRackSlots
      parameters:
      - $ref: "#/components/parameters/rackId"
      tags:
      - Racks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    slot:
                      $ref: "#/components/schemas/rackSlots"
                    usage:
                      $ref: "#/components/schemas/rackSlotUsage"
              examples:
                sample:
                  value:
                  - slot: 1
                    usage: reserved
                  - slot: 2
                    usage: used
                  - slot: 3
                    usage: free
                  - slot: 4
                    usage: free
                  - slot: 5
                    usage: faulty
                  - slot: 6
                    usage: free
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /rack/slots/{rackId}/{slot}:
    get:
      summary: usage for specified rack slot
      security:
      - openId:
        - read:mni_rack
      operationId: getSingleRackSlotUsage
      parameters:
      - $ref: "#/components/parameters/rackId"
      - $ref: "#/components/parameters/rackSlot"
      tags:
      - Racks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: slot usage is considered free unless indicated otherwise
                type: object
                properties:
                  usage:
                    $ref: "#/components/schemas/rackSlotUsage"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /rack/timeline/{rackId}:
    get:
      summary: timeline points for specified rack
      security:
      - openId:
        - read:mni_rack
      operationId: getRackTimeline
      parameters:
      - $ref: "#/components/parameters/rackId"
      tags:
      - Racks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /nes:
    get:
      summary: Export network equipment in bulk
      security:
      - openId:
        - read:mni_ne
      operationId: getMultipleNe
      tags:
      - Network Equipment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    neId:
                      $ref: "#/components/schemas/neId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    host:
                      type: string
                      format: hostname
                    commissioned:
                      $ref: "#/components/schemas/date"
                    decommissioned:
                      $ref: "#/components/schemas/date"
                    siteId:
                      type: string
                      format: uuid
                    rackId:
                      type: string
                      format: uuid
                    slotPosition:
                      $ref: "#/components/schemas/rackSlotPosition"
                    mgmtIP:
                      type: string
                      description: |
                        - **IPv4 Address** - The quad notation of IPv4, also known as dotted quad or dotted decimal notation, is a way to write IP addresses as four groups of decimal numbers separated by periods. *Example: 192.0.2.146*
                        - **IPv6 Address** - The quad notation of an IPv6 address is the representation of an IPv6 address as four hexadecimal digits, or *hextets*, in each of eight groups separated by colons. *Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334*
                      format: ipv4 ipv6
                    vendor:
                      type: string
                    model:
                      type: string
                    image:
                      description: software firmware/image name
                      type: string
                    version:
                      description: software firmware/image version
                      type: string
                    config:
                      description: |
                        CLI, JSON or XML (NETCONF/YANG) configuration, *note*: is stored automatically in compressed format
                      type: string
                    ports:
                      type: array
                      minItems: 1
                      items:
                        type: object
                        properties:
                          name:
                            $ref: "#/components/schemas/portName"
                          technology:
                            $ref: "#/components/schemas/portTechnology"
                          configuration:
                            $ref: "#/components/schemas/portConfiguration"
                          state:
                            $ref: "#/components/schemas/portState"
                          connectsTo:
                            $ref: "#/components/schemas/portConnection"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
              examples:
                sample:
                  value:
                  - neId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                    point: 20240831T000000
                    host: esp-zar-daro-01
                    commissioned: "20241010"
                    siteId: a91550d8-8d19-4f79-b00f-73f6a29c1182
                    rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
                    slotPosition: "1,2"
                    mgmtIP: 10.23.72.4
                    vendor: Juniper
                    model: MX240
                    image: JUNOS Base OS Boot
                    version: 12.3R6.6
                    ports:
                    - name: ge-0/0/0
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/1
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/2
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/3
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/4
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/5
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/6
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-0/0/7
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-1/1/0
                      technology: ethernet
                      state: free
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-1/1/1
                      technology: ethernet
                      state: free
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-1/1/2
                      technology: ethernet
                      state: free
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-1/1/3
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-2/1/0
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-2/1/1
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-2/1/2
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    - name: ge-2/1/3
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                    source: historical
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import network equipment in bulk
      security:
      - openId:
        - write:mni_ne
      operationId: addMultipleNe
      tags:
      - Network Equipment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single network equipment definitions inside JSON array,
                *note*: existing NE (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - neId
                - point
                - host
                - commissioned
                - siteId
                - rackId
                - slotPosition
                - mgmtIP
                - vendor
                - model
                - image
                - version
                - ports
                properties:
                  neId:
                    description: optionally specify the internal network equipment identifier
                    $ref: "#/components/schemas/neId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  host:
                    type: string
                    format: hostname
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  siteId:
                    type: string
                    format: uuid
                  rackId:
                    type: string
                    format: uuid
                  slotPosition:
                    $ref: "#/components/schemas/rackSlotPosition"
                  mgmtIP:
                    type: string
                    description: |
                      - **IPv4 Address** - The quad notation of IPv4, also known as dotted quad or dotted decimal notation, is a way to write IP addresses as four groups of decimal numbers separated by periods. *Example: 192.0.2.146*
                      - **IPv6 Address** - The quad notation of an IPv6 address is the representation of an IPv6 address as four hexadecimal digits, or *hextets*, in each of eight groups separated by colons. *Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334*
                    format: ipv4 ipv6
                  vendor:
                    type: string
                  model:
                    type: string
                  image:
                    description: software firmware/image name
                    type: string
                  version:
                    description: software firmware/image version
                    type: string
                  config:
                    description: |
                      CLI, JSON or XML (NETCONF/YANG) configuration, *note*: is stored automatically in compressed format
                    type: string
                  ports:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                      - name
                      - technology
                      - configuration
                      - state
                      properties:
                        name:
                          $ref: "#/components/schemas/portName"
                        technology:
                          $ref: "#/components/schemas/portTechnology"
                        configuration:
                          $ref: "#/components/schemas/portConfiguration"
                        state:
                          $ref: "#/components/schemas/portState"
                        connectsTo:
                          $ref: "#/components/schemas/portConnection"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                - neId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  point: 20240831T000000
                  host: esp-zar-daro-01
                  commissioned: "20241010"
                  siteId: a91550d8-8d19-4f79-b00f-73f6a29c1182
                  rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
                  slotPosition: "1"
                  mgmtIP: 10.23.72.4
                  vendor: Juniper
                  model: MX240
                  image: JUNOS Base OS Boot
                  version: 12.3R6.6
                  ports:
                  - name: ge-0/0/0
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/1
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/2
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/3
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/4
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/5
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/6
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/7
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-1/1/0
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-1/1/1
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-1/1/2
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-1/1/3
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-2/1/0
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-2/1/1
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-2/1/2
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-2/1/3
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal network equipment identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/neId"
              examples:
                sample:
                  value:
                  - 86e420f1-137b-4e34-9ff7-18bd12743a10
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /nes/state:
    get:
      summary: Simple statistics for network equipment
      security:
      - openId:
        - read:mni_ne
      operationId: getNesSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Network Equipment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /nes/vendors:
    get:
      summary: Unique list of all known network vendors with model,image,version
      security:
      - openId:
        - read:mni_ne
      operationId: getAllNesVendors
      tags:
      - Network Equipment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    vendor:
                      type: string
                    model:
                      type: string
                    image:
                      description: software firmware/image name
                      type: string
                    version:
                      description: software firmware/image version
                      type: string
              examples:
                simple:
                  value:
                  - vendor: Cisco Systems
                    model: C8300-1N1S-4T2X
                    image: IOS-XE SD-WAN
                    version: 17.7.1a
                  - vendor: Juniper Networks
                    model: MX240
                    image: JUNOS Base OS Boot
                    version: 12.3R6.6
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ne:
    get:
      summary: List of all known network equipment
      security:
      - openId:
        - read:mni_ne
      operationId: getAllNe
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Network Equipment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/neId"
              examples:
                sample:
                  value:
                  - 86e420f1-137b-4e34-9ff7-18bd12743a10
                  - b43b07d6-a015-47a1-8108-fc686816c3b4
                  - 2a59a345-7568-4cb1-9bb9-6a4ebf889d38
                  - d131b1c9-9d8f-4813-8838-a8021b6d3e9f
                  - d14d2b4b-abcd-4e8f-a71e-b9885ee48865
                  - 4282053e-16c2-40c2-a6a8-15a7350c4f28
                  - 59630b2-6d46-4d9e-9dc5-5b14803d1655
                  - 6f3b3201-3630-4ca0-8949-2d9a3ae55e5f
                  - 295f6c2b-c057-4bfa-881c-eb021a357790
                  - e2b55a83-8e81-437f-a3e0-7842b35b498b
                  - 71e9cf2b-ec4b-4781-b31c-db0a26ba7da1
                  - b4fd1360-fa21-4e1e-82ea-8adb116586ca
                  - 66fe0cfd-4483-43a7-8fa0-1835d5bc3727
                  - ba03d195-e046-4b58-895f-95089a370d76
                  - a63f9d02-7ca8-43ea-b8c0-51c58720d4fb
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Add single network equipment
      security:
      - openId:
        - write:mni_ne
      operationId: addSingleNe
      tags:
      - Network Equipment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - host
              - commissioned
              - siteId
              - rackId
              - slotPosition
              - mgmtIP
              - vendor
              - model
              - image
              - version
              - ports
              properties:
                host:
                  type: string
                  format: hostname
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                siteId:
                  type: string
                  format: uuid
                rackId:
                  type: string
                  format: uuid
                slotPosition:
                  $ref: "#/components/schemas/rackSlotPosition"
                mgmtIP:
                  type: string
                  description: |
                    - **IPv4 Address** - The quad notation of IPv4, also known as dotted quad or dotted decimal notation, is a way to write IP addresses as four groups of decimal numbers separated by periods. *Example: 192.0.2.146*
                    - **IPv6 Address** - The quad notation of an IPv6 address is the representation of an IPv6 address as four hexadecimal digits, or *hextets*, in each of eight groups separated by colons. *Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334*
                  format: ipv4 ipv6
                vendor:
                  type: string
                model:
                  type: string
                image:
                  description: software firmware/image name
                  type: string
                version:
                  description: software firmware/image version
                  type: string
                config:
                  description: |
                    CLI, JSON or XML (NETCONF/YANG) configuration, *note*: is stored automatically in compressed format
                  type: string
                ports:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                    - name
                    - technology
                    - configuration
                    - state
                    properties:
                      name:
                        $ref: "#/components/schemas/portName"
                      technology:
                        $ref: "#/components/schemas/portTechnology"
                      configuration:
                        $ref: "#/components/schemas/portConfiguration"
                      state:
                        $ref: "#/components/schemas/portState"
                      connectsTo:
                        $ref: "#/components/schemas/portConnection"
                      errorCount:
                        description: number of errors reported on this port
                        type: integer
                        default: 0
                        minimum: 0
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  host: esp-zar-daro-01
                  commissioned: "20241010"
                  siteId: a91550d8-8d19-4f79-b00f-73f6a29c1182
                  rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
                  slotPosition: "2,3"
                  mgmtIP: 10.23.72.4
                  vendor: Juniper
                  model: MX240
                  image: JUNOS Base OS Boot
                  version: 12.3R6.6
                  ports:
                  - name: ge-0/0/0
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/1
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/2
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/3
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/4
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/5
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                  - name: ge-0/0/6
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/7
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/0
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/1
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/2
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/3
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/0
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/1
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/2
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/3
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  neId:
                    $ref: "#/components/schemas/neId"
              examples:
                service/drop:
                  value:
                    neId: 86e420f1-137b-4e34-9ff7-18bd12743a10
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ne/{neId}:
    delete:
      summary: delete specified network equipment
      security:
      - openId:
        - write:mni_ne
      operationId: deleteSingleNe
      tags:
      - Network Equipment
      parameters:
      - $ref: "#/components/parameters/neId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified network equipment
      security:
      - openId:
        - read:mni_ne
      operationId: getSingleNe
      tags:
      - Network Equipment
      parameters:
      - $ref: "#/components/parameters/neId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  neId:
                    $ref: "#/components/schemas/neId"
                  host:
                    type: string
                    format: hostname
                  commissioned:
                    $ref: "#/components/schemas/date"
                  decommissioned:
                    $ref: "#/components/schemas/date"
                  siteId:
                    type: string
                    format: uuid
                  rackId:
                    type: string
                    format: uuid
                  slotPosition:
                    $ref: "#/components/schemas/rackSlotPosition"
                  mgmtIP:
                    type: string
                    description: |
                      - **IPv4 Address** - The quad notation of IPv4, also known as dotted quad or dotted decimal notation, is a way to write IP addresses as four groups of decimal numbers separated by periods. *Example: 192.0.2.146*
                      - **IPv6 Address** - The quad notation of an IPv6 address is the representation of an IPv6 address as four hexadecimal digits, or *hextets*, in each of eight groups separated by colons. *Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334*
                    format: ipv4 ipv6
                  vendor:
                    type: string
                  model:
                    type: string
                  image:
                    description: software firmware/image name
                    type: string
                  version:
                    description: software firmware/image version
                    type: string
                  config:
                    description: |
                      CLI, JSON or XML (NETCONF/YANG) configuration, *note*: is stored automatically in compressed format
                    type: string
                  ports:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                      - name
                      - technology
                      - configuration
                      - state
                      - errorCount
                      properties:
                        name:
                          $ref: "#/components/schemas/portName"
                        technology:
                          $ref: "#/components/schemas/portTechnology"
                        configuration:
                          $ref: "#/components/schemas/portConfiguration"
                        state:
                          $ref: "#/components/schemas/portState"
                        connectsTo:
                          $ref: "#/components/schemas/portConnection"
                        errorCount:
                          description: number of errors reported on this port
                          type: integer
                          default: 0
                          minimum: 0
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                single:
                  value:
                    neId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                    host: esp-zar-daro-01
                    commissioned: "20241010"
                    siteId: a91550d8-8d19-4f79-b00f-73f6a29c1182
                    rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
                    slotPosition: "1"
                    mgmtIP: 10.23.72.4
                    vendor: Juniper
                    model: MX240
                    image: JUNOS Base OS Boot
                    version: 12.3R6.6
                    ports:
                    - name: ge-0/0/0
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/1
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/2
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/3
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/4
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/5
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/6
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-0/0/7
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-1/1/0
                      technology: ethernet
                      state: free
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-1/1/1
                      technology: ethernet
                      state: free
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-1/1/2
                      technology: ethernet
                      state: free
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-1/1/3
                      technology: ethernet
                      state: used
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-2/1/0
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-2/1/1
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-2/1/2
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    - name: ge-2/1/3
                      technology: ethernet
                      state: reserved
                      configuration:
                        category: Cat6A
                        rate: 10
                        unit: Gbps
                      errorCount: 0
                    source: historical
                    delete: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace entire network equipment
      security:
      - openId:
        - write:mni_ne
      operationId: replaceSingleNe
      tags:
      - Network Equipment
      parameters:
      - $ref: "#/components/parameters/neId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - host
              - commissioned
              - siteId
              - rackId
              - slotPosition
              - mgmtIP
              - vendor
              - model
              - image
              - version
              - ports
              properties:
                host:
                  type: string
                  format: hostname
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                siteId:
                  type: string
                  format: uuid
                rackId:
                  type: string
                  format: uuid
                slotPosition:
                  $ref: "#/components/schemas/rackSlotPosition"
                mgmtIP:
                  type: string
                  description: |
                    - **IPv4 Address** - The quad notation of IPv4, also known as dotted quad or dotted decimal notation, is a way to write IP addresses as four groups of decimal numbers separated by periods. *Example: 192.0.2.146*
                    - **IPv6 Address** - The quad notation of an IPv6 address is the representation of an IPv6 address as four hexadecimal digits, or *hextets*, in each of eight groups separated by colons. *Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334*
                  format: ipv4 ipv6
                vendor:
                  type: string
                model:
                  type: string
                image:
                  description: software firmware/image name
                  type: string
                version:
                  description: software firmware/image version
                  type: string
                config:
                  description: |
                    CLI, JSON or XML (NETCONF/YANG) configuration, *note*: is stored automatically in compressed format
                  type: string
                ports:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/portName"
                      technology:
                        $ref: "#/components/schemas/portTechnology"
                      configuration:
                        $ref: "#/components/schemas/portConfiguration"
                      state:
                        $ref: "#/components/schemas/portState"
                      connectsTo:
                        $ref: "#/components/schemas/portConnection"
                      errorCount:
                        description: number of errors reported on this port
                        type: integer
                        default: 0
                        minimum: 0
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  host: esp-zar-daro-01
                  commissioned: "20241010"
                  siteId: a91550d8-8d19-4f79-b00f-73f6a29c1182
                  rackId: a84eed87-277f-46ac-9ee3-094c0d104f1f
                  slotPosition: "2,3"
                  mgmtIP: 10.23.72.4
                  vendor: Juniper
                  model: MX240
                  image: JUNOS Base OS Boot
                  version: 12.3R6.6
                  ports:
                  - name: ge-0/0/0
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/1
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/2
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/3
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/4
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/5
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/6
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-0/0/7
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/0
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/1
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/2
                    technology: ethernet
                    state: free
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-1/1/3
                    technology: ethernet
                    state: used
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/0
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/1
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/2
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  - name: ge-2/1/3
                    technology: ethernet
                    state: reserved
                    configuration:
                      category: Cat6A
                      rate: 10
                      unit: Gbps
                    errorCount: 0
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update aspects of a single network equipment
      security:
      - openId:
        - write:mni_ne
      operationId: updateSingleNe
      tags:
      - Network Equipment
      parameters:
      - $ref: "#/components/parameters/neId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                host:
                  type: string
                  format: hostname
                commissioned:
                  $ref: "#/components/schemas/date"
                decommissioned:
                  $ref: "#/components/schemas/date"
                siteId:
                  type: string
                  format: uuid
                rackId:
                  type: string
                  format: uuid
                slotPosition:
                  $ref: "#/components/schemas/rackSlotPosition"
                mgmtIP:
                  type: string
                  description: |
                    - **IPv4 Address** - The quad notation of IPv4, also known as dotted quad or dotted decimal notation, is a way to write IP addresses as four groups of decimal numbers separated by periods. *Example: 192.0.2.146*
                    - **IPv6 Address** - The quad notation of an IPv6 address is the representation of an IPv6 address as four hexadecimal digits, or *hextets*, in each of eight groups separated by colons. *Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334*
                  format: ipv4 ipv6
                vendor:
                  type: string
                model:
                  type: string
                image:
                  description: software firmware/image name
                  type: string
                version:
                  description: software firmware/image version
                  type: string
                config:
                  description: |
                    CLI, JSON or XML (NETCONF/YANG) configuration, *note*: is stored automatically in compressed format
                  type: string
                ports:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/portName"
                      technology:
                        $ref: "#/components/schemas/portTechnology"
                      configuration:
                        $ref: "#/components/schemas/portConfiguration"
                      state:
                        $ref: "#/components/schemas/portState"
                      connectsTo:
                        $ref: "#/components/schemas/portConnection"
                      errorCount:
                        description: number of errors reported on this port
                        type: integer
                        default: 0
                        minimum: 0
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              sample:
                value:
                  version: 12.3R6.8
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /ne/timeline/{neId}:
    get:
      summary: timeline points for specified network equipment
      security:
      - openId:
        - read:mni_ne
      operationId: getNeTimeline
      parameters:
      - $ref: "#/components/parameters/neId"
      tags:
      - Network Equipment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /poles:
    get:
      summary: Export poles in bulk
      security:
      - openId:
        - read:mni_pole
      operationId: getMultiplePoles
      tags:
      - Poles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    poleId:
                      $ref: "#/components/schemas/poleId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    purpose:
                      $ref: "#/components/schemas/polePurpose"
                    construction:
                      type: object
                      properties:
                        height:
                          type: number
                        classifier:
                          $ref: "#/components/schemas/heightClassifier"
                          default: unclassified
                        unit:
                          $ref: "#/components/schemas/sizeUnit"
                    demographics:
                      type: object
                      required:
                      - premises
                      properties:
                        premises:
                          type: object
                          properties:
                            passed:
                              type: integer
                              default: 0
                              minimum: 0
                            area:
                              $ref: "#/components/schemas/areaType"
                              default: unclassified
                    build:
                      type: object
                      properties:
                        jobId:
                          type: string
                        permitId:
                          type: string
                        planned:
                          type: object
                          properties:
                            start:
                              $ref: "#/components/schemas/date"
                            completion:
                              $ref: "#/components/schemas/date"
                            duration:
                              type: integer
                              minimum: 0
                            unit:
                              $ref: "#/components/schemas/durationUnit"
                        actual:
                          type: object
                          properties:
                            start:
                              $ref: "#/components/schemas/date"
                            completion:
                              $ref: "#/components/schemas/date"
                            duration:
                              type: integer
                              minimum: 0
                            unit:
                              $ref: "#/components/schemas/durationUnit"
                    state:
                      $ref: "#/components/schemas/poleState"
                      default: free
                    connectsTo:
                      description: optional site, trench or pole link connection
                      properties:
                        siteId:
                          $ref: "#/components/schemas/siteId"
                        trenchId:
                          $ref: "#/components/schemas/trenchId"
                        poleId:
                          $ref: "#/components/schemas/poleId"
                    coordinate:
                      $ref: "#/components/schemas/coordinate"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import poles in bulk
      security:
      - openId:
        - write:mni_pole
      operationId: addMultiplePoles
      tags:
      - Poles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single pole definitions inside JSON array,
                *note*: existing poles (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - point
                - purpose
                - construction
                - demographics
                - build
                - coordinate
                properties:
                  poleId:
                    description: optionally specify the internal pole identifier
                    $ref: "#/components/schemas/poleId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  purpose:
                    $ref: "#/components/schemas/polePurpose"
                  construction:
                    type: object
                    required:
                    - height
                    - classifier
                    - unit
                    properties:
                      height:
                        type: number
                      classifier:
                        $ref: "#/components/schemas/heightClassifier"
                        default: unclassified
                      unit:
                        $ref: "#/components/schemas/sizeUnit"
                  demographics:
                    type: object
                    required:
                    - premises
                    properties:
                      premises:
                        type: object
                        required:
                        - passed
                        - area
                        properties:
                          passed:
                            type: integer
                            default: 0
                            minimum: 0
                          area:
                            $ref: "#/components/schemas/areaType"
                            default: unclassified
                  build:
                    type: object
                    required:
                    - jobId
                    - permitId
                    - planned
                    properties:
                      jobId:
                        type: string
                      permitId:
                        type: string
                      planned:
                        type: object
                        required:
                        - start
                        - completion
                        - duration
                        - unit
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                      actual:
                        type: object
                        required:
                        - start
                        - completion
                        - duration
                        - unit
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                  state:
                    $ref: "#/components/schemas/poleState"
                    default: free
                  connectsTo:
                    description: optional site, trench or pole link connection
                    properties:
                      siteId:
                        $ref: "#/components/schemas/siteId"
                      trenchId:
                        $ref: "#/components/schemas/trenchId"
                      poleId:
                        $ref: "#/components/schemas/poleId"
                  coordinate:
                    $ref: "#/components/schemas/coordinate"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal pole identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/poleId"
              examples:
                sample:
                  value:
                  - a9e616ed-1b61-453f-b8f3-95f0449043a8
                  - 1e78228c-a6dd-4eed-80c8-bab65c6bcb37
                  - e5f15575-d857-440b-b7a1-8e1b3cb04499
                  - ad1577d0-75aa-41b0-b7b4-c5616e6a216a
                  - f3f27251-c695-4242-861e-582aa2839622
                  - d18b2455-6eee-4cf9-b6e1-6024ab243be3
                  - c43e5fd0-f7cb-4eda-bbcf-e891bc5fddb2
                  - 307dc651-eb97-4718-9533-516e34534bfd
                  - b14a3f1f-2124-4590-8885-9f9df8722809
                  - 51c1854f-e808-4b5a-9f21-a8c715420a90
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /poles/state:
    get:
      summary: Simple statistics for poles
      security:
      - openId:
        - read:mni_pole
      operationId: getPolesSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Poles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /poles/capacity/state:
    get:
      summary: State capacity for poles
      security:
      - openId:
        - read:mni_pole
      operationId: getPolesCapacityState
      parameters:
      - $ref: "#/components/parameters/dateFrom"
      - $ref: "#/components/parameters/dateTo"
      - $ref: "#/components/parameters/dateBefore"
      - $ref: "#/components/parameters/dateAfter"
      - $ref: "#/components/parameters/aggregationUnit"
      tags:
      - Poles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  by:
                    $ref: "#/components/schemas/aggregationUnit"
                  pole:
                    type: array
                    items:
                      type: object
                      properties:
                        poleId:
                          $ref: "#/components/schemas/poleId"
                        connectsTo:
                          description: optional site, trench or pole link connection
                          properties:
                            siteId:
                              $ref: "#/components/schemas/siteId"
                            trenchId:
                              $ref: "#/components/schemas/trenchId"
                            poleId:
                              $ref: "#/components/schemas/poleId"
                        capacity:
                          type: array
                          items:
                            type: object
                            properties:
                              period:
                                $ref: "#/components/schemas/datePeriod"
                              state:
                                $ref: "#/components/schemas/poleState"
              examples:
                sample:
                  value:
                    by: "month"
                    pole:
                    - poleId: a9e616ed-1b61-453f-b8f3-95f0449043a8
                      capacity:
                      - period: "202406"
                        state: "free"
                      - period: "202407"
                        state: "free"
                      - period: "202408"
                        state: "used"
                      - period: "202409"
                        state: "used"
                      - period: "202403"
                        state: "used"
                      - period: "202411"
                        state: "used"
                      - period: "202412"
                        state: "used"
                      - period: "202501"
                        state: "used"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /pole:
    post:
      summary: Add single pole
      security:
      - openId:
        - write:mni_pole
      operationId: addSinglePole
      tags:
      - Poles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - construction
              - demographics
              - build
              - coordinate
              properties:
                purpose:
                  $ref: "#/components/schemas/polePurpose"
                construction:
                  type: object
                  required:
                  - height
                  - classifier
                  - unit
                  properties:
                    height:
                      type: number
                    classifier:
                      $ref: "#/components/schemas/heightClassifier"
                      default: unclassified
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                demographics:
                  type: object
                  required:
                  - premises
                  properties:
                    premises:
                      type: object
                      required:
                      - passed
                      - area
                      properties:
                        passed:
                          type: integer
                          default: 0
                          minimum: 0
                        area:
                          $ref: "#/components/schemas/areaType"
                          default: unclassified
                build:
                  type: object
                  required:
                  - jobId
                  - permitId
                  - planned
                  properties:
                    jobId:
                      type: string
                    permitId:
                      type: string
                    planned:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                    actual:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                state:
                  $ref: "#/components/schemas/poleState"
                  default: free
                connectsTo:
                  type: object
                  description: optional site, trench or pole link connection
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                coordinate:
                  $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              backhaul:
                value:
                  purpose: backhaul
                  construction:
                    height: 15
                    unit: m
                    classifier: rural
                  demographics:
                    premises:
                      passed: 16
                      area: rural
                  build:
                    jobId: "2136"
                    permitId: RB2020/7833
                    planned:
                      start: "20240305"
                      completion: "20240831"
                      duration: 60
                      unit: day
                    actual:
                      start: "20240305"
                      completion: "20240831"
                      duration: 60
                      unit: day
                  state: free
                  connectsTo:
                    siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  coordinate:
                    x: -112.26454
                    y: 36.09447
                    z: 2357
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  poleId:
                    $ref: "#/components/schemas/poleId"
              examples:
                service/drop:
                  value:
                    poleId: a9e616ed-1b61-453f-b8f3-95f0449043a8
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: List of all known poles
      security:
      - openId:
        - read:mni_pole
      operationId: getAllPole
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Poles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/poleId"
              examples:
                sample:
                  value:
                  - a9e616ed-1b61-453f-b8f3-95f0449043a8
                  - 1e78228c-a6dd-4eed-80c8-bab65c6bcb37
                  - e5f15575-d857-440b-b7a1-8e1b3cb04499
                  - ad1577d0-75aa-41b0-b7b4-c5616e6a216a
                  - f3f27251-c695-4242-861e-582aa2839622
                  - d18b2455-6eee-4cf9-b6e1-6024ab243be3
                  - c43e5fd0-f7cb-4eda-bbcf-e891bc5fddb2
                  - 307dc651-eb97-4718-9533-516e34534bfd
                  - b14a3f1f-2124-4590-8885-9f9df8722809
                  - 51c1854f-e808-4b5a-9f21-a8c715420a90
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /pole/{poleId}:
    delete:
      summary: delete single pole
      security:
      - openId:
        - write:mni_pole
      operationId: deleteSinglePole
      tags:
      - Poles
      parameters:
      - $ref: "#/components/parameters/poleId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace entire single pole
      security:
      - openId:
        - write:mni_pole
      operationId: replaceSinglePole
      tags:
      - Poles
      parameters:
      - $ref: "#/components/parameters/poleId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - construction
              - demographics
              - build
              - coordinate
              properties:
                purpose:
                  $ref: "#/components/schemas/polePurpose"
                construction:
                  type: object
                  required:
                  - height
                  - classifier
                  - unit
                  properties:
                    height:
                      type: number
                    classifier:
                      $ref: "#/components/schemas/heightClassifier"
                      default: unclassified
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                demographics:
                  type: object
                  required:
                  - premises
                  properties:
                    premises:
                      type: object
                      required:
                      - passed
                      - area
                      properties:
                        passed:
                          type: integer
                          default: 0
                          minimum: 0
                        area:
                          $ref: "#/components/schemas/areaType"
                          default: unclassified
                build:
                  type: object
                  required:
                  - jobId
                  - permitId
                  - planned
                  properties:
                    jobId:
                      type: string
                    permitId:
                      type: string
                    planned:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                    actual:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                state:
                  $ref: "#/components/schemas/poleState"
                  default: free
                connectsTo:
                  type: object
                  description: optional site, trench or pole link connection
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                coordinate:
                  $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              backhaul:
                value:
                  purpose: backhaul
                  construction:
                    height: 15
                    unit: m
                    classifier: rural
                  demographics:
                    premises:
                      passed: 16
                      area: rural
                  build:
                    jobId: "2136"
                    permitId: RB2020/7833
                    planned:
                      start: "20240305"
                      completion: "20240831"
                      duration: 60
                      unit: day
                    actual:
                      start: "20240305"
                      completion: "20240831"
                      duration: 60
                      unit: day
                  state: free
                  connectsTo:
                    siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  coordinate:
                    x: -112.26454
                    y: 36.09447
                    z: 2357
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update aspects of a single pole
      security:
      - openId:
        - write:mni_pole
      operationId: updateSinglePole
      tags:
      - Poles
      parameters:
      - $ref: "#/components/parameters/poleId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                purpose:
                  $ref: "#/components/schemas/polePurpose"
                construction:
                  type: object
                  properties:
                    height:
                      type: number
                    classifier:
                      $ref: "#/components/schemas/heightClassifier"
                      default: unclassified
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                demographics:
                  type: object
                  properties:
                    premises:
                      type: object
                      properties:
                        passed:
                          type: integer
                          default: 0
                          minimum: 0
                        area:
                          $ref: "#/components/schemas/areaType"
                          default: unclassified
                build:
                  type: object
                  properties:
                    jobId:
                      type: string
                    permitId:
                      type: string
                    planned:
                      type: object
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                    actual:
                      type: object
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                state:
                  $ref: "#/components/schemas/poleState"
                connectsTo:
                  description: optional site, trench or pole link connection
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                coordinate:
                  $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              backhaul:
                value:
                  coordinate:
                    x: -112.26454
                    y: 36.09447
                    z: 2357
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified pole
      security:
      - openId:
        - read:mni_pole
      operationId: getSinglePole
      tags:
      - Poles
      parameters:
      - $ref: "#/components/parameters/poleId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  poleId:
                    $ref: "#/components/schemas/neId"
                  purpose:
                    $ref: "#/components/schemas/polePurpose"
                  construction:
                    type: object
                    properties:
                      height:
                        type: number
                      heightClassifier:
                        $ref: "#/components/schemas/heightClassifier"
                        defalt: unclassified
                      unit:
                        $ref: "#/components/schemas/sizeUnit"
                  demographics:
                    type: object
                    properties:
                      premises:
                        type: object
                        properties:
                          passed:
                            type: integer
                            default: 0
                            minimum: 0
                          area:
                            $ref: "#/components/schemas/areaType"
                            default: unclassified
                  build:
                    type: object
                    properties:
                      jobId:
                        type: string
                      permitId:
                        type: string
                      planned:
                        type: object
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                      actual:
                        type: object
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                  state:
                    $ref: "#/components/schemas/poleState"
                  connectsTo:
                    type: object
                    description: optional site, trench or pole link connection
                    properties:
                      siteId:
                        $ref: "#/components/schemas/siteId"
                      trenchId:
                        $ref: "#/components/schemas/trenchId"
                      poleId:
                        $ref: "#/components/schemas/poleId"
                  coordinate:
                    $ref: "#/components/schemas/coordinate"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                backhaul:
                  value:
                    poleId: a9e616ed-1b61-453f-b8f3-95f0449043a8
                    purpose: backhaul
                    construction:
                      height: 15
                      unit: m
                    demographics:
                      premises:
                        passed: 16
                        area: rural
                    build:
                      jobId: "2136"
                      permitId: RB2020/7833
                      planned:
                        start: "20240305"
                        completion: "20240831"
                        duration: 60
                        unit: day
                    state: free
                    connectsTo:
                      siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                    coordinate:
                      x: -112.26454
                      y: 36.09447
                      z: 2357
                    source: historical
                    delete: false
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /pole/timeline/{poleId}:
    get:
      summary: timeline points for specified pole
      security:
      - openId:
        - read:mni_pole
      operationId: getPoleTimeline
      parameters:
      - $ref: "#/components/parameters/poleId"
      tags:
      - Poles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trenches:
    get:
      summary: Export trenches in bulk
      security:
      - openId:
        - read:mni_trench
      operationId: getMultipleTrenches
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    point:
                      $ref: "#/components/schemas/dateTime"
                    reference:
                      type: string
                    purpose:
                      $ref: "#/components/schemas/trenchPurpose"
                    construction:
                      type: object
                      properties:
                        depth:
                          type: number
                        classifier:
                          $ref: "#/components/schemas/depthClassifier"
                        unit:
                          $ref: "#/components/schemas/sizeUnit"
                        type:
                          $ref: "#/components/schemas/constructionType"
                    demographics:
                      type: object
                      required:
                      - premises
                      properties:
                        premises:
                          type: object
                          properties:
                            passed:
                              type: integer
                              default: 0
                              minimum: 0
                            area:
                              $ref: "#/components/schemas/areaType"
                              default: unclassified
                    build:
                      type: object
                      properties:
                        jobId:
                          type: string
                        permitId:
                          type: string
                        planned:
                          type: object
                          properties:
                            start:
                              $ref: "#/components/schemas/date"
                            completion:
                              $ref: "#/components/schemas/date"
                            duration:
                              type: integer
                              minimum: 0
                            unit:
                              $ref: "#/components/schemas/durationUnit"
                        actual:
                          type: object
                          properties:
                            start:
                              $ref: "#/components/schemas/date"
                            completion:
                              $ref: "#/components/schemas/date"
                            duration:
                              type: integer
                              minimum: 0
                            unit:
                              $ref: "#/components/schemas/durationUnit"
                    state:
                      $ref: "#/components/schemas/trenchState"
                      default: free
                    connectsTo:
                      description: optional site, trench or pole link connection
                      properties:
                        siteId:
                          $ref: "#/components/schemas/siteId"
                        trenchId:
                          $ref: "#/components/schemas/trenchId"
                        poleId:
                          $ref: "#/components/schemas/poleId"
                    coordinates:
                      type: array
                      minItems: 1
                      items:
                        $ref: "#/components/schemas/coordinate"
                    source:
                      $ref: "#/components/schemas/source"
                    delete:
                      $ref: "#/components/schemas/delete"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import trenches in bulk
      security:
      - openId:
        - write:mni_trench
      operationId: addMultipleTrench
      tags:
      - Trenches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: |
                multiple single trench definitions inside JSON array,
                *note*: existing trenches (with same identifier) will be replaced
              minItems: 1
              items:
                type: object
                required:
                - point
                - reference
                - purpose
                - construction
                - demographics
                - build
                - coordinates
                properties:
                  trenchId:
                    description: optionally specify the internal trench identifier
                    $ref: "#/components/schemas/trenchId"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  purpose:
                    $ref: "#/components/schemas/trenchPurpose"
                  reference:
                    type: string
                  construction:
                    type: object
                    required:
                    - depth
                    - classifier
                    - unit
                    - type
                    properties:
                      depth:
                        type: number
                      classifier:
                        $ref: "#/components/schemas/depthClassifier"
                      unit:
                        $ref: "#/components/schemas/sizeUnit"
                      type:
                        $ref: "#/components/schemas/constructionType"
                  demographics:
                    type: object
                    required:
                    - premises
                    properties:
                      premises:
                        type: object
                        required:
                        - passed
                        - area
                        properties:
                          passed:
                            type: integer
                            default: 0
                            minimum: 0
                          area:
                            $ref: "#/components/schemas/areaType"
                            default: unclassified
                  build:
                    type: object
                    required:
                    - jobId
                    - permitId
                    - planned
                    properties:
                      jobId:
                        type: string
                      permitId:
                        type: string
                      planned:
                        type: object
                        required:
                        - start
                        - completion
                        - duration
                        - unit
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                      actual:
                        type: object
                        required:
                        - start
                        - completion
                        - duration
                        - unit
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                  state:
                    $ref: "#/components/schemas/trenchState"
                    default: free
                  connectsTo:
                    description: optional site, trench or pole link connection
                    properties:
                      siteId:
                        $ref: "#/components/schemas/siteId"
                      trenchId:
                        $ref: "#/components/schemas/trenchId"
                      poleId:
                        $ref: "#/components/schemas/poleId"
                  coordinates:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/coordinate"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal trench identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/trenchId"
              examples:
                sample:
                  value:
                  - 38b6c897-9982-4426-b9e3-c603e7e2cb5d
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trenches/state:
    get:
      summary: Simple statistics for trenches
      security:
      - openId:
        - read:mni_trench
      operationId: geTrenchesSimpleStatistics
      parameters:
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    minimum: 0
                  active:
                    type: integer
                    minimum: 0
                  inactive:
                    type: integer
                    minimum: 0
              examples:
                simple:
                  value:
                    total: 123
                    active: 91
                    inactive: 32
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench:
    post:
      summary: Add single trench
      security:
      - openId:
        - write:mni_trench
      operationId: addSingleTrench
      tags:
      - Trenches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - reference
              - construction
              - demographics
              - build
              - coordinates
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                reference:
                  type: string
                construction:
                  type: object
                  required:
                  - depth
                  - classifier
                  - unit
                  - type
                  properties:
                    depth:
                      type: number
                    classifier:
                      $ref: "#/components/schemas/depthClassifier"
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                    type:
                      $ref: "#/components/schemas/constructionType"
                demographics:
                  type: object
                  required:
                  - premises
                  properties:
                    premises:
                      type: object
                      required:
                      - passed
                      - area
                      properties:
                        passed:
                          type: integer
                          default: 0
                          minimum: 0
                        area:
                          $ref: "#/components/schemas/areaType"
                          default: unclassified
                build:
                  type: object
                  required:
                  - jobId
                  - permitId
                  - planned
                  properties:
                    jobId:
                      type: string
                    permitId:
                      type: string
                    planned:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                    actual:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                state:
                  $ref: "#/components/schemas/trenchState"
                  default: free
                connectsTo:
                  type: object
                  description: optional site, trench or pole link connection
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                coordinates:
                  type: array
                  minItems: 1
                  items:
                    $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              service/drop:
                value:
                  purpose: service/drop
                  reference: gbr-worc-cg-south
                  construction:
                    depth: 0.5
                    classifier: low
                    unit: m
                    type: micro
                  demographics:
                    premises:
                      passed: 4
                      area: residential
                  build:
                    jobId: "2148"
                    permitId: RB2021/1492
                    planned:
                      start: "20241005"
                      completion: "20241008"
                      duration: 3
                      unit: day
                    actual:
                      start: "20241005"
                      completion: "20241008"
                      duration: 3
                      unit: day
                  state: free
                  connectsTo:
                    siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  coordinates:
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09448
                    z: 2357
                  - x: -112.26454
                    y: 36.09448
                    z: 2357
                  source: historical
                  delete: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  trenchId:
                    $ref: "#/components/schemas/trenchId"
              examples:
                service/drop:
                  value:
                    trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: List of all known trenches
      security:
      - openId:
        - read:mni_trench
      operationId: getAllTrench
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/trenchId"
              examples:
                sample:
                  value:
                  - 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                  - 30f8afcd-f95d-4686-a7cf-7543911e3916
                  - b091c215-68a4-4d53-bed0-fb70bf808ea3
                  - 6722383f-2dff-439a-8831-59fb491f143d
                  - e276c320-df70-420d-841e-8cf9c7f0d731
                  - 1256dc14-6935-4848-9872-2d97abd777bf
                  - 791b0ccb-308b-44b9-ba9c-2f92b26015ac
                  - 68558a89-5b37-4c90-910d-876e1fffc19f
                  - 96f4b334-1647-48e6-99ec-4135247c3210
                  - 9bcd04c1-a307-4518-81ae-8c51a2e6bb5a
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench/{trenchId}:
    delete:
      summary: delete single trench
      security:
      - openId:
        - write:mni_trench
      operationId: deleteSingleTrench
      tags:
      - Trenches
      parameters:
      - $ref: "#/components/parameters/trenchId"
      - $ref: "#/components/parameters/deletePredictedOnly"
      - $ref: "#/components/parameters/undeleteHistorical"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace entire single trench
      security:
      - openId:
        - write:mni_trench
      operationId: replaceSingleTrench
      tags:
      - Trenches
      parameters:
      - $ref: "#/components/parameters/trenchId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - reference
              - construction
              - demographics
              - build
              - coordinates
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                reference:
                  type: string
                construction:
                  type: object
                  required:
                  - depth
                  - classifier
                  - unit
                  - type
                  properties:
                    depth:
                      type: number
                    classifier:
                      $ref: "#/components/schemas/depthClassifier"
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                    type:
                      $ref: "#/components/schemas/constructionType"
                demographics:
                  type: object
                  required:
                  - premises
                  properties:
                    premises:
                      type: object
                      required:
                      - passed
                      - area
                      properties:
                        passed:
                          type: integer
                          default: 0
                          minimum: 0
                        area:
                          $ref: "#/components/schemas/areaType"
                          default: unclassified
                build:
                  type: object
                  required:
                  - jobId
                  - permitId
                  - planned
                  properties:
                    jobId:
                      type: string
                    permitId:
                      type: string
                    planned:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                    actual:
                      type: object
                      required:
                      - start
                      - completion
                      - duration
                      - unit
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                state:
                  $ref: "#/components/schemas/trenchState"
                  default: free
                connectsTo:
                  type: object
                  description: optional site, trench or pole link connection
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                coordinates:
                  type: array
                  minItems: 1
                  items:
                    $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              service/drop:
                value:
                  purpose: service/drop
                  reference: gbr-worc-cg-south
                  construction:
                    depth: 0.5
                    classifier: low
                    unit: m
                    type: micro
                  demographics:
                    premises:
                      passed: 4
                      area: residential
                  build:
                    jobId: "2148"
                    permitId: RB2021/1492
                    planned:
                      start: "20241005"
                      completion: "20241008"
                      duration: 3
                      unit: day
                    actual:
                      start: "20241005"
                      completion: "20241008"
                      duration: 3
                      unit: day
                  state: free
                  connectsTo:
                    siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                  coordinates:
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09448
                    z: 2357
                  - x: -112.26454
                    y: 36.09448
                    z: 2357
                  source: historical
                  delete: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update aspects of a single trench
      security:
      - openId:
        - write:mni_trench
      operationId: updateSingleTrench
      tags:
      - Trenches
      parameters:
      - $ref: "#/components/parameters/trenchId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                reference:
                  type: string
                construction:
                  type: object
                  properties:
                    depth:
                      type: number
                    classifier:
                      $ref: "#/components/schemas/depthClassifier"
                    unit:
                      $ref: "#/components/schemas/sizeUnit"
                    type:
                      $ref: "#/components/schemas/constructionType"
                demographics:
                  type: object
                  properties:
                    premises:
                      type: object
                      properties:
                        passed:
                          type: integer
                          default: 0
                          minimum: 0
                        area:
                          $ref: "#/components/schemas/areaType"
                          default: unclassified
                build:
                  type: object
                  properties:
                    jobId:
                      type: string
                    permitId:
                      type: string
                    planned:
                      type: object
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                    actual:
                      type: object
                      properties:
                        start:
                          $ref: "#/components/schemas/date"
                        completion:
                          $ref: "#/components/schemas/date"
                        duration:
                          type: integer
                          minimum: 0
                        unit:
                          $ref: "#/components/schemas/durationUnit"
                state:
                  $ref: "#/components/schemas/trenchState"
                connectsTo:
                  description: optional site, trench or pole link connection
                  properties:
                    siteId:
                      $ref: "#/components/schemas/siteId"
                    trenchId:
                      $ref: "#/components/schemas/trenchId"
                    poleId:
                      $ref: "#/components/schemas/poleId"
                coordinates:
                  type: array
                  minItems: 1
                  items:
                    $ref: "#/components/schemas/coordinate"
                point:
                  $ref: "#/components/schemas/dateTime"
                source:
                  $ref: "#/components/schemas/source"
                delete:
                  $ref: "#/components/schemas/delete"
            examples:
              service/drop:
                value:
                  coordinates:
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09448
                    z: 2357
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified trench
      security:
      - openId:
        - read:mni_trench
      operationId: getSingleTrench
      tags:
      - Trenches
      parameters:
      - $ref: "#/components/parameters/trenchId"
      - $ref: "#/components/parameters/dateTime"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  trenchId:
                    $ref: "#/components/schemas/trenchId"
                  reference:
                    type: string
                  purpose:
                    $ref: "#/components/schemas/trenchPurpose"
                  construction:
                    type: object
                    properties:
                      depth:
                        type: number
                      depthClassifier:
                        $ref: "#/components/schemas/depthClassifier"
                      unit:
                        $ref: "#/components/schemas/sizeUnit"
                      type:
                        $ref: "#/components/schemas/constructionType"
                  demographics:
                    type: object
                    properties:
                      premises:
                        type: object
                        properties:
                          passed:
                            type: integer
                            default: 0
                            minimum: 0
                          area:
                            $ref: "#/components/schemas/areaType"
                            default: unclassified
                  build:
                    type: object
                    properties:
                      jobId:
                        type: string
                      permitId:
                        type: string
                      planned:
                        type: object
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                      actual:
                        type: object
                        properties:
                          start:
                            $ref: "#/components/schemas/date"
                          completion:
                            $ref: "#/components/schemas/date"
                          duration:
                            type: integer
                            minimum: 0
                          unit:
                            $ref: "#/components/schemas/durationUnit"
                  state:
                    $ref: "#/components/schemas/trenchState"
                  connectsTo:
                    type: object
                    description: optional site, trench or pole link connection
                    properties:
                      siteId:
                        $ref: "#/components/schemas/siteId"
                      trenchId:
                        $ref: "#/components/schemas/trenchId"
                      poleId:
                        $ref: "#/components/schemas/poleId"
                  coordinates:
                    type: array
                    minItems: 1
                    items:
                      $ref: "#/components/schemas/coordinate"
                  point:
                    $ref: "#/components/schemas/dateTime"
                  source:
                    $ref: "#/components/schemas/source"
                  delete:
                    $ref: "#/components/schemas/delete"
              examples:
                service/drop:
                  value:
                    trenchId: 5ef82c6f-b06b-4d93-a4c2-3b78b62dd7cf
                    reference: gbr-worc-cg-south
                    purpose: service/drop
                    construction:
                      depth: 0.5
                      depthClassifier: low
                      unit: m
                      type: micro
                    demographics:
                      premises:
                        passed: 4
                        area: residential
                    build:
                      jobId: "2148"
                      permitId: RB2021/1492
                      planned:
                        start: "20241005"
                        completion: "20241008"
                        duration: 3
                        unit: day
                    state: free
                    connectsTo:
                      siteId: 86e420f1-137b-4e34-9ff7-18bd12743a10
                    coordinates:
                    - x: -112.26454
                      y: 36.09447
                      z: 2357
                    - x: -112.26455
                      y: 36.09448
                      z: 2357
                    - x: -112.26456
                      y: 36.12448
                      z: 2357
                    - x: -112.26457
                      y: 36.14448
                      z: 2357
                    - x: -112.26458
                      y: 36.15448
                      z: 2357
                    - x: -112.26459
                      y: 36.17448
                      z: 2357
                    - x: -112.2646
                      y: 36.19448
                      z: 2357
                    - x: -112.26451
                      y: 36.21448
                      z: 2357
                    source: historical
                    delete: false
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench/distance/{trenchId}:
    get:
      summary: Using an ellipsoidal model of the earths surface returns the specified trench length based on known geometries
      security:
      - openId:
        - read:mni_trench
      operationId: getTrenchDistance
      parameters:
      - $ref: "#/components/parameters/trenchId"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance:
                    type: number
                  unit:
                    $ref: "#/components/schemas/sizeUnit"
                    default: "m"
              example:
                distance: 0.014618
                unit: "m"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trenches/capacity/state:
    get:
      summary: State capacity for trenches
      security:
      - openId:
        - read:mni_trench
      operationId: getTrenchesCapacityState
      parameters:
      - $ref: "#/components/parameters/dateFrom"
      - $ref: "#/components/parameters/dateTo"
      - $ref: "#/components/parameters/dateBefore"
      - $ref: "#/components/parameters/dateAfter"
      - $ref: "#/components/parameters/aggregationUnit"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  by:
                    $ref: "#/components/schemas/aggregationUnit"
                  trench:
                    type: array
                    items:
                      type: object
                      properties:
                        trenchId:
                          $ref: "#/components/schemas/trenchId"
                        connectsTo:
                          description: optional site, trench or pole link connection
                          properties:
                            siteId:
                              $ref: "#/components/schemas/siteId"
                            trenchId:
                              $ref: "#/components/schemas/trenchId"
                            poleId:
                              $ref: "#/components/schemas/poleId"
                        capacity:
                          type: array
                          items:
                            type: object
                            properties:
                              period:
                                $ref: "#/components/schemas/datePeriod"
                              state:
                                $ref: "#/components/schemas/trenchState"
              examples:
                sample:
                  value:
                    by: "month"
                    trench:
                    - trenchId: 38b6c897-9982-4426-b9e3-c603e7e2cb5d
                      capacity:
                      - period: "202406"
                        state: "free"
                      - period: "202407"
                        state: "free"
                      - period: "202408"
                        state: "used"
                      - period: "202409"
                        state: "used"
                      - period: "202410"
                        state: "used"
                      - period: "202411"
                        state: "used"
                      - period: "202412"
                        state: "used"
                      - period: "202501"
                        state: "used"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench/timeline/{trenchId}:
    get:
      summary: timeline points for specified trench
      security:
      - openId:
        - read:mni_trench
      operationId: getTrenchTimeline
      parameters:
      - $ref: "#/components/parameters/trenchId"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    point:
                      $ref: "#/components/schemas/dateTime"
                    source:
                      $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                  - point: 20250102T000000
                    source: historical
                  - point: 20250118T000000
                    source: historical
                  - point: 20250202T000000
                    source: historical
                  - point: 20250309T000000
                    source: historical
                  - point: 20260401T000000
                    source: predicted
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench/geometry/lifetime/{trenchId}:
    get:
      summary: |
        geometry points for specified trench over entire lifetime, with each point containing the incremental detla change. *note*: property name `YYYYMMDDThhmmss` is dynamic and matches one of the entries in the `sets` array for `point`
      security:
      - openId:
        - read:mni_trench
      operationId: getTrenchGeometryLifetime
      parameters:
      - $ref: "#/components/parameters/trenchId"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  YYYYMMDDThhmmss:
                    type: array
                    items:
                      $ref: "#/components/schemas/coordinate3d"
                  sets:
                    type: array
                    items:
                      type: object
                      properties:
                        point:
                          $ref: "#/components/schemas/dateTime"
                        source:
                          $ref: "#/components/schemas/source"
              examples:
                sample:
                  value:
                    20250228T000000:
                    - x: -112.26454
                      y: 36.09447
                      z: 2357
                    - x: -112.26454
                      y: 36.09547
                      z: 2357
                    20250302T000000:
                    - x: -112.26454
                      y: 36.09648
                      z: 2357
                    - x: -112.26454
                      y: 36.09748
                      z: 2357
                    20250402T000000:
                    - x: -112.26454
                      y: 36.09951
                      z: 2357
                    sets:
                    - point: 20250228T000000
                      source: historical
                    - point: 20250302T000000
                      source: historical
                    - point: 20250402T000000
                      source: predicted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench/geometry/{trenchId}:
    get:
      summary: geometry points for specified trench
      security:
      - openId:
        - read:mni_trench
      operationId: getTrenchGeometry
      parameters:
      - $ref: "#/components/parameters/trenchId"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/coordinate"
              examples:
                sample:
                  value:
                  - x: -112.26454
                    y: 36.09447
                    z: 2357
                  - x: -112.26454
                    y: 36.09547
                    z: 2357
                  - x: -112.26454
                    y: 36.09648
                    z: 2357
                  - x: -112.26454
                    y: 36.09748
                    z: 2357
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /trench/premisesPassed/{trenchId}:
    get:
      summary: number of premises passed for specified trench
      security:
      - openId:
        - read:mni_trench
      operationId: getTrenchPremisesPassed
      parameters:
      - $ref: "#/components/parameters/trenchId"
      - $ref: "#/components/parameters/dateTime"
      tags:
      - Trenches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  passed:
                    type: number
                    format: integer
                    minimum: 0
              examples:
                sample:
                  value:
                    passed: 20
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /q2c/trenchDistance:
    post:
      summary: simple trench distance estimate
      security:
      - openId:
        - read:mni_q2c
      operationId: q2cTrenchDistanceEstimate
      tags:
      - Q2C
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - purpose
              - coordinates
              properties:
                purpose:
                  $ref: "#/components/schemas/trenchPurpose"
                type:
                  $ref: "#/components/schemas/constructionType"
                trenchId:
                  $ref: "#/components/schemas/trenchId"
                isoCode:
                  $ref: "#/components/schemas/currencyIsoCode"
                  default: "EUR"
                coordinates:
                  type: array
                  minItems: 2
                  items:
                    $ref: "#/components/schemas/coordinate"
            examples:
              service/drop:
                value:
                  purpose: service/drop
                  trenchId: b55fcbef-6d4f-4803-8755-0d920835de85
                  isoCode: EUR
                  coordinates:
                  - x: 52.314930723981576
                    y: -2.1765905793762297
                  - x: 52.31530785113297
                    y: -2.175979035720834
                  - x: 52.315461980435
                    y: -2.175683992729196
                  - x: 52.31558987455477
                    y: -2.1755713399505705
                  - x: 52.3157144889826
                    y: -2.1754694160080046
                  - x: 52.315793192650986
                    y: -2.1754533227539152
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance:
                    type: number
                    minimum: 0
                  unit:
                    $ref: "#/components/schemas/sizeUnit"
                    default: "m"
                  cost:
                    type: number
                    format: currency
                  symbol:
                    $ref: "#/components/schemas/currencySymbol"
                  isoCode:
                    $ref: "#/components/schemas/currencyIsoCode"
                  rate:
                    description: currency conversion rate from default currency to this currency (if applicable)
                    type: number
                    format: currency
              examples:
                service/drop:
                  value:
                    cost: 3.75
                    distance: 3.75
                    unit: m
                    symbol: "€"
                    isoCode: "EUR"
                    rate: 1
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/data:
    get:
      summary: Export data settings
      security:
      - openId:
        - read:mni_admin
      operationId: getAdminData
      tags:
      - Administration - Data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  historical:
                    type: object
                    properties:
                      duration:
                        type: integer
                      unit:
                        $ref: "#/components/schemas/durationUnit"
                  predicted:
                    type: object
                    properties:
                      duration:
                        type: integer
                      unit:
                        $ref: "#/components/schemas/durationUnit"
              examples:
                sample:
                  value:
                    historical:
                      duration: 1
                      unit: year
                    predicted:
                      duration: 6
                      unit: month
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import data settings
      security:
      - openId:
        - read:mni_admin
      operationId: addAdminData
      tags:
      - Administration - Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - historical
              - predicted
              properties:
                historical:
                  type: object
                  required:
                  - duration
                  - unit
                  properties:
                    duration:
                      type: integer
                    unit:
                      $ref: "#/components/schemas/durationUnit"
                predicted:
                  type: object
                  required:
                  - duration
                  - unit
                  properties:
                    duration:
                      type: integer
                    unit:
                      $ref: "#/components/schemas/durationUnit"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/data/historical/duration:
    get:
      summary: Get maximum retention duration of active system historical data
      security:
      - openId:
        - read:mni_admin
      operationId: getMaxRetentionPeriodDuration
      tags:
      - Administration - Data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  duration:
                    type: integer
                  unit:
                    $ref: "#/components/schemas/durationUnit"
              examples:
                sample:
                  value:
                    duration: 1
                    unit: year
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update maximum retention duration of active system historical data
      security:
      - openId:
        - write:mni_admin
      operationId: updateMaxRetentionPeriodDuration
      tags:
      - Administration - Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - duration
              - unit
              properties:
                duration:
                  type: integer
                  minimum: 1
                unit:
                  $ref: "#/components/schemas/durationUnit"
            examples:
              6months:
                value:
                  duration: 6
                  unit: month
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/data/predicted/duration:
    get:
      summary: Get maximum predicted duration of active system predicted data
      security:
      - openId:
        - read:mni_admin
      operationId: getMaxPredictedPeriodDuration
      tags:
      - Administration - Data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  duration:
                    type: integer
                  unit:
                    $ref: "#/components/schemas/durationUnit"
              examples:
                sample:
                  value:
                    duration: 6
                    unit: month
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update maximum predicted duration of active system predicted data
      security:
      - openId:
        - write:mni_admin
      operationId: updateMaxPredictedPeriodDuration
      tags:
      - Administration - Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - period
              - unit
              properties:
                period:
                  type: integer
                  minimum: 1
                unit:
                  $ref: "#/components/schemas/durationUnit"
            examples:
              3weeks:
                value:
                  period: 3
                  unit: week
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/email:
    get:
      summary: Export email configurations
      security:
      - openId:
        - read:mni_admin
      operationId: getMultipleEmail
      tags:
      - Administration - Email
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    emailProviderId:
                      $ref: "#/components/schemas/emailProviderId"
                    vendor:
                      type: string
                      description: vendor name
                    address:
                      description: email address
                      type: string
                      format: uri
                    name:
                      description: email address name
                      format: string
                    send:
                      $ref: "#/components/schemas/emailSend"
                    receive:
                      $ref: "#/components/schemas/emailReceive"
              examples:
                sample:
                  value:
                  - emailProviderId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
                    vendor: FastMail
                    address: ni@marlindt.net
                    name: MarlinDT Network Intelligence
                    send:
                      username: ni@marlindt.net
                      password: password123&#
                      host: smtp.fastmail.com
                      port: 465
                      protocol: smtp
                      authentication: PLAIN
                      encryption:
                        enabled: true
                        starttls: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import email configurations
      security:
      - openId:
        - write:mni_admin
      operationId: addMultipleEmail
      tags:
      - Administration - Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                - emailProviderId
                - vendor
                - address
                - name
                - send
                properties:
                  emailProviderId:
                    description: optionally specify the internal email provider identifier
                    $ref: "#/components/schemas/emailProviderId"
                  vendor:
                    type: string
                    description: vendor name
                  address:
                    description: email address
                    type: string
                    format: uri
                  name:
                    description: email address name
                    format: string
                  send:
                    $ref: "#/components/schemas/emailSend"
                  receive:
                    $ref: "#/components/schemas/emailReceive"
            examples:
              sample:
                value:
                - emailProviderId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
                  vendor: FastMail
                  address: ni@marlindt.net
                  name: MarlinDT Network Intelligence
                  send:
                    username: ni@marlindt.net
                    password: password123&#
                    host: smtp.fastmail.com
                    port: 465
                    protocol: smtp
                    authentication: PLAIN
                    encryption:
                      enabled: true
                      starttls: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/email/provider:
    get:
      summary: List of all available Email providers
      security:
      - openId:
        - read:mni_admin
      operationId: getAllEmailProviders
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Administration - Email
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/emailProviderId"
              examples:
                sample:
                  value:
                  - 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Register one Email provider
      security:
      - openId:
        - write:mni_admin
      operationId: registerEmailProvider
      tags:
      - Administration - Email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - vendor
              - address
              - send
              properties:
                vendor:
                  type: string
                  description: vendor name
                address:
                  description: email address
                  type: string
                  format: email
                name:
                  description: email address name
                  format: string
                send:
                  required:
                  - username
                  - password
                  - host
                  - port
                  - protocol
                  - authentication
                  - encryption
                  $ref: "#/components/schemas/emailSend"
                receive:
                  required:
                  - username
                  - password
                  - host
                  - port
                  - protocol
                  - encryption
                  $ref: "#/components/schemas/emailReceive"
            examples:
              FastMail:
                value:
                  vendor: FastMail
                  address: ni@marlindt.net
                  name: MarlinDT Network Intelligence
                  send:
                    username: ni@marlindt.net
                    password: password123&#
                    host: smtp.fastmail.com
                    port: 465
                    protocol: smtp
                    authentication: PLAIN
                    encryption:
                      enabled: true
                      starttls: false
                  receive:
                    username: ni@marlindt.net
                    password: password123&#
                    host: imap.fastmail.com
                    port: 993
                    protocol: imap4
                    encryption:
                      enabled: true
                      starttls: false
                    folderSeparator: /
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  emailProviderId:
                    $ref: "#/components/schemas/emailProviderId"
              example:
                emailProviderId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/email/provider/{emailProviderId}:
    delete:
      summary: Unregister one Email provider
      security:
      - openId:
        - write:mni_admin
      operationId: deleteEmailProvider
      tags:
      - Administration - Email
      parameters:
      - $ref: "#/components/parameters/emailProviderId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified Email provider details
      security:
      - openId:
        - read:mni_admin
      parameters:
      - $ref: "#/components/parameters/emailProviderId"
      operationId: getSingleEmailProvider
      tags:
      - Administration - Email
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  emailProviderId:
                    $ref: "#/components/schemas/emailProviderId"
                  vendor:
                    type: string
                    description: vendor name
                  address:
                    description: email address
                    type: string
                    format: uri
                  name:
                    description: email address name
                    format: string
                  send:
                    $ref: "#/components/schemas/emailSend"
                  receive:
                    $ref: "#/components/schemas/emailReceive"
              examples:
                FastMail:
                  value:
                    emailProviderId: 6eafc385-43a1-4b49-9dd9-902a2a12a4ad
                    vendor: FastMail
                    address: ni@marlindt.net
                    name: MarlinDT Network Intelligence
                    send:
                      username: ni@marlindt.net
                      password: password123&#
                      host: smtp.fastmail.com
                      port: 465
                      protocol: smtp
                      authentication: PLAIN
                      encryption:
                        enabled: true
                        starttls: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update single Email provider
      security:
      - openId:
        - write:mni_admin
      operationId: updateEmailProvider
      tags:
      - Administration - Email
      parameters:
      - $ref: "#/components/parameters/emailProviderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vendor:
                  type: string
                  description: vendor name
                address:
                  description: email address
                  type: string
                  format: uri
                name:
                  description: email address name
                  format: string
                send:
                  $ref: "#/components/schemas/emailSend"
                receive:
                  $ref: "#/components/schemas/emailReceive"
            examples:
              FastMail:
                description: update both IMAP4 and SMTP passwords
                value:
                  send:
                    password: password123&#
                  receive:
                    password: password123&#
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace single Email Provider
      security:
      - openId:
        - write:mni_admin
      operationId: replaceEmailProvider
      tags:
      - Administration - Email
      parameters:
      - $ref: "#/components/parameters/emailProviderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - vendor
              - address
              - send
              properties:
                vendor:
                  type: string
                  description: vendor name
                address:
                  description: email address
                  type: string
                  format: uri
                name:
                  description: email address name
                  format: string
                send:
                  $ref: "#/components/schemas/emailSend"
                receive:
                  $ref: "#/components/schemas/emailReceive"
            examples:
              FastMail:
                value:
                  vendor: FastMail
                  address: ni@marlindt.net
                  name: MarlinDT Network Intelligence
                  send:
                    username: ni@marlindt.net
                    password: password123&#
                    host: smtp.fastmail.com
                    port: 465
                    protocol: smtp
                    authentication: PLAIN
                    encryption:
                      enabled: true
                      starttls: false
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/kafka:
    get:
      summary: Export Kafka configurations
      security:
      - openId:
        - read:mni_admin
      operationId: getMultipleKafka
      tags:
      - Administration - Kafka
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    kafkaProducerId:
                      $ref: "#/components/schemas/kafkaProducerId"
                    name:
                      type: string
                      description: name of Kafka broker for human purposes
                    clientId:
                      type: string
                      default: mni
                    producer:
                      $ref: "#/components/schemas/kafkaProducer"
              examples:
                sample:
                  value:
                  - kafkaProducerId: 7e3360a0-ce0e-406c-b3a3-d04c6c5500c
                    name: west
                    clientId: mni
                    producer:
                      username: ni@marlindt.net
                      password: password123&#
                      host: 10.72.34.16
                      port: 9092
                      retryDelay: 10000
                      retries: 2
                      acks: leader
                      linger: 0
                      batchSize: 16
                      bufferMemory: 32
                      maxInflightRequestsPerConnection: 5
                      compressionMethod: none
                      authentication: none
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import Kafka configuration
      security:
      - openId:
        - write:mni_admin
      operationId: addMultipleKafka
      tags:
      - Administration - Kafka
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                - name
                - clientId
                - producer
                properties:
                  kafkaProducerId:
                    description: optionally specify the internal Kafka broker identifier
                    $ref: "#/components/schemas/kafkaProducerId"
                  name:
                    type: string
                    description: name of Kafka broker for human purposes
                  clientId:
                    type: string
                    default: mni
                  producer:
                    required:
                    - username
                    - password
                    - host
                    - port
                    - authentication
                    $ref: "#/components/schemas/kafkaProducer"
            examples:
              sample:
                value:
                - kafkaProducerId: 7e3360a0-ce0e-406c-b3a3-d04c6c5500c
                  name: west
                  clientId: mni
                  producer:
                    username: ni@marlindt.net
                    password: password123&#
                    host: 10.72.34.16
                    port: 9092
                    retryDelay: 10000
                    retries: 2
                    acks: leader
                    linger: 0
                    batchSize: 16
                    bufferMemory: 32
                    maxInflightRequestsPerConnection: 5
                    compressionMethod: none
                    authentication: none
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal Kafka broker identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/kafkaProducerId"
              examples:
                sample:
                  value:
                  - 7e3360a0-ce0e-406c-b3a3-d04c6c5500
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/kafka/broker:
    get:
      summary: List of all available Kafka brokers
      security:
      - openId:
        - read:mni_admin
      operationId: getAllKafkaBrokers
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Administration - Kafka
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/kafkaProducerId"
              examples:
                sample:
                  value:
                  - 7e3360a0-ce0e-406c-b3a3-d04c6c5500c
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Register one Kafka broker
      security:
      - openId:
        - write:mni_admin
      operationId: registerKafkaBroker
      tags:
      - Administration - Kafka
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - clientId
              - producer
              properties:
                name:
                  type: string
                  description: name of Kafka broker for human purposes
                clientId:
                  type: string
                  default: mni
                producer:
                  required:
                  - username
                  - password
                  - host
                  - port
                  - authentication
                  $ref: "#/components/schemas/kafkaProducer"
            examples:
              sample:
                value:
                  name: west
                  clientId: mni
                  producer:
                    username: ni@marlindt.net
                    password: password123&#
                    host: 10.72.34.16
                    port: 9092
                    authentication: none
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kafkaProducerId:
                    $ref: "#/components/schemas/kafkaProducerId"
              example:
                kafkaProducerId: 7e3360a0-ce0e-406c-b3a3-d04c6c5500c
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/kafka/broker/{kafkaProducerId}:
    delete:
      summary: Unregister one Kafka broker
      security:
      - openId:
        - write:mni_admin
      operationId: deleteKafkaBroker
      tags:
      - Administration - Kafka
      parameters:
      - $ref: "#/components/parameters/kafkaProducerId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified Kafka broker details
      security:
      - openId:
        - read:mni_admin
      parameters:
      - $ref: "#/components/parameters/kafkaProducerId"
      operationId: getSingleKafkaBroker
      tags:
      - Administration - Kafka
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kafkaProducerId:
                    $ref: "#/components/schemas/kafkaProducerId"
                  name:
                    type: string
                    description: name of Kafka broker for human purposes
                  clientId:
                    type: string
                    default: mni
                  producer:
                    $ref: "#/components/schemas/kafkaProducer"
              examples:
                sample:
                  value:
                    kafkaProducerId: 7e3360a0-ce0e-406c-b3a3-d04c6c5500c
                    name: west
                    clientId: mni
                    producer:
                      username: ni@marlindt.net
                      password: password123&#
                      host: 10.72.34.16
                      port: 9092
                      retryDelay: 10000
                      retries: 2
                      acks: leader
                      linger: 0
                      batchSize: 16
                      bufferMemory: 32
                      maxInflightRequestsPerConnection: 5
                      compressionMethod: none
                      authentication: none
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update single Kafka broker
      security:
      - openId:
        - write:mni_admin
      operationId: updateKafkaBroker
      tags:
      - Administration - Kafka
      parameters:
      - $ref: "#/components/parameters/kafkaProducerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of Kafka broker for human purposes
                clientId:
                  type: string
                  default: mni
                producer:
                  $ref: "#/components/schemas/kafkaProducer"
            examples:
              sample:
                value:
                  producer:
                    compressionMethod: gzip
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace single Kafka broker
      security:
      - openId:
        - write:mni_admin
      operationId: replaceKafkaBroker
      tags:
      - Administration - Kafka
      parameters:
      - $ref: "#/components/parameters/kafkaProducerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - clientId
              - producer
              properties:
                name:
                  type: string
                  description: name of Kafka broker for human purposes
                clientId:
                  type: string
                  default: mni
                producer:
                  $ref: "#/components/schemas/kafkaProducer"
            examples:
              sample:
                value:
                  name: west
                  clientId: mni
                  producer:
                    username: ni@marlindt.net
                    password: password123&#
                    host: 10.72.34.16
                    port: 9092
                    authentication: basic
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/map:
    get:
      summary: Export map configurations
      security:
      - openId:
        - read:mni_admin
      operationId: getMultipleMap
      tags:
      - Administration - Maps
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    mapProviderId:
                      $ref: "#/components/schemas/mapProviderId"
                    vendor:
                      $ref: "#/components/schemas/mapVendorPlatform"
                    default:
                      description: system-wide default provider
                      type: boolean
                      default: false
                    renderUrl:
                      type: string
                      format: url
                      description: base URL for map rendering operations
                    credentials:
                      type: object
                      properties:
                        identity:
                          type: string
                        key:
                          type: string
                          format: password
                    identityProvider:
                      type: object
                      description: OAuth 2.0 authorization and authentication endpoints
                      properties:
                        base:
                          type: string
                          format: url
                          description: base URL
                        authorization:
                          type: string
                          format: uri
                          description: authorization endpoint
                        token:
                          type: string
                          format: uri
                          description: access token endpoint
                        wellKnown:
                          type: string
                          format: uri
                          description: RFC8414 authorization server metadata
              examples:
                sample:
                  value:
                  - mapProviderId: 09d475ec-96e1-4e9c-848d-06b432df59e7
                    vendor: OpenStreet Map
                    default: false
                    renderUrl: "https://www.openstreetmap.org/render"
                    credentials:
                      identity: "mni"
                      key: "AIzaSyDaGmWKa4JsXZ-HjGw7ISLn_3namBGewQe"
                    identityProvider:
                      base: "https://www.openstreetmap.org"
                      authorization: "/oauth2/authorize"
                      token: "/oauth2/token"
                      wellKnown: "/.well-known/oauth-authorization-server"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import map configurations
      security:
      - openId:
        - write:mni_admin
      operationId: addMultipleMap
      tags:
      - Administration - Maps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: array
                items:
                  type: object
                  required:
                  - mapProviderId
                  - vendor
                  - renderUrl
                  - credentials
                  properties:
                    mapProviderId:
                      description: optionally specify the internal map provider identifier
                      $ref: "#/components/schemas/mapProviderId"
                    vendor:
                      $ref: "#/components/schemas/mapVendorPlatform"
                    default:
                      description: system-wide default provider
                      type: boolean
                      default: false
                    renderUrl:
                      type: string
                      format: url
                      description: base URL for map rendering operations
                    credentials:
                      type: object
                      required:
                      - identity
                      - key
                      properties:
                        identity:
                          type: string
                        key:
                          type: string
                          format: password
              - type: array
                items:
                  type: object
                  required:
                  - mapProviderId
                  - vendor
                  - renderUrl
                  - identityProvider
                  properties:
                    mapProviderId:
                      description: optionally specify the internal map provider identifier
                      $ref: "#/components/schemas/mapProviderId"
                    vendor:
                      $ref: "#/components/schemas/mapVendorPlatform"
                    default:
                      description: system-wide default provider
                      type: boolean
                      default: false
                    renderUrl:
                      type: string
                      format: url
                      description: base URL for map rendering operations
                    identityProvider:
                      type: object
                      required:
                      - base
                      - authorization
                      - token
                      - wellKnown
                      description: OAuth 2.0 authorization and authentication endpoints
                      properties:
                        base:
                          type: string
                          format: url
                          description: base URL
                        authorization:
                          type: string
                          format: uri
                          description: authorization endpoint
                        token:
                          type: string
                          format: uri
                          description: access token endpoint
                        wellKnown:
                          type: string
                          format: uri
                          description: RFC8414 authorization server metadata
            examples:
              API Key:
                value:
                - mapProviderId: 09d475ec-96e1-4e9c-848d-06b432df59e7
                  vendor: Google Maps
                  default: false
                  renderUrl: "https://maps.googleapis.com/maps/api/js?key="
                  credentials:
                    identity: "mni"
                    key: "googleSuppliedKey"
              OAuth2:
                value:
                - mapProviderId: 09d475ec-96e1-4e9c-848d-06b432df59e7
                  vendor: OpenStreet Map
                  default: false
                  renderUrl: "https://www.openstreetmap.org/render"
                  identityProvider:
                    base: "https://www.openstreetmap.org"
                    authorization: "/oauth2/authorize"
                    token: "/oauth2/token"
                    wellKnown: "/.well-known/oauth-authorization-server"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internal map providers identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/mapProviderId"
              examples:
                sample:
                  value:
                  - 09d475ec-96e1-4e9c-848d-06b432df59e7
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/map/provider:
    get:
      summary: List of all available Map Providers
      security:
      - openId:
        - read:mni_admin
      operationId: getAllMapProviders
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Administration - Maps
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/mapProviderId"
              examples:
                sample:
                  value:
                  - 9fbb4c17-07fb-4990-ad84-22b8078ae58f
                  - 089b8099-dd52-419a-8bc8-b7fd87605bfe
                  - ef48e255-d604-48a4-970a-c3d92fa271e8
                  - a4ace64f-4ddd-4355-a4ea-71ee8e7d7a58
                  - 09d475ec-96e1-4e9c-848d-06b432df59e7
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Register one Map Provider
      security:
      - openId:
        - write:mni_admin
      operationId: registerMapProvider
      tags:
      - Administration - Maps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                required:
                - vendor
                - renderUrl
                - credentials
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  default:
                    description: system-wide default provider
                    type: boolean
                    default: false
                  renderUrl:
                    type: string
                    format: url
                    description: base URL for map rendering operations
                  credentials:
                    type: object
                    required:
                    - identity
                    - key
                    properties:
                      identity:
                        type: string
                      key:
                        type: string
                        format: password
              - type: object
                required:
                - vendor
                - renderUrl
                - identityProvider
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  default:
                    description: system-wide default provider
                    type: boolean
                    default: false
                  renderUrl:
                    type: string
                    format: url
                    description: base URL for map rendering operations
                  identityProvider:
                    type: object
                    description: OAuth 2.0 authorization and authentication endpoints
                    required:
                    - base
                    - authorization
                    - token
                    properties:
                      base:
                        type: string
                        format: url
                        description: base URL
                      authorization:
                        type: string
                        format: uri
                        description: authorization endpoint
                      token:
                        type: string
                        format: uri
                        description: access token endpoint
                      wellKnown:
                        type: string
                        format: uri
                        description: RFC8414 authorization server metadata
            examples:
              OpenStreet Map:
                value:
                  vendor: OpenStreet Map
                  default: false
                  renderUrl: "https://www.openstreetmap.org/render"
                  identityProvider:
                    base: "https://www.openstreetmap.org"
                    authorization: "/oauth2/authorize"
                    token: "/oauth2/token"
                    wellKnown: "/.well-known/oauth-authorization-server"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mapProviderId:
                    $ref: "#/components/schemas/mapProviderId"
              example:
                mapProviderId: ff9bf3a0-682e-43ff-b38c-0ab962ef2fe7
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/map/provider/default:
    get:
      summary: Get default Map Provider identifier
      security:
      - openId:
        - read:mni_admin
      operationId: getDefaultMapProvider
      tags:
      - Administration - Maps
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  mapProviderId:
                    $ref: "#/components/schemas/mapProviderId"
              examples:
                sample:
                  value:
                    mapProviderId: 09d475ec-96e1-4e9c-848d-06b432df59e7
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/map/provider/{mapProviderId}:
    delete:
      summary: Unregister one Map Provider
      security:
      - openId:
        - write:mni_admin
      operationId: deleteMapProvider
      tags:
      - Administration - Maps
      parameters:
      - $ref: "#/components/parameters/mapProviderId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified Map Provider details
      security:
      - openId:
        - read:mni_admin
      parameters:
      - $ref: "#/components/parameters/mapProviderId"
      operationId: getSingleMapProvider
      tags:
      - Administration - Maps
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    mapProviderId:
                      $ref: "#/components/schemas/mapProviderId"
                    vendor:
                      $ref: "#/components/schemas/mapVendorPlatform"
                    default:
                      description: system-wide default provider
                      type: boolean
                      default: false
                    renderUrl:
                      type: string
                      format: url
                      description: base URL for map rendering operations
                    credentials:
                      type: object
                      properties:
                        identity:
                          type: string
                        key:
                          type: string
                          format: password
                - type: object
                  properties:
                    mapProviderId:
                      $ref: "#/components/schemas/mapProviderId"
                    vendor:
                      $ref: "#/components/schemas/mapVendorPlatform"
                    default:
                      description: system-wide default provider
                      type: boolean
                      default: false
                    renderUrl:
                      type: string
                      format: url
                      description: base URL for map rendering operations
                    identityProvider:
                      type: object
                      description: OAuth 2.0 authorization and authentication endpoints
                      properties:
                        base:
                          type: string
                          format: url
                          description: base URL
                        authorization:
                          type: string
                          format: uri
                          description: authorization endpoint
                        token:
                          type: string
                          format: uri
                          description: access token endpoint
                        wellKnown:
                          type: string
                          format: uri
                          description: RFC8414 authorization server metadata
              examples:
                OpenStreet Map:
                  value:
                    mapProviderId: 09d475ec-96e1-4e9c-848d-06b432df59e7
                    vendor: OpenStreet Map
                    default: false
                    renderUrl: "https://www.openstreetmap.org/render"
                    identityProvider:
                      base: "https://www.openstreetmap.org"
                      authorization: "/oauth2/authorize"
                      token: "/oauth2/token"
                      wellKnown: "/.well-known/oauth-authorization-server"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace one Map Provider
      security:
      - openId:
        - write:mni_admin
      operationId: replaceMapProvider
      tags:
      - Administration - Maps
      parameters:
      - $ref: "#/components/parameters/mapProviderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                required:
                - vendor
                - renderUrl
                - credentials
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  default:
                    description: system-wide default provider
                    type: boolean
                    default: false
                  renderUrl:
                    type: string
                    format: url
                    description: base URL for map rendering operations
                  credentials:
                    type: object
                    required:
                    - identity
                    - key
                    properties:
                      identity:
                        type: string
                      key:
                        type: string
                        format: password
              - type: object
                required:
                - vendor
                - renderUrl
                - identityProvider
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  default:
                    description: system-wide default provider
                    type: boolean
                    default: false
                  renderUrl:
                    type: string
                    format: url
                    description: base URL for map rendering operations
                  identityProvider:
                    type: object
                    description: OAuth 2.0 authorization and authentication endpoints
                    required:
                    - base
                    - authorization
                    - token
                    properties:
                      base:
                        type: string
                        format: url
                        description: base URL
                      authorization:
                        type: string
                        format: uri
                        description: authorization endpoint
                      token:
                        type: string
                        format: uri
                        description: access token endpoint
                      wellKnown:
                        type: string
                        format: uri
                        description: RFC8414 authorization server metadata
            examples:
              OpenStreet Map:
                value:
                  vendor: OpenStreet Map
                  default: false
                  renderUrl: "https://www.openstreetmap.org/render"
                  identityProvider:
                    base: "https://www.openstreetmap.org"
                    authorization: "/oauth2/authorize"
                    token: "/oauth2/token"
                    wellKnown: "/.well-known/oauth-authorization-server"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update one Map Provider
      security:
      - openId:
        - write:mni_admin
      operationId: updateMapProvider
      tags:
      - Administration - Maps
      parameters:
      - $ref: "#/components/parameters/mapProviderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  default:
                    description: system-wide default provider
                    type: boolean
                    default: false
                  renderUrl:
                    type: string
                    format: url
                    description: base URL for map rendering operations
                  credentials:
                    type: object
                    properties:
                      identity:
                        type: string
                      key:
                        type: string
                        format: password
              - type: object
                properties:
                  vendor:
                    $ref: "#/components/schemas/mapVendorPlatform"
                  default:
                    description: system-wide default provider
                    type: boolean
                    default: false
                  renderUrl:
                    type: string
                    format: url
                    description: base URL for map rendering operations
                  identityProvider:
                    type: object
                    description: OAuth 2.0 authorization and authentication endpoints
                    properties:
                      base:
                        type: string
                        format: url
                        description: base URL
                      authorization:
                        type: string
                        format: uri
                        description: authorization endpoint
                      token:
                        type: string
                        format: uri
                        description: access token endpoint
                      wellKnown:
                        type: string
                        format: uri
                        description: RFC8414 authorization server metadata
            examples:
              Google Maps:
                value:
                  default: true
                  credentials:
                    key: "googleSuppliedKey"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/workflow:
    get:
      summary: Export workflow configurations
      security:
      - openId:
        - read:mni_admin
      operationId: getMultipleWorkflow
      tags:
      - Administration - Workflow Engine
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    workflowEngineId:
                      $ref: "#/components/schemas/workflowEngineId"
                    name:
                      type: string
                      description: name of workflow engine for human purposes
                    engine:
                      $ref: "#/components/schemas/workflowEngine"
              examples:
                sample:
                  value:
                  - workflowEngineId: f069bd6c-e663-4c0c-a273-17840c1e8263
                    name: camunda8
                    engine:
                      url: https://127.0.0.1:443/camunda
                      username: internal
                      password: service
                      type: bpmn
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Import workflow configurations
      security:
      - openId:
        - write:mni_admin
      operationId: addMultipleWorkflow
      tags:
      - Administration - Workflow Engine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                - name
                - engine
                properties:
                  workflowEngineId:
                    description: optionally specify the internal workflow engine identifier
                    $ref: "#/components/schemas/workflowEngineId"
                  source:
                    $ref: "#/components/schemas/source"
                  name:
                    type: string
                    description: name of workflow engine for human purposes
                  engine:
                    required:
                    - username
                    - password
                    - url
                    - type
                    $ref: "#/components/schemas/workflowEngine"
            examples:
              sample:
                value:
                - workflowEngineId: f069bd6c-e663-4c0c-a273-17840c1e8263
                  name: camunda8
                  engine:
                    url: https://127.0.0.1:443/camunda
                    username: internal
                    password: service
                    type: bpmn
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: internalworkflow engine identifiers returned in the same order as supplied
                type: array
                items:
                  $ref: "#/components/schemas/mapProviderId"
              examples:
                sample:
                  value:
                  - f069bd6c-e663-4c0c-a273-17840c1e8263
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/workflow/engine:
    get:
      summary: List of all available workflow engines
      security:
      - openId:
        - read:mni_admin
      operationId: getAllWorkflowEngines
      parameters:
      - $ref: "#/components/parameters/pageSize"
      - $ref: "#/components/parameters/pageNumber"
      tags:
      - Administration - Workflow Engine
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/workflowEngineId"
              examples:
                sample:
                  value:
                  - f069bd6c-e663-4c0c-a273-17840c1e8263
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Register one workflow engine
      security:
      - openId:
        - write:mni_admin
      operationId: registerWorkflowEngine
      tags:
      - Administration - Workflow Engine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - engine
              properties:
                name:
                  type: string
                  description: name of workflow engine for human purposes
                engine:
                  required:
                  - username
                  - password
                  - url
                  - type
                  $ref: "#/components/schemas/workflowEngine"
            examples:
              camunda:
                value:
                  name: camunda8
                  engine:
                    url: https://127.0.0.1:8443/camunda
                    username: internal
                    password: service
                    type: elsa
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflowEngineId:
                    $ref: "#/components/schemas/workflowEngineId"
              example:
                workflowEngineId: f069bd6c-e663-4c0c-a273-17840c1e8263
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /admin/workflow/engine/{workflowEngineId}:
    delete:
      summary: Unregister one workflow engine
      security:
      - openId:
        - write:mni_admin
      operationId: deleteWorkflowEngine
      tags:
      - Administration - Workflow Engine
      parameters:
      - $ref: "#/components/parameters/workflowEngineId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    get:
      summary: Get specified workflow engine details
      security:
      - openId:
        - read:mni_admin
      operationId: getSingleWorkflowEngine
      tags:
      - Administration - Workflow Engine
      parameters:
      - $ref: "#/components/parameters/workflowEngineId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflowEngineId:
                    $ref: "#/components/schemas/workflowEngineId"
                  name:
                    type: string
                    description: name of workflow engine for human purposes
                  engine:
                    $ref: "#/components/schemas/workflowEngine"
              examples:
                sample:
                  value:
                    workflowEngineId: f069bd6c-e663-4c0c-a273-17840c1e8263
                    name: camunda8
                    engine:
                      url: https://127.0.0.1:443/camunda
                      username: internal
                      password: service
                      type: bpmn
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update single workflow engine
      security:
      - openId:
        - write:mni_admin
      operationId: updateWorkflowEngine
      tags:
      - Administration - Workflow Engine
      parameters:
      - $ref: "#/components/parameters/workflowEngineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of workflow engine for human purposes
                engine:
                  $ref: "#/components/schemas/workflowEngine"
            examples:
              camunda:
                value:
                  engine:
                    type: bpmn
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Replace single workflow engine
      security:
      - openId:
        - write:mni_admin
      operationId: replaceWorkflowEngine
      tags:
      - Administration - Workflow Engine
      parameters:
      - $ref: "#/components/parameters/workflowEngineId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              - engine
              properties:
                name:
                  type: string
                  description: name of workflow engine for human purposes
                engine:
                  required:
                  - username
                  - password
                  - url
                  - type
                  $ref: "#/components/schemas/workflowEngine"
            examples:
              camunda:
                value:
                  name: camunda
                  engine:
                    url: https://127.0.0.1:8443/camunda
                    username: internal
                    password: service
                    type: bpmn
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /predict/historicalTimeline:
    get:
      summary: Returns list of every historical resource and correspoding points
      security:
      - openId:
        - read:mni_predict
      operationId: getAllHistoricalTimeline
      tags:
      - Predictive
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cable:
                    type: object
                    properties:
                      cableId:
                        $ref: "#/components/schemas/cableId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  duct:
                    type: object
                    properties:
                      ductId:
                        $ref: "#/components/schemas/ductId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  ne:
                    type: object
                    properties:
                      neId:
                        $ref: "#/components/schemas/neId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  pole:
                    type: object
                    properties:
                      poleId:
                        $ref: "#/components/schemas/poleId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  rack:
                    type: object
                    properties:
                      rackId:
                        $ref: "#/components/schemas/rackId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  service:
                    type: object
                    properties:
                      serviceId:
                        $ref: "#/components/schemas/serviceId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  site:
                    type: object
                    properties:
                      siteId:
                        $ref: "#/components/schemas/siteId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  trench:
                    properties:
                      trenchId:
                        $ref: "#/components/schemas/trenchId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
              examples:
                sample:
                  value:
                    cable:
                      cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    duct:
                      ductId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    ne:
                      neId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    pole:
                      poleId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    rack:
                      rackId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    service:
                      serviceId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    site:
                      siteId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    trench:
                      trenchId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20240918T150800"
                      - "20241019T150800"
                      - "20241206T150800"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /predict/predictedTimeline:
    get:
      summary: Returns list of every predicted resource and correspoding points
      security:
      - openId:
        - read:mni_predict
      operationId: getAllPredictedTimeline
      tags:
      - Predictive
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cable:
                    type: object
                    properties:
                      cableId:
                        $ref: "#/components/schemas/cableId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  duct:
                    type: object
                    properties:
                      ductId:
                        $ref: "#/components/schemas/ductId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  ne:
                    type: object
                    properties:
                      neId:
                        $ref: "#/components/schemas/neId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  pole:
                    type: object
                    properties:
                      poleId:
                        $ref: "#/components/schemas/poleId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  rack:
                    type: object
                    properties:
                      rackId:
                        $ref: "#/components/schemas/rackId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  service:
                    type: object
                    properties:
                      serviceId:
                        $ref: "#/components/schemas/serviceId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  site:
                    type: object
                    properties:
                      siteId:
                        $ref: "#/components/schemas/siteId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
                  trench:
                    properties:
                      trenchId:
                        $ref: "#/components/schemas/trenchId"
                      point:
                        type: array
                        items:
                          $ref: "#/components/schemas/dateTime"
              examples:
                sample:
                  value:
                    cable:
                      cableId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    duct:
                      ductId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    ne:
                      neId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    pole:
                      poleId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    rack:
                      rackId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    service:
                      serviceId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    site:
                      siteId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20241118T150800"
                    trench:
                      trenchId: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                      point:
                      - "20240918T150800"
                      - "20241019T150800"
                      - "20241206T150800"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /predict/queue/{qId}:
    delete:
      summary: Remove item from internal predicton queue
      security:
      - openId:
        - write:mni_internal
      parameters:
      - $ref: "#/components/parameters/qId"
      operationId: deletePredictQueueItem
      tags:
      - Predictive
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /predict/queue:
    get:
      summary: Returns next item awaiting processing from internal prediction queue
      security:
      - openId:
        - read:mni_internal
      operationId: getNextPredictQueueItem
      tags:
      - Predictive
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                - qId
                - point
                - resource
                - id
                - state
                properties:
                  qId:
                    description: internal queue reference
                    type: integer
                    minimum: 0
                  point:
                    $ref: "#/components/schemas/dateTime"
                  resource:
                    description: resource cateogry
                    type: string
                    enum:
                    - cable
                    - duct
                    - ne
                    - pole
                    - rack
                    - service
                    - site
                    - trench
                  id:
                    description: resource specific internal identifier
                    type: string
                    format: uuid
                  state:
                    description: state of related queue entry
                    type: string
                    enum:
                    - create
                    - delete
                    - undelete
                    - update
                    - read
              examples:
                sample:
                  value:
                    qId: 1
                    point: 20250603T181300
                    resource: cable
                    id: 5520aca1-4727-431a-aa9c-23f2e54b8a41
                    state: update
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
  /search:
    post:
      summary: search
      security:
      - openId:
        - read:mni_search
      operationId: search
      tags:
      - Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - resource
              - query
              properties:
                resource:
                  $ref: "#/components/schemas/searchResourceType"
                query:
                  description: case insensitive query phrase specified with search
                  type: string
            examples:
              all:
                value:
                  resource: "*"
                  query: sample
              site:
                value:
                  resource: site
                  query: Zellix
              ne:
                value:
                  resource: ne
                  query: Cisco
              cve:
                value:
                  resource: cve
                  query: MX240
              currency:
                value:
                  resource: currency
                  query: sterl
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                - results
                - found
                - resource
                - query
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        resource:
                          description: internal MNI resource type of the matching resource
                          type: string
                        id:
                          description: internal MNI identifier of the matching resource
                          type: string
                          format: uuid
                  found:
                    description: number of found matches
                    type: number
                    format: integer
                  resource:
                    $ref: "#/components/schemas/searchResourceType"
                  query:
                    description: query phrase specified with search
                    type: string
              examples:
                sample:
                  value:
                    results:
                    - resource: service
                      id: 81eefb1f-57d4-40be-bfa9-c765e6d7577a
                    - resource: service
                      id: 784d5d3d-44cf-41a2-8ef0-24a376b0b296
                    found: 2
                    resource: "*"
                    query: sample
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /secret:
    post:
      summary: Add an authorization credential to the encrypted secret store
      security:
      - openId:
        - write:mni_secret
      operationId: addSingleSecret
      tags:
      - Secrets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/secretIdentity"
              - $ref: "#/components/schemas/secretPlain"
              - $ref: "#/components/schemas/secretSnmpV1V2c"
              - $ref: "#/components/schemas/secretSnmpV3"
              - $ref: "#/components/schemas/secretSsh"
              - $ref: "#/components/schemas/secretSsl"
              - $ref: "#/components/schemas/secretToken"
            examples:
              plain:
                value:
                  scope: example
                  realm: edge01gw
                  type: plain
                  plain:
                    username: admin
                    password: admin
                    expiration: 20251231T235959
              token:
                value:
                  scope: example
                  realm: edge01gw
                  type: token
                  token:
                    key: lasklaksaska2K!38sdjaksj
                    expiration: 20251231T235959
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /secret/{scope}/{realm}/{type}:
    get:
      summary: |
        Return an authorization credential, *note*: `scope`,`realm`,`type` must be known in advance
      security:
      - openId:
        - read:mni_secret
      operationId: getSingleSecret
      parameters:
      - $ref: "#/components/parameters/secretScope"
      - $ref: "#/components/parameters/secretRealm"
      - $ref: "#/components/parameters/secretType"
      tags:
      - Secrets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/secretIdentity"
                - $ref: "#/components/schemas/secretPlain"
                - $ref: "#/components/schemas/secretSnmpV1V2c"
                - $ref: "#/components/schemas/secretSnmpV3"
                - $ref: "#/components/schemas/secretSsh"
                - $ref: "#/components/schemas/secretSsl"
                - $ref: "#/components/schemas/secretToken"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: |
        Remove an authorization credential from the encrypted secret store, *note*: `scope`,`realm`,`type` must be known in advance
      security:
      - openId:
        - write:mni_secret
      parameters:
      - $ref: "#/components/parameters/secretScope"
      - $ref: "#/components/parameters/secretRealm"
      - $ref: "#/components/parameters/secretType"
      operationId: deleteSingleSecret
      tags:
      - Secrets
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    currencyIsoCode:
      type: string
      description: ISO code for currency
      enum:
      - AUD
      - BND
      - CHF
      - CLP
      - DKK
      - EUR
      - FKP
      - GBP
      - INR
      - NOK
      - NZD
      - RUB
      - SGD
      - SHP
      - TRY
      - USD
      - XAF
      - XCD
      - XCG
      - XOF
      - XPF
      - ZAR
    currencyName:
      type: string
      description: name of currency
      enum:
      - 'Australian dollar'
      - 'Brunei dollar'
      - 'Caribbean guilder'
      - 'Central African CFA franc'
      - 'CFP franc'
      - 'Chilean peso'
      - 'Danish krone'
      - 'Eastern Caribbean dollar'
      - 'Euro'
      - 'Falkland Islands pound'
      - 'Indian rupee'
      - 'New Zealand dollar'
      - 'Norwegian krone'
      - 'Russian ruble'
      - 'Saint Helena pound'
      - 'Singapore dollar'
      - 'South African rand'
      - 'Sterling'
      - 'Swiss franc'
      - 'Turkish lira'
      - 'United States dollar'
      - 'West African CFA franc'
    currencySymbol:
      type: string
      description: symbol for currency
      enum:
      - '$'
      - '£'
      - '₣'
      - '€'
      - '₹'
      - '₺'
      - '₽'
      - 'B$'
      - 'Cg'
      - 'EC$'
      - 'F.CFA'
      - 'Fr'
      - 'kr'
      - 'R'
      - 'S$'
      - 'XCG'
    currencyId:
      description: internal currency identifier
      type: string
      format: uuid
    callbackAuthentication:
      type: string
      description: |
        HTTP authentication scheme:
        - `none`
        - `basic`
      enum:
      - none
      - basic
      default: none
    datePeriodYear:
      type: string
      description: |
        4-digit year
        *example* `2024`
      pattern: '\d{4}'
      minLength: 4
      maxLength: 4
    datePeriodYearMonth:
      type: string
      description: |
        4-digit year with 2-digit month
        *example*: `202412`
      pattern: '\d{6}'
      minLength: 6
      maxLength: 6
    datePeriodYearMonthDay:
      type: string
      description: |
        4-digit year with 2-digit month and 2-digit day
        *example*: `20241223`
      pattern: '\d{8}'
      minLength: 8
      maxLength: 8
    datePeriodYearQuarter:
      type: string
      description: |
        quarter with 4-digit year
        *example*: `Q42024`
      minLength: 6
      maxLength: 6
      pattern: '[Q|q][1,2,3,4]\d{4}'
    datePeriodYearHalf:
      type: string
      description: |
        half year (biannual) with 4-digit year
        *example*: `1H2024`
      minLength: 6
      maxLength: 6
      pattern: '[1-2][H|h]\d{4}'
    datePeriod:
      oneOf:
      - $ref: "#/components/schemas/datePeriodYear"
      - $ref: "#/components/schemas/datePeriodYearHalf"
      - $ref: "#/components/schemas/datePeriodYearQuarter"
      - $ref: "#/components/schemas/datePeriodYearMonth"
      - $ref: "#/components/schemas/datePeriodYearMonthDay"
    aggregationUnit:
      description: unit of measure of the aggregation factor
      type: string
      enum:
      - hour
      - day
      - week
      - month
      - quarter
      - half-year
      - year
    coordinate3d:
      description: |
        A geometry is represented using geometric constructs defined as lists of one or more XYZ points forming a three-dimensional geometry. *note*:
        - `X` range is -180 to +180 with scale 3 and precision 6
        - `Y` range is -90 to +90 with scale 2 and precision 6
        - `Z` scale 8 and precision 2
      type: object
      required:
      - x
      - y
      - z
      properties:
        x:
          description: measured along east-west axis
          type: number
          format: float
          default: 0
          minimum: -180
          maximum: 180
          x-sap-precision: 3
          x-sap-scale: 6
        y:
          description: measured along north-south axis
          type: number
          format: float
          default: 0
          minimum: -90
          maximum: 90
          x-sap-precision: 2
          x-sap-scale: 6
        z:
          description: measured height or elevation
          type: number
          format: float
          default: 0
          x-sap-precision: 6
          x-sap-scale: 6
    coordinate:
      description: |
        A geometry is represented using geometric constructs either defined as lists of one or more XY or XYZ points or defined parametrically, for example, as a circular arc. While geometry typically is two- or three-dimensional, it may also contain the measurement dimension (M) to provide the basis for dynamic segments. *note*:
        - `X` range is -180 to +180 with scale 3 and precision 6
        - `Y` range is -90 to +90 with scale 2 and precision 6
        - `Z` scale 8 and precision 2
      type: object
      required:
      - x
      - y
      properties:
        x:
          description: measured along east-west axis
          type: number
          format: float
          default: 0
          minimum: -180
          maximum: 180
          x-sap-precision: 3
          x-sap-scale: 6
        y:
          description: measured along north-south axis
          type: number
          format: float
          default: 0
          minimum: -90
          maximum: 90
          x-sap-precision: 2
          x-sap-scale: 6
        z:
          description: measured height or elevation
          type: number
          format: float
          default: 0
          x-sap-precision: 6
          x-sap-scale: 6
        m:
          description: extra axis of information not associated with the cartesian x/y/z space
          type: string
    constructionType:
      description: type of trench construction
      type: string
      enum:
      - micro
      - narrow
      - backhoe
      - inline
      - portable
      - large
    date:
      description: |
        MNI date format in compressed ISO-8601. (`YYYYMMDD`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - example:
          - `20241118` 18-NOV-2024
      type: string
      pattern: '^\d{8}$'
      minLength: 8
      maxLength: 8
    dateTime:
      description: |
        MNI date format in compressed ISO-8601. (`YYYYMMDDThhmmss`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - literal `T` time start indicator
        - `hh` 2-digit hours (with leading zero if < 10)
        - `mm` 2-diigt minutes (with leading zero if < 10)
        - `ss` 2-digit seconds (with leading zero if < 10)
        - example:
          - `20241118T150800` 18-NOV-2024 15:08:00
      type: string
      pattern: '^\d{8}T\d{6}$'
      minLength: 15
      maxLength: 15
    ductPlacement:
      description: |
        horizontal and vertical placement of the duct within the trench
      type: object
      required:
      - vertical
      - horizontal
      - unit
      properties:
        vertical:
          description: |
            measured vertical position from top of trench, for the United Kingdom (GB) this is typically:
              - `power`:
                  - Low Voltage 450mm
                  - High Voltage 450mm to 1200mm
              - `coax` 250mm to 350mm
              - `gas` 600mm
              - `water` 750mm
              - `ethernet/fiber optic` etc. 350mm
          type: number
          format: float
          default: 350
        horizontal:
          description: |
            measured horizontal position from edge of trench, for the United Kingdom (GB) this is typically:
              - `power` 450mm
              - `coax` 745mm
              - `gas` 1040mm
              - `water` 1310mm
              - `ethernet/fiber optic` etc. 1579mm
          type: number
          format: float
          default: 1579
        unit:
          $ref: "#/components/schemas/sizeUnit"
    dimensions:
      description: |
        Height x Width x Depth of the item with a specified unit of measure
      type: object
      required:
      - depth
      - height
      - width
      - unit
      properties:
        depth:
          description: measured depth of item
          type: number
          format: float
          default: 914.40
        height:
          description: measured height of item
          type: number
          format: float
          default: 2000
        width:
          description: measured width of item
          type: number
          format: float
          default: 600
        unit:
          $ref: "#/components/schemas/sizeUnit"
    depthClassifier:
      description: summary of depth of the trench
      type: string
      enum:
      - low
      - medium
      - deep
    heightClassifier:
      description: summary of height of the (telegraph) pole
      type: string
      enum:
      - residential
      - rural
      - commercial
      - urban
      - highways
      - unclassified
    durationUnit:
      description: unit of measure of the duration
      type: string
      enum:
      - second
      - minute
      - hour
      - day
      - week
      - month
      - quarter
      - year
    kafkaTopic:
      description: |
        Kafka topic name
      type: string
      pattern: '[a-zA-Z0-9|_|\.|,|-]+'
    portTechnology:
      description: technology domain of port
      type: string
      enum:
      - coax
      - ethernet
      - loopback
      - xdsl
      - fiber
      - virtual
    portName:
      description: the name of the network equipment interface port
      type: string
      minLength: 3
      maxLength: 64
    portConnection:
      description: |
        cable connection of the interface port, *note*: technology specific
      oneOf:
      - $ref: "#/components/schemas/portSingleFiberConnection"
      - $ref: "#/components/schemas/portMultiFiberConnection"
      - $ref: "#/components/schemas/portEthernetConnection"
      - $ref: "#/components/schemas/portxDSLConnection"
      - $ref: "#/components/schemas/portCoaxConnection"
    portCoaxConnection:
      description: coaxial cable
      type: object
      required:
      - cableId
      - strand
      properties:
        cableId:
          $ref: "#/components/schemas/cableId"
    portxDSLConnection:
      description: xDSL cable
      type: object
      required:
      - cableId
      properties:
        cableId:
          $ref: "#/components/schemas/cableId"
    portEthernetConnection:
      description: ethernet cable
      type: object
      required:
      - cableId
      - strand
      properties:
        cableId:
          $ref: "#/components/schemas/cableId"
    portSingleFiberConnection:
      description: single fiber cable specific strand
      type: object
      required:
      - cableId
      - strand
      properties:
        cableId:
          $ref: "#/components/schemas/cableId"
        strand:
          $ref: "#/components/schemas/strand"
    portMultiFiberConnection:
      description: multi-fiber cable specific ribbon and specific strand
      type: object
      required:
      - cableId
      - ribbon
      - strand
      properties:
        cableId:
          $ref: "#/components/schemas/cableId"
        ribbon:
          $ref: "#/components/schemas/ribbon"
        strand:
          $ref: "#/components/schemas/strand"
    portConfiguration:
      description: |
        configuration of the interface port, *note*: technology specific
      oneOf:
      - $ref: "#/components/schemas/portFiberConfiguration"
      - $ref: "#/components/schemas/portCoaxConfiguration"
      - $ref: "#/components/schemas/portxDSLConfiguration"
      - $ref: "#/components/schemas/portEthernetConfiguration"
      - $ref: "#/components/schemas/portLoopbackConfiguration"
      - $ref: "#/components/schemas/portVirtualConfiguration"
    portxDSLConfiguration:
      description: xDSL port properties
      type: object
      required:
      - category
      - rate
      - unit
      properties:
        category:
          type: string
          enum:
          - ADSL
          - ADSL2
          - ADSL2+
          - VDSL
          - VDSL2
          default: VDSL2
        rate:
          description: maximum transmission rate
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        unit:
          description: unit of transmission rate
          type: string
          enum:
          - Mbps
          default: Mbps
    portEthernetConfiguration:
      description: ethernet port properties
      type: object
      required:
      - category
      - rate
      - unit
      properties:
        category:
          type: string
          enum:
          - Cat3
          - Cat4
          - Cat5
          - Cat5e
          - Cat6
          - Cat6A
          - Cat7
          - Cat8
          default: Cat6A
        rate:
          description: maximum transmission rate
          type: integer
          minimum: 1
          maximum: 768
          default: 10
        unit:
          description: unit of transmission rate
          type: string
          enum:
          - Mbps
          - Gbps
          - Tbps
          default: Gbps
    portLoopbackConfiguration:
      description: loopback port properties
      type: object
      required:
      - rate
      - unit
      properties:
        rate:
          description: maximum transmission rate
          type: integer
          minimum: 1
          maximum: 768
          default: 10
        unit:
          description: unit of transmission rate
          type: string
          enum:
          - Mbps
          - Gbps
          - Tbps
          default: Gbps
    portVirtualConfiguration:
      description: virtual port properties
      type: object
      required:
      - rate
      - unit
      properties:
        rate:
          description: maximum transmission rate
          type: integer
          minimum: 1
          maximum: 768
          default: 10
        unit:
          description: unit of transmission rate
          type: string
          enum:
          - Mbps
          - Gbps
          - Tbps
          default: Gbps
    portCoaxConfiguration:
      description: coaxial port properties
      type: object
      required:
      - frequencyRange
      - channels
      - width
      - unit
      properties:
        frequencyRange:
          type: object
          required:
          - low
          - high
          properties:
            low:
              description: minimum frequency range of the coaxial port
              type: number
              minimum: 0.1
              maximum: 100000
            high:
              description: maximum frequency range of the coaxial port
              type: number
              minimum: 0.1
              maximum: 100000
        channels:
          $ref: "#/components/schemas/channels"
        width:
          description: channel frequency width
          type: number
          minimum: 0.1
          maximum: 100000
        unit:
          description: frequency unit
          type: string
          enum:
          - MHz
          - GHz
    portFiberConfiguration:
      description: single fiber optic port properties
      type: object
      required:
      - mode
      properties:
        rate:
          description: maximum transmission rate
          type: integer
          minimum: 1
          maximum: 768
        unit:
          description: unit of transmission rate
          type: string
          enum:
          - Gbps
          - Tbps
        mode:
          description: |
            mode of the strand
            - `SMOF` single-mode optical fiber
            - `MMOF` multimode optical fiber
          type: string
          enum:
          - SMOF
          - MMOF
        channels:
          $ref: "#/components/schemas/channels"
        width:
          description: channel bandwith width
          type: integer
          minimum: 1
          maximum: 1000
    portState:
      description: usage state of interface port
      type: string
      enum:
      - free
      - used
      - reserved
      - faulty
    countryCode:
      description: |
        ISO 3166-1 alpha-3 three-letter country codes
        - `ABW` Aruba
        - `AFG` Afghanistan
        - `AGO` Angola
        - `AIA` Anguilla
        - `ALA` Åland Islands
        - `ALB` Albania
        - `AND` Andorra
        - `ARE` United Arab Emirates
        - `ARG` Argentina
        - `ARM` Armenia
        - `ASM` American Samoa
        - `ATA` Antarctica
        - `ATF` French Southern Territories
        - `ATG` Antigua and Barbuda
        - `AUS` Australia
        - `AUT` Austria
        - `AZE` Azerbaijan
        - `BDI` Burundi
        - `BEL` Belgium
        - `BEN` Benin
        - `BES` Bonaire, Sint Eustatius and Saba
        - `BFA` Burkina Faso
        - `BGD` Bangladesh
        - `BGR` Bulgaria
        - `BHR` Bahrain
        - `BHS` Bahamas
        - `BIH` Bosnia and Herzegovina
        - `BLM` Saint Barthélemy
        - `BLR` Belarus
        - `BLZ` Belize
        - `BMU` Bermuda
        - `BOL` Bolivia, Plurinational State of
        - `BRA` Brazil
        - `BRB` Barbados
        - `BRN` Brunei Darussalam
        - `BTN` Bhutan
        - `BVT` Bouvet Island
        - `BWA` Botswana
        - `CAF` Central African Republic
        - `CAN` Canada
        - `CCK` Cocos (Keeling) Islands
        - `CHE` Switzerland
        - `CHL` Chile
        - `CHN` China
        - `CIV` Côte d'Ivoire
        - `CMR` Cameroon
        - `COD` Congo, Democratic Republic of the
        - `COG` Congo
        - `COK` Cook Islands
        - `COL` Colombia
        - `COM` Comoros
        - `CPV` Cabo Verde
        - `CRI` Costa Rica
        - `CUB` Cuba
        - `CUW` Curaçao
        - `CXR` Christmas Island
        - `CYM` Cayman Islands
        - `CYP` Cyprus
        - `CZE` Czechia
        - `DEU` Germany
        - `DJI` Djibouti
        - `DMA` Dominica
        - `DNK` Denmark
        - `DOM` Dominican Republic
        - `DZA` Algeria
        - `ECU` Ecuador
        - `EGY` Egypt
        - `ERI` Eritrea
        - `ESH` Western Sahara
        - `ESP` ESP
        - `EST` Estonia
        - `ETH` Ethiopia
        - `FIN` Finland
        - `FJI` Fiji
        - `FLK` Falkland Islands (Malvinas)
        - `FRA` France
        - `FRO` Faroe Islands
        - `FSM` Micronesia, Federated States of
        - `GAB` Gabon
        - `GBR` United Kingdom of Great Britain and Northern Ireland
        - `GEO` Georgia
        - `GGY` Guernsey
        - `GHA` Ghana
        - `GIB` Gibraltar
        - `GIN` Guinea
        - `GLP` Guadeloupe
        - `GMB` Gambia
        - `GNB` Guinea-Bissau
        - `GNQ` Equatorial Guinea
        - `GRC` Greece
        - `GRD` Grenada
        - `GRL` Greenland
        - `GTM` Guatemala
        - `GUF` French Guiana
        - `GUM` Guam
        - `GUY` Guyana
        - `HKG` Hong Kong
        - `HMD` Heard Island and McDonald Islands
        - `HND` Honduras
        - `HRV` Croatia
        - `HTI` Haiti
        - `HUN` Hungary
        - `IDN` Indonesia
        - `IMN` Isle of Man
        - `IND` India
        - `IOT` British Indian Ocean Territory
        - `IRL` Ireland
        - `IRN` Iran, Islamic Republic of
        - `IRQ` Iraq
        - `ISL` Iceland
        - `ISR` Israel
        - `ITA` Italy
        - `JAM` Jamaica
        - `JEY` Jersey
        - `JOR` Jordan
        - `JPN` Japan
        - `KAZ` Kazakhstan
        - `KEN` Kenya
        - `KGZ` Kyrgyzstan
        - `KHM` Cambodia
        - `KIR` Kiribati
        - `KNA` Saint Kitts and Nevis
        - `KOR` Korea, Republic of
        - `KWT` Kuwait
        - `LAO` Lao People's Democratic Republic
        - `LBN` Lebanon
        - `LBR` Liberia
        - `LBY` Libya
        - `LCA` Saint Lucia
        - `LIE` Liechtenstein
        - `LKA` Sri Lanka
        - `LSO` Lesotho
        - `LTU` Lithuania
        - `LUX` Luxembourg
        - `LVA` Latvia
        - `MAC` Macao
        - `MAF` Saint Martin (French part)
        - `MAR` Morocco
        - `MCO` Monaco
        - `MDA` Moldova, Republic of
        - `MDG` Madagascar
        - `MDV` Maldives
        - `MEX` Mexico
        - `MHL` Marshall Islands
        - `MKD` North Macedonia
        - `MLI` Mali
        - `MLT` Malta
        - `MMR` Myanmar
        - `MNE` Montenegro
        - `MNG` Mongolia
        - `MNP` Northern Mariana Islands
        - `MOZ` Mozambique
        - `MRT` Mauritania
        - `MSR` Montserrat
        - `MTQ` Martinique
        - `MUS` Mauritius
        - `MWI` Malawi
        - `MYS` Malaysia
        - `MYT` Mayotte
        - `NAM` Namibia
        - `NCL` New Caledonia
        - `NER` Niger
        - `NFK` Norfolk Island
        - `NGA` Nigeria
        - `NIC` Nicaragua
        - `NIU` Niue
        - `NLD` Netherlands, Kingdom of the
        - `NOR` Norway
        - `NPL` Nepal
        - `NRU` Nauru
        - `NZL` New Zealand
        - `OMN` Oman
        - `PAK` Pakistan
        - `PAN` Panama
        - `PCN` Pitcairn
        - `PER` Peru
        - `PHL` Philippines
        - `PLW` Palau
        - `PNG` Papua New Guinea
        - `POL` Poland
        - `PRI` Puerto Rico
        - `PRK` Korea, Democratic People's Republic of
        - `PRT` Portugal
        - `PRY` Paraguay
        - `PSE` Palestine, State of
        - `PYF` French Polynesia
        - `QAT` Qatar
        - `REU` Réunion
        - `ROU` Romania
        - `RUS` Russian Federation
        - `RWA` Rwanda
        - `SAU` Saudi Arabia
        - `SDN` Sudan
        - `SEN` Senegal
        - `SGP` Singapore
        - `SGS` South Georgia and the South Sandwich Islands
        - `SHN` Saint Helena, Ascension and Tristan da Cunha
        - `SJM` Svalbard and Jan Mayen
        - `SLB` Solomon Islands
        - `SLE` Sierra Leone
        - `SLV` El Salvador
        - `SMR` San Marino
        - `SOM` Somalia
        - `SPM` Saint Pierre and Miquelon
        - `SRB` Serbia
        - `SSD` South Sudan
        - `STP` Sao Tome and Principe
        - `SUR` Suriname
        - `SVK` Slovakia
        - `SVN` Slovenia
        - `SWE` Sweden
        - `SWZ` Eswatini
        - `SXM` Sint Maarten (Dutch part)
        - `SYC` Seychelles
        - `SYR` Syrian Arab Republic
        - `TCA` Turks and Caicos Islands
        - `TCD` Chad
        - `TGO` Togo
        - `THA` Thailand
        - `TJK` Tajikistan
        - `TKL` Tokelau
        - `TKM` Turkmenistan
        - `TLS` Timor-Leste
        - `TON` Tonga
        - `TTO` Trinidad and Tobago
        - `TUN` Tunisia
        - `TUR` Türkiye
        - `TUV` Tuvalu
        - `TWN` Taiwan, Province of China
        - `TZA` Tanzania, United Republic of
        - `UGA` Uganda
        - `UKR` Ukraine
        - `UMI` United States Minor Outlying Islands
        - `URY` Uruguay
        - `USA` United States of America
        - `UZB` Uzbekistan
        - `VAT` Holy See
        - `VCT` Saint Vincent and the Grenadines
        - `VEN` Venezuela, Bolivarian Republic of
        - `VGB` Virgin Islands (British)
        - `VIR` Virgin Islands (U.S.)
        - `VNM` Viet Nam
        - `VUT` Vanuatu
        - `WLF` Wallis and Futuna
        - `WSM` Samoa
        - `YEM` Yemen
        - `ZAF` South Africa
        - `ZMB` Zambia
        - `ZWE` Zimbabwe
      enum:
      - ABW
      - AFG
      - AGO
      - AIA
      - ALA
      - ALB
      - AND
      - ARE
      - ARG
      - ARM
      - ASM
      - ATA
      - ATF
      - ATG
      - AUS
      - AUT
      - AZE
      - BDI
      - BEL
      - BEN
      - BES
      - BFA
      - BGD
      - BGR
      - BHR
      - BHS
      - BIH
      - BLM
      - BLR
      - BLZ
      - BMU
      - BOL
      - BRA
      - BRB
      - BRN
      - BTN
      - BVT
      - BWA
      - CAF
      - CAN
      - CCK
      - CHE
      - CHL
      - CHN
      - CIV
      - CMR
      - COD
      - COG
      - COK
      - COL
      - COM
      - CPV
      - CRI
      - CUB
      - CUW
      - CXR
      - CYM
      - CYP
      - CZE
      - DEU
      - DJI
      - DMA
      - DNK
      - DOM
      - DZA
      - ECU
      - EGY
      - ERI
      - ESH
      - ESP
      - EST
      - ETH
      - FIN
      - FJI
      - FLK
      - FRA
      - FRO
      - FSM
      - GAB
      - GBR
      - GEO
      - GGY
      - GHA
      - GIB
      - GIN
      - GLP
      - GMB
      - GNB
      - GNQ
      - GRC
      - GRD
      - GRL
      - GTM
      - GUF
      - GUM
      - GUY
      - HKG
      - HMD
      - HND
      - HRV
      - HTI
      - HUN
      - IDN
      - IMN
      - IND
      - IOT
      - IRL
      - IRN
      - IRQ
      - ISL
      - ISR
      - ITA
      - JAM
      - JEY
      - JOR
      - JPN
      - KAZ
      - KEN
      - KGZ
      - KHM
      - KIR
      - KNA
      - KOR
      - KWT
      - LAO
      - LBN
      - LBR
      - LBY
      - LCA
      - LIE
      - LKA
      - LSO
      - LTU
      - LUX
      - LVA
      - MAC
      - MAF
      - MAR
      - MCO
      - MDA
      - MDG
      - MDV
      - MEX
      - MHL
      - MKD
      - MLI
      - MLT
      - MMR
      - MNE
      - MNG
      - MNP
      - MOZ
      - MRT
      - MSR
      - MTQ
      - MUS
      - MWI
      - MYS
      - MYT
      - NAM
      - NCL
      - NER
      - NFK
      - NGA
      - NIC
      - NIU
      - NLD
      - NOR
      - NPL
      - NRU
      - NZL
      - OMN
      - PAK
      - PAN
      - PCN
      - PER
      - PHL
      - PLW
      - PNG
      - POL
      - PRI
      - PRK
      - PRT
      - PRY
      - PSE
      - PYF
      - QAT
      - REU
      - ROU
      - RUS
      - RWA
      - SAU
      - SDN
      - SEN
      - SGP
      - SGS
      - SHN
      - SJM
      - SLB
      - SLE
      - SLV
      - SMR
      - SOM
      - SPM
      - SRB
      - SSD
      - STP
      - SUR
      - SVK
      - SVN
      - SWE
      - SWZ
      - SXM
      - SYC
      - SYR
      - TCA
      - TCD
      - TGO
      - THA
      - TJK
      - TKL
      - TKM
      - TLS
      - TON
      - TTO
      - TUN
      - TUR
      - TUV
      - TWN
      - TZA
      - UGA
      - UKR
      - UMI
      - URY
      - USA
      - UZB
      - VAT
      - VCT
      - VEN
      - VGB
      - VIR
      - VNM
      - VUT
      - WLF
      - WSM
      - YEM
      - ZAF
      - ZMB
      - ZWE
    languageCode:
      description: |
        Interntational language code
        - `aa` Afar (aar)
        - `ab` Abkhaz (abk)
        - `ae` Avestan (ave)
        - `af` Afrikaans (afr)
        - `ak` Akan (aka)
        - `am` Amharic (amh)
        - `an` Aragonese (arg)
        - `ar` Arabic (ara)
        - `as` Assamese (asm)
        - `av` Avaric (ava)
        - `ay` Aymara (aym)
        - `az` Azerbaijani (aze)
        - `ba` Bashkir (bak)
        - `be` Belarusian (bel)
        - `bg` Bulgarian (bul)
        - `bh` Bihari (bih)
        - `bi` Bislama (bis)
        - `bm` Bambara (bam)
        - `bn` Bengali (ben)
        - `bo` Tibetan (bod, tib)
        - `br` Breton (bre)
        - `bs` Bosnian (bos)
        - `ca` Catalan (cat)
        - `ce` Chechen (che)
        - `ch` Chamorro (cha)
        - `co` Corsican (cos)
        - `cr` Cree (cre)
        - `cs` Czech (ces, cze)
        - `cu` Church Slavonic (chu)
        - `cv` Chuvash (chv)
        - `cy` Welsh (cym, wel)
        - `da` Danish (dan)
        - `de` German (deu, ger)
        - `dv` Dhivehi (div)
        - `dz` Dzongkha (dzo)
        - `ee` Ewe (ewe)
        - `el` Greek (ell, gre)
        - `en` English (eng)
        - `eo` Esperanto (epo)
        - `es` Spanish (spa)
        - `et` Estonian (est)
        - `eu` Basque (eus, baq)
        - `fa` Persian (fas, per)
        - `ff` Fula (ful)
        - `fi` Finnish (fin)
        - `fj` Fijian (fij)
        - `fo` Faroese (fao)
        - `fr` French (fra, fre)
        - `fy` West Frisian (fry)
        - `ga` Irish (gle)
        - `gd` Scottish Gaelic (gla)
        - `gl` Galician (glg)
        - `gn` Guaraní (grn)
        - `gu` Gujarati (guj)
        - `gv` Manx (glv)
        - `ha` Hausa (hau)
        - `he` Hebrew (heb)
        - `hi` Hindi (hin)
        - `ho` Hiri Motu (hmo)
        - `hr` Croatian (hrv)
        - `ht` Haitian (hat)
        - `hu` Hungarian (hun)
        - `hy` Armenian (hye, arm)
        - `hz` Herero (her)
        - `ia` Interlingua (ina)
        - `id` Indonesian (ind)
        - `ie` Interlingue (ile)
        - `ig` Igbo (ibo)
        - `ii` Nuosu (iii)
        - `ik` Inupiaq (ipk)
        - `io` Ido (ido)
        - `is` Icelandic (isl, ice)
        - `it` Italian (ita)
        - `iu` Inuktitut (iku)
        - `ja` Japanese (jpn)
        - `jv` Javanese (jav)
        - `ka` Georgian (kat, geo)
        - `kg` Kongo (kon)
        - `ki` Kikuyu (kik)
        - `kj` Kwanyama (kua)
        - `kk` Kazakh (kaz)
        - `kl` Kalaallisut (kal)
        - `km` Khmer (khm)
        - `kn` Kannada (kan)
        - `ko` Korean (kor)
        - `kr` Kanuri (kau)
        - `ks` Kashmiri (kas)
        - `ku` Kurdish (kur)
        - `kv` Komi (kom)
        - `kw` Cornish (cor)
        - `ky` Kyrgyz (kir)
        - `la` Latin (lat)
        - `lb` Luxembourgish (ltz)
        - `lg` Ganda (lug)
        - `li` Limburgish (lim)
        - `ln` Lingala (lin)
        - `lo` Lao (lao)
        - `lt` Lithuanian (lit)
        - `lu` Luba-Katanga (lub)
        - `lv` Latvian (lav)
        - `mg` Malagasy (mlg)
        - `mh` Marshallese (mah)
        - `mi` Māori (mir, mao)
        - `mk` Macedonian (mkd, mac)
        - `ml` Malayalam (mal)
        - `mn` Mongolian (mon)
        - `mr` Marathi (mar)
        - `ms` Malay (msa, may)
        - `mt` Maltese (mlt)
        - `my` Burmese (may, bur)
        - `na` Nauru (nau)
        - `nb` Norwegian Bokmål (nob)
        - `nd` Northern Ndebele (nde)
        - `ne` Nepali (nep)
        - `ng` Ndonga (ndo)
        - `nl` Dutch (nld, dut)
        - `nn` Norwegian Nynorsk (nno)
        - `nr` Southern Ndebele (nbl)
        - `nv` Navajo (nav)
        - `ny` Chichewa (nya)
        - `oc` Occitan (oci)
        - `oj` Ojibwe (oji)
        - `om` Oromo (orm)
        - `or` Oriya (ori)
        - `os` Ossetian (oss)
        - `pa` Punjabi (pan)
        - `pi` Pāli (pli)
        - `pl` Polish (pol)
        - `ps` Pashto (pus)
        - `pt` Portuguese (por)
        - `qu` Quechua (que)
        - `rm` Romansh (roh)
        - `rn` Kirundi (run)
        - `ro` Romanian (ron, rum)
        - `ru` Russian (run)
        - `rw` Kinyarwanda (kin)
        - `sa` Sanskrit (san)
        - `sc` Sardinian (srd)
        - `sd` Sindhi (snd)
        - `se` Northern Sami (sme)
        - `sg` Sango (sag)
        - `si` Sinhala (sin)
        - `sk` Slovak (slk, slo)
        - `sl` Slovene (slv)
        - `sm` Samoan (smo)
        - `sn` Shona (sna)
        - `so` Somali (som)
        - `sq` Albanian (sqi, alb)
        - `sr` Serbian (srp)
        - `ss` Swati (ssw)
        - `st` Southern Sotho (sot)
        - `su` Sundanese (sun)
        - `sv` Swedish (swe)
        - `sw` Swahili (swa)
        - `ta` Tamil (tam)
        - `te` Telugu (tel)
        - `tg` Tajik (tgk)
        - `th` Thai (tha)
        - `ti` Tigrinya (tir)
        - `tk` Turkmen (tuk)
        - `tl` Tagalog (tgl)
        - `tn` Tswana (tsn)
        - `to` Tongan (ton)
        - `tr` Turkish (tur)
        - `ts` Tsonga (tso)
        - `tt` Tatar (tat)
        - `tw` Twi (twi)
        - `ty` Tahitian (tah)
        - `ug` Uighur (uig)
        - `uk` Ukrainian (ukr)
        - `ur` Urdu (urd)
        - `uz` Uzbek (uzb)
        - `ve` Venda (ven)
        - `vi` Vietnamese (vie)
        - `vo` Volapük (vol)
        - `wa` Walloon (wln)
        - `wo` Wolof (wol)
        - `xh` Xhosa (xho)
        - `yi` Yiddish (yid)
        - `yo` Yoruba (yor)
        - `za` Zhuang (zha)
        - `zh` Chinese (zho, chi)
        - `zu` Zulu (zul)
      type: string
      default: en
      enum:
      - aa
      - ab
      - ae
      - af
      - ak
      - am
      - an
      - ar
      - as
      - av
      - ay
      - az
      - ba
      - be
      - bg
      - bh
      - bi
      - bm
      - bn
      - bo
      - br
      - bs
      - ca
      - ce
      - ch
      - co
      - cr
      - cs
      - cu
      - cv
      - cy
      - da
      - de
      - dv
      - dz
      - ee
      - el
      - en
      - eo
      - es
      - et
      - eu
      - fa
      - ff
      - fi
      - fj
      - fo
      - fr
      - fy
      - ga
      - gd
      - gl
      - gn
      - gu
      - gv
      - ha
      - he
      - hi
      - ho
      - hr
      - ht
      - hu
      - hy
      - hz
      - ia
      - id
      - ie
      - ig
      - ii
      - ik
      - io
      - is
      - it
      - iu
      - ja
      - jv
      - ka
      - kg
      - ki
      - kj
      - kk
      - kl
      - km
      - kn
      - ko
      - kr
      - ks
      - ku
      - kv
      - kw
      - ky
      - la
      - lb
      - lg
      - li
      - ln
      - lo
      - lt
      - lu
      - lv
      - mg
      - mh
      - mi
      - mk
      - ml
      - mn
      - mr
      - ms
      - mt
      - my
      - na
      - nb
      - nd
      - ne
      - ng
      - nl
      - nn
      - nr
      - nv
      - ny
      - oc
      - oj
      - om
      - or
      - os
      - pa
      - pi
      - pl
      - ps
      - pt
      - qu
      - rm
      - rn
      - ro
      - ru
      - rw
      - sa
      - sc
      - sd
      - se
      - sg
      - si
      - sk
      - sl
      - sm
      - sn
      - so
      - sq
      - sr
      - ss
      - st
      - su
      - sv
      - sw
      - ta
      - te
      - tg
      - th
      - ti
      - tk
      - tl
      - tn
      - to
      - tr
      - ts
      - tt
      - tw
      - ty
      - ug
      - uk
      - ur
      - uz
      - ve
      - vi
      - vo
      - wa
      - wo
      - xh
      - yi
      - yo
      - za
      - zh
      - zu
    areaType:
      description: |
        - `residential`
        - `rural`
        - `industrial`
        - `mixed` - combination of residential/industrial/commercial.
        - `psz` - Public Safety Zone
        - `urban` 
        - `unclassified` - not recorded or known
      type: string
      default: unclassified
      enum:
      - residential
      - rural
      - industrial
      - commercial
      - mixed
      - psz
      - urban
      - unclassified
    delete:
      description: |
        MNI internal metadata field to indicate record is marked for deletion
      type: boolean
      default: false
    source:
      description: |
        MNI internal metadata field used to determine if value was supplied or
        generated via machine learning predictive algorithms
        - `historical` - value was supplied
        - `predicted` - value was generated
      type: string
      enum:
      - historical
      - predicted
      default: historical
    searchResourceType:
      description: |
        internal MNI resource type to search, *note*: `*` will perform the search across all supported resource types
      type: string
      enum:
      - adminEmail
      - adminKafka
      - adminMap
      - adminWorkflow
      - alert
      - cable
      - currency
      - cve
      - duct
      - ne
      - pole
      - rack
      - service
      - site
      - trench
      - "*"
    siteType:
      description: |
        - `street` - various street furniture options
        - `exchange` - district/town exchange building etc.
        - `pop` - point of presence
        - `dc` - data center
        - `colo` - colocation
        - `unclassified` - not recorded or known
      type: string
      default: unclassified
      enum:
      - street
      - exchange
      - pop
      - dc
      - colo
      - unclassified
    cableConfiguration:
      description: |
        configuration of the cable, *note*: technology specific
      oneOf:
      - $ref: "#/components/schemas/cableSingleFiberConfiguration"
      - $ref: "#/components/schemas/cableMultiFiberConfiguration"
      - $ref: "#/components/schemas/cableCoaxConfiguration"
      - $ref: "#/components/schemas/cableCopperConfiguration"
      - $ref: "#/components/schemas/cableEthernetConfiguration"
    cableCopperConfiguration:
      description: copper cable properties
      type: object
      required:
      - category
      - rate
      - unit
      properties:
        twistedPairs:
          description: number of twisted-pairs within the cable
          type: integer
          minimum: 1
          maximum: 48
          default: 7
    cableEthernetConfiguration:
      description: ethernet cable properties
      type: object
      required:
      - category
      - rate
      - unit
      properties:
        category:
          type: string
          enum:
          - Cat3
          - Cat4
          - Cat5
          - Cat5e
          - Cat6
          - Cat6A
          - Cat7
          - Cat8
          default: Cat6A
        rate:
          description: maximum transmission rate
          type: integer
          minimum: 1
          maximum: 768
          default: 10
        unit:
          description: unit of transmission rate
          type: string
          enum:
          - Mbps
          - Gbps
          - Tbps
          default: Gbps
    cableCoaxConfiguration:
      description: coaxial cable properties
      type: object
      required:
      - frequencyRange
      - channels
      - width
      - unit
      properties:
        frequencyRange:
          type: object
          required:
          - low
          - high
          properties:
            low:
              description: minimum frequency range of the coaxial cable
              type: number
              minimum: 0.1
              maximum: 100000
            high:
              description: maximum frequency range of the coaxial cable
              type: number
              minimum: 0.1
              maximum: 100000
        channels:
          $ref: "#/components/schemas/channels"
        width:
          description: channel frequency width
          type: number
          minimum: 0.1
          maximum: 100000
        unit:
          description: frequency unit
          type: string
          enum:
          - MHz
          - GHz
    cableSingleFiberConfiguration:
      description: single fiber optic cable properties
      type: object
      required:
      - strands
      - mode
      properties:
        strands:
          $ref: "#/components/schemas/strands"
          default: 1
        mode:
          description: |
            mode of the strand
            - `SMOF` single-mode optical fiber
            - `MMOF` multimode optical fiber
          type: string
          enum:
          - SMOF
          - MMOF
        channels:
          $ref: "#/components/schemas/channels"
        width:
          description: channel bandwith width
          type: integer
          minimum: 1
          maximum: 1000
        unit:
          description: bandwidth unit
          type: string
          enum:
          - Gbps
          - Tbps
          default: Gbps
    cableMultiFiberConfiguration:
      description: multi-fiber optic cable properties
      type: object
      required:
      - ribbons
      - strands
      - mode
      properties:
        ribbons:
          $ref: "#/components/schemas/ribbons"
          default: 1
        strands:
          $ref: "#/components/schemas/strands"
          default: 1
        mode:
          description: |
            mode of the strand
            - `SMOF` single-mode optical fiber
            - `MMOF` multimode optical fiber
          type: string
          enum:
          - SMOF
          - MMOF
        channels:
          $ref: "#/components/schemas/channels"
        width:
          description: channel bandwith width
          type: integer
          minimum: 1
          maximum: 1000
        unit:
          description: bandwidth unit
          type: string
          enum:
          - Gbps
          - Tbps
          default: Gbps
    cableState:
      description: usage state of cable
      type: string
      enum:
      - free
      - used
      - reserved
      - faulty
    cableCapacityState:
      description: |
        State capacity for cables
      oneOf:
      - $ref: "#/components/schemas/cableSingleFiberCapacityState"
      - $ref: "#/components/schemas/cableMultiFiberCapacityState"
      - $ref: "#/components/schemas/cableCoaxCapacityState"
      - $ref: "#/components/schemas/cableEthernetCapacityState"
    cableSingleFiberCapacityState:
      description: |
        State capacity for single fiber optic cable
      type: array
      items:
        type: object
        properties:
          cableId:
            $ref: "#/components/schemas/cableId"
          ductId:
            $ref: "#/components/schemas/ductId"
          technology:
            $ref: "#/components/schemas/cableTechnology"
          capacity:
            type: array
            items:
              type: object
              properties:
                period:
                  $ref: "#/components/schemas/datePeriod"
                strands:
                  type: array
                  items:
                    type: object
                    properties:
                      strand:
                        $ref: "#/components/schemas/strand"
                      state:
                        $ref: "#/components/schemas/cableState"
    cableMultiFiberCapacityState:
      description: |
        State capacity for multi-fiber optic cable
      type: array
      items:
        type: object
        properties:
          cableId:
            $ref: "#/components/schemas/cableId"
          ductId:
            $ref: "#/components/schemas/ductId"
          technology:
            $ref: "#/components/schemas/cableTechnology"
          capacity:
            type: array
            items:
              type: object
              properties:
                period:
                  $ref: "#/components/schemas/datePeriod"
                ribbons:
                  type: array
                  items:
                    type: object
                    properties:
                      ribbon:
                        $ref: "#/components/schemas/ribbon"
                      strands:
                        type: array
                        items:
                          type: object
                          properties:
                            strand:
                              $ref: "#/components/schemas/strand"
                            state:
                              $ref: "#/components/schemas/cableState"
    cableCoaxCapacityState:
      description: |
        State capacity for coaxial cable
      type: array
      items:
        type: object
        properties:
          cableId:
            $ref: "#/components/schemas/cableId"
          ductId:
            $ref: "#/components/schemas/ductId"
          technology:
            $ref: "#/components/schemas/cableTechnology"
          capacity:
            type: array
            items:
              type: object
              properties:
                period:
                  $ref: "#/components/schemas/datePeriod"
                state:
                  $ref: "#/components/schemas/cableState"
    cableEthernetCapacityState:
      description: |
        State capacity for ethernet cable
      type: array
      items:
        type: object
        properties:
          cableId:
            $ref: "#/components/schemas/cableId"
          ductId:
            $ref: "#/components/schemas/ductId"
          technology:
            $ref: "#/components/schemas/cableTechnology"
          capacity:
            type: array
            items:
              type: object
              properties:
                period:
                  $ref: "#/components/schemas/datePeriod"
                state:
                  $ref: "#/components/schemas/cableState"
    cableTechnology:
      description: technology domain of cable
      type: string
      enum:
      - coax
      - copper
      - ethernet
      - singleFiber
      - multiFiber
    ductState:
      description: |
        state of duct
      type: string
      enum:
      - free
      - used
      - reserved
      - faulty
    ductPurpose:
      description: |
        intended contents of the duct, *note*: `cable` means telecommunications cables including `coax`,`copper` for twisted-pair copper cable,`ethernet`,`fiber` etc.
      type: string
      enum:
      - gas
      - power
      - cable
      - water
    ductSizeCategory:
      description: |
        size classification of the duct
      type: string
      enum:
      - duct
      - microduct
      - subduct
    ductConfiguration:
      description: |
        1/2/3/5/6/7/8/10/12/14/19/24-way (etc.) type of duct bundle
      type: integer
      minimum: 1
      maximum: 48
      default: 1
    polePurpose:
      description: |
        intended purpose of the contents carried between (telegraph) poles
      type: string
      enum:
      - service/drop
      - link
      - backhaul
      - unclassified
    managementProtocol:
      description: |
        protocol used to read and/or write the configuration or operational state of the network equipment
      type: string
      enum:
      - https
      - netconf
      - snmp
      - ssh
      - telnet
      - none
      default: none
    secretScope:
      description: scope identifier of the authorization credential
      type: string
    secretRealm:
      type: string
      description: realm identifier of the authorization credential
    secretType:
      description: |
        type of the authorization credential that is to be managed, *note*:
        - `identity` for OAuth2.0/OIDC style secrets
        - `plain` for simple username/password style secrets
        - `snmp` for v1, v2c and v3c SNMP style secrets
        - `ssh` for SSH key-based with optional certificate style secrets
        - `token` for RESTful style API authorization style secrets
      type: string
      enum:
      - identity
      - plain
      - snmp
      - ssh
      - ssl
      - token
    secretIdentity:
      description: OpenID/OAuth style credential
      type: object
      required:
      - scope
      - realm
      - type
      - identity
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        identity:
          type: object
          required:
          - base
          - authorization
          - token
          - wellKnown
          properties:
            base:
              type: string
              format: url
              description: base URL
            authorization:
              type: string
              format: uri
              description: authorization endpoint
            token:
              type: string
              format: uri
              description: access token endpoint
            wellKnown:
              type: string
              format: uri
              description: RFC8414 authorization server metadata
            expiration:
              $ref: "#/components/schemas/dateTime"
    secretPlain:
      description: Plain username/password style credential
      type: object
      required:
      - scope
      - realm
      - type
      - plain
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        plain:
          type: object
          required:
          - username
          - password
          properties:
            username:
              type: string
              description: username
            password:
              type: string
              format: password
              description: password
            expiration:
              $ref: "#/components/schemas/dateTime"
    secretSnmpV1V2c:
      description: SNMP v1 or v2c style credential
      type: object
      required:
      - scope
      - realm
      - type
      - snmp
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        snmp:
          type: object
          required:
          - version
          - community
          properties:
            version:
              $ref: "#/components/schemas/snmpVersion"
            expiration:
              $ref: "#/components/schemas/dateTime"
            community:
              type: object
              required:
              - read
              - write
              - trap
              properties:
                read:
                  type: string
                  default: public
                write:
                  type: string
                  default: public
                trap:
                  type: string
                  default: public
    secretSnmpV3:
      description: SNMP v3 style credential
      type: object
      required:
      - scope
      - realm
      - type
      - snmp
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        snmp:
          type: object
          required:
          - version
          - username
          - authorization
          - encryption
          properties:
            version:
              $ref: "#/components/schemas/snmpVersion"
            expiration:
              $ref: "#/components/schemas/dateTime"
            username:
              type: string
            authorization:
              type: object
              required:
              - protocol
              - password
              properties:
                protocol:
                  $ref: "#/components/schemas/snmpAuthorizationProtocol"
                password:
                  type: string
                  format: password
            encryption:
              type: object
              required:
              - protocol
              - password
              properties:
                protocol:
                  $ref: "#/components/schemas/snmpEncryptionProtocol"
                password:
                  type: string
                  format: password
    snmpVersion:
      description: |
        SNMP version, *note*: `v1` and `v2c` use community strings, where as `v3` uses authorization and encryption protocols for authentication
      type: string
      enum:
      - v1
      - v2c
      - v3
    snmpAuthorizationProtocol:
      description: SNMP v3 authorization protocol
      type: string
      enum:
      - MD5
      - SHA
    snmpEncryptionProtocol:
      description: SNMP v3 encryption protocol
      type: string
      enum:
      - DES
      - AES-128
    secretSsh:
      description: SSH style credential with optional host certificate authority (CA)
      type: object
      required:
      - scope
      - realm
      - type
      - ssh
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        ssh:
          type: object
          required:
          - username
          - key
          properties:
            username:
              type: string
              description: username
            passphrase:
              type: string
              format: password
              description: password
            expiration:
              $ref: "#/components/schemas/dateTime"
            key:
              type: object
              required:
              - private
              - public
              properties:
                private:
                  type: string
                public:
                  type: string
                hostCA:
                  description: non binary certificate
                  type: string
    secretSsl:
      description: SSL style credential
      type: object
      required:
      - scope
      - realm
      - type
      - ssl
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        ssl:
          type: object
          required:
          - private
          properties:
            private:
              type: string
              format: Base64
              description: non binary Base64 encoded PKCS#12 or PEM certificate
            ca:
              type: string
              format: password
              description: optional non binary Base64 encoded certificate authority (CA)
            expiration:
              $ref: "#/components/schemas/dateTime"
    secretToken:
      description: RESTful API style token credential
      type: object
      required:
      - scope
      - realm
      - type
      - token
      properties:
        scope:
          $ref: "#/components/schemas/secretScope"
        realm:
          $ref: "#/components/schemas/secretRealm"
        type:
          $ref: "#/components/schemas/secretType"
        token:
          type: object
          required:
          - key
          properties:
            key:
              type: string
            identity:
              type: string
            expiration:
              $ref: "#/components/schemas/dateTime"
    serviceType:
      description: |
        intended offering of the suppplied service, *note*: 
          - `broadband` includes residential offerings such as xDSL and DOCSIS
          - `sogea` is Single Order Generic Ethernet Access which is replacing traditional broadband offerings
          - `fttx` includes FTTC, FTTH, FTTP andd other variants
          - `ethernet` is wholesale or enterprise point-to-point ethernet connectivity
          - `optical` is layer 1 connectivity
          - `voice` is the traditional required extra voice telephony service offered with `broadband`
      type: string
      enum:
      - broadband
      - circuit
      - ethernet
      - fttx
      - optical
      - sogea
      - unclassified
      - voice
    trenchPurpose:
      description: |
        intended purpose of the contents of the trench
      type: string
      enum:
      - backhaul
      - pole
      - ring
      - service/drop
      - tower
      - unclassified
    rackSlots:
      description: |
        number of physical slots in the rack, 1=1U, 42=42U etc.
      type: integer
      minimum: 1
      maximum: 58
      default: 42
    rackSlotUsage:
      description: usage of specific rack slot
      type: string
      enum:
      - free
      - used
      - reserved
      - faulty
      - predicted
    alertId:
      description: internal alert identifier
      type: string
      format: uuid
    alertContentId:
      description: internal alert content identifier
      type: string
      format: uuid
    cveId:
      description: external CVE identifier
      type: string
      pattern: 'CVE-[0-9]{4}-[0-9]{4,}'
    ductId:
      description: internal duct identifier
      type: string
      format: uuid
    cableId:
      description: internal cable identifier
      type: string
      format: uuid
    channels:
      description: maximum number of channels within the frequency range
      type: integer
      minimum: 1
      maximum: 512
    channel:
      description: channel number within the frequency range
      type: integer
      minimum: 1
      maximum: 512
    ribbons:
      description: ribbons within fiber optic cable
      type: integer
      minimum: 1
      maximum: 36
    ribbon:
      description: fiber optic cable ribbon number
      type: integer
      minimum: 1
      maximum: 36
    strands:
      description: strands within each ribbon of the fiber optic cable
      type: number
      format: integer
      minimum: 1
      maximum: 48
    strand:
      description: fiber optic cable strand number
      type: integer
      minimum: 1
      maximum: 48
    emailProviderId:
      description: internal email provider identifier
      type: string
      format: uuid
    emailSend:
      description: outbound host, credentials and protocol used to send email
      type: object
      properties:
        username:
          description: username of used to send email against, typically the assigned email address itself
          type: string
          format: uri
        password:
          description: password, application specific passphrase or other passphrase used to authenticate with the receiving service
          type: string
          format: password
        host:
          type: string
          format: hostname
        port:
          type: integer
          minimum: 1
          maximum: 65535
          default: 465
        protocol:
          type: string
          enum:
          - smtp
          default: smtp
        authentication:
          description: authentication method to used
          type: string
          enum:
          - PLAIN
          - AUTH
          - GSSAPI
          - DIGEST-MD5
          - MD5
          - CRAM-MD5
          - OAUTH10A
          - OAUTHBEARER
          - XOAUTH2
          default: PLAIN
        encryption:
          description: SSL/TLS Encryption
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            starttls:
              type: boolean
              default: false
    emailReceive:
      description: inbound host, credentials and protocol used to receive email
      type: object
      properties:
        username:
          description: username of used to send email against, typically the assigned email address itself
          type: string
          format: uri
        password:
          description: password, application specific passphrase or other passphrase used to authenticate with the receiving service
          type: string
          format: password
        host:
          type: string
          format: hostname
        port:
          type: integer
          minimum: 1
          maximum: 65535
          default: 993
        protocol:
          type: string
          enum:
          - imap4
          default: imap4
        encryption:
          description: SSL/TLS Encryption
          type: object
          properties:
            enabled:
              type: boolean
              default: true
            starttls:
              type: boolean
              default: false
        rootFolder:
          description: |
            Root folder or IMAP path prefix of the specified email account,**warning**: only specify if the host provider provides explicit instructions to do so
          type: string
        folderSeparator:
          description: |
            folder separator, **warning**: only include if the host provider provides explicit instructions to do so
          type: string
          enum:
          - /
          - .
          default: /
    mapProviderId:
      description: internal map provider identifier
      type: string
      format: uuid
    mapVendorPlatform:
      description: supported map vendor platforms
      type: string
      enum:
      - OpenStreet Map
      - Google Maps
      - Microsoft Azure
      - ERSI
    requestorId:
      description: unique identifier of the requesting originator
      type: string
      format: uuid
    serviceId:
      description: internal service identifier
      type: string
      format: uuid
    siteId:
      description: internal site identifier
      type: string
      format: uuid
    sizeUnit:
      description: |
        unit of measure of the dimension:
        - `cm` metric centimetres
        - `mm` metric millimetres
        - `m` metric metres
        - `km` meric kilometres
        - `Mm` metric megametres
        - `inch` imperial inches
        - `feet` imperial feet
      type: string
      enum:
      - cm
      - mm
      - m
      - km
      - Mm
      - inch
      - feet
    poleId:
      description: internal pole identifier
      type: string
      format: uuid
    poleState:
      description: |
        state of (telegraph) pole
      type: string
      enum:
      - free
      - used
      - reserved
    rackId:
      description: internal (telegraph) pole identifier
      type: string
      format: uuid
    rackSlotPosition:
      description: comma separated rack slot number in the range 1..58
      type: string
      pattern: '([1-9]|[1-4][0-9]|5[0-8])+(,([1-9]|[1-4][0-9]|5[0-8]))?'
    neId:
      description: internal network equipment identifier
      type: string
      format: uuid
    kafkaProducerId:
      description: internal stream broker identifier of the Kafka broker
      type: string
      format: uuid
    kafkaProducer:
      description: outbound host, credentials and protocol used to send stream
      type: object
      properties:
        username:
          description: username
          type: string
        password:
          description: password, application specific passphrase or other passphrase used to authenticate with the receiving service
          type: string
          format: password
        host:
          type: string
          format: hostname
        port:
          description: |
            port number of Kafka broker
            - `9092` standard port
            - `9093` standard TLS encrypted port
            - `9094` TLS encrypted port on AWS Managed Streaming for Apache Kafka
          type: number
          minimum: 1
          maximum: 65535
          default: 9092
        retryDelay:
          type: integer
          minimum: 0
          default: 10000
        retries:
          type: integer
          minimum: 0
          maximum: 8
          default: 2
        acks:
          description: |
            When the Kafka producer (i.e. MNI) waits for acknowledgement to prevent data loss.
            - `all` producer gets acknowledgement when all in-sync replicas have received record
            - `leader` producer gets acknowledgement after leader received record
            - `none` producer never gets acknowledgement
          type: string
          enum:
          - all
          - leader
          - none
          default: leader
        linger:
          description: time to wait in milliseconds before sending current batch
          type: integer
          minimum: 0
          default: 0
        batchSize:
          description: max size of each batch of records in megabytes (MB)
          type: integer
          minimum: 1
          default: 16
        bufferMemory:
          description: size of memory in megabytes (MB) to use per buffer
          type: integer
          minimum: 1
          default: 32
        maxInflightRequestsPerConnection:
          type: integer
          minimum: 1
          maximum: 255
          default: 5
        compressionMethod:
          description: |
            *note*: `lz4` and `snappy` compression codecs are not supported
          type: string
          enum:
          - none
          - gzip
          default: none
        authentication:
          description: authentication method to use
          type: string
          enum:
          - none
          - basic
          - digest
          - plaintext
          - sasl_ssl
          - sasl_plain
          default: none
    subscriptionId:
      description: |
        unique alert subscription identifier for the subscribing endpoint - this is required to unsubscribe from the alert
      type: string
      format: uuid
    trenchId:
      description: internal trench identifier
      type: string
      format: uuid
    trenchState:
      description: |
        state of trench
      type: string
      enum:
      - free
      - used
      - reserved
    workflowEngine:
      description: workflow engine host, credentials etc.
      type: object
      properties:
        username:
          description: username of to connect to engine
          type: string
        password:
          description: service password, application specific passphrase or other passphrase used to authenticate with the workflow engine
          type: string
          format: password
        url:
          type: string
          format: url
        type:
          $ref: "#/components/schemas/workflowEngineType"
          default: bpmn
    flowName:
      description: external identifier or name of the workflow
      type: string
    workflowEngineId:
      description: internal identifier of the workflow engine
      type: string
      format: uuid
    workflowEngineType:
      description: classification of the workflow engine
      type: string
      enum:
      - bpmn
      - elsa
    vlanId:
      description: |
        Virtual LAN (VLAN) identifier, *note*: values `0` and `4095` are generanlly considered reserved.
        - `C-VLAN` also known as Customer VLAN identifier
        - `S-VLAN` alsp known as Service Provider VLAN identifier
      type: integer
      minimum: 0
      maximum: 4095
      default: 0
    vxlanId:
      description: |
        Virtual Exensible LAN (VXLAN) identifier, *note*: values `0` and `4095` are generanlly considered reserved
      type: integer
      minimum: 4096
      maximum: 16777215
      default: 0
  parameters:
    pageSize:
      name: pageSize
      description: pagination page size
      in: query
      required: false
      schema:
        type: integer
        minimum: 8
        maximum: 128
    pageNumber:
      name: pageNumber
      description: pagination page number
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
    channel:
      name: channel
      description: channel number within the frequency range
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 512
    ribbon:
      name: ribbon
      description: fiber optic cable ribbon number
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 36
    strand:
      name: strand
      description: fiber optic cable strand number
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 48
    dateTime:
      name: point
      in: query
      required: false
      description: |
        MNI date format in compressed ISO-8601. (`YYYYMMDDThhmmss`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - literal `T` time start indicator
        - `hh` 2-digit hours (with leading zero if < 10)
        - `mm` 2-diigt minutes (with leading zero if < 10)
        - `ss` 2-digit seconds (with leading zero if < 10)
        - example:
          - `20241118T150800` 18-NOV-2024 15:08:00
      schema:
        type: string
        pattern: '^\d{8}T\d{6}$'
        minLength: 15
        maxLength: 15
    dateFrom:
      name: from
      in: query
      required: false
      description: |
        range start date format in compressed ISO-8601. (`YYYYMMDD`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - example:
          - `20241118` 18-NOV-2024
      schema:
        type: string
        pattern: '^\d{8}$'
        minLength: 8
        maxLength: 8
    dateTo:
      name: to
      in: query
      required: false
      description: |
        range end date format in compressed ISO-8601. (`YYYYMMDD`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - example:
          - `20241118` 18-NOV-2024
      schema:
        type: string
        pattern: '^\d{8}$'
        minLength: 8
        maxLength: 8
    dateBefore:
      name: before
      in: query
      required: false
      description: |
        before date format in compressed ISO-8601. (`YYYYMMDD`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - example:
          - `20241118` 18-NOV-2024
      schema:
        type: string
        pattern: '^\d{8}$'
        minLength: 8
        maxLength: 8
    dateAfter:
      name: after
      in: query
      required: false
      description: |
        after date format in compressed ISO-8601. (`YYYYMMDD`)
        - `YYYY` 4-digit year
        - `MM` 2-digit month (with leading zeros < 10)
        - `DD` 2-digit day (with leading zeros if < 10)
        - example:
          - `20241118` 18-NOV-2024
      schema:
        type: string
        pattern: '^\d{8}$'
        minLength: 8
        maxLength: 8
    secretScope:
      name: scope
      in: path
      required: true
      description: scope identifier of the authorization credential
      schema:
        type: string
    secretRealm:
      name: realm
      in: path
      required: true
      description: realm identifier of the authorization credential
      schema:
        type: string
    secretType:
      name: type
      description: |
        type of the authorization credential that is to be managed, *note*:
        - `identity` for OAuth2.0/OIDC style secrets
        - `plain` for simple username/password style secrets
        - `snmp` for v1, v2c and v3c SNMP style secrets
        - `ssh` for SSH key-based with optional certificate style secrets
        - `token` for RESTful style API authorization style secrets
      in: path
      required: true
      schema:
        type: string
        enum:
        - identity
        - plain
        - snmp
        - ssh
        - ssl
        - token
    aggregationUnit:
      name: aggregate
      in: query
      required: true
      description: unit of measure of the aggregation factor
      schema:
        type: string
        enum:
        - day
        - week
        - month
        - quarter
        - half-year
        - year
    qId:
      name: qId
      description: internal prediction queue identifier
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
    alertId:
      name: alertId
      description: internal alert identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    alertContentId:
      name: alertContentId
      description: internal alert content identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    currencyId:
      name: currencyId
      description: internal currency identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    cveId:
      name: cveId
      description: external CVE identifier
      in: path
      required: true
      schema:
        type: string
        pattern: 'CVE-[0-9]{4}-[0-9]{4}'
    ductId:
      name: ductId
      description: internal duct identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    cableId:
      name: cableId
      description: internal cable identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    emailProviderId:
      name: emailProviderId
      description: internal email provider identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    mapProviderId:
      name: mapProviderId
      description: internal map provider identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    serviceId:
      name: serviceId
      description: internal service identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    siteId:
      name: siteId
      description: internal site identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    poleId:
      name: poleId
      description: internal (telegraph) pole identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    rackId:
      name: rackId
      description: internal rack identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    rackSlot:
      name: slot
      description: |
        number of physical slots in the rack, 1=1U, 42=42U etc.
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 58
    neId:
      name: neId
      description: internal network equipment identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    kafkaProducerId:
      name: kafkaProducerId
      description: internal Kafka broker identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    notificationIdentifier:
      name: notificationId
      in: path
      required: true
      description: |
        single alert notifying identifier
      schema:
        type: string
        format: uuid
    notificationId:
      name: notificationId
      in: query
      required: true
      description: |
        one or more unique notifying identifiers to cease, serialized as `notificationId=(29a4feb9-1429-4a63-84e8-dd01989f1ec5,33ab44b4-fe7a-4160-9b5d-6145284b5b57)`
      schema:
        type: array
        items:
          type: string
          format: uuid
      style: form
      explode: false
    publicationIdentifier:
      name: publicationId
      in: path
      required: true
      description: |
        single publishing identifier
      schema:
        type: string
        format: uuid
    publicationId:
      name: publicationId
      in: query
      required: true
      description: |
        one or more unique publishing identifiers to unpublish from, serialized as `publicationId=(29a4feb9-1429-4a63-84e8-dd01989f1ec5,33ab44b4-fe7a-4160-9b5d-6145284b5b57)`
      schema:
        type: array
        items:
          type: string
          format: uuid
      style: form
      explode: false
    requestorId:
      name: requestorId
      description: unique identifier of the requesting originator
      in: query
      required: true
      schema:
        type: string
        format: uuid
    subscriptionIdentifier:
      name: subscriptionId
      in: path
      required: true
      description: |
        single subscription identifier
      schema:
        items:
          type: string
          format: uuid
    subscriptionId:
      name: subscriptionId
      in: query
      required: true
      description: |
        one or more unique subscription identifiers to unsubscribe from, serialized as `subscriptionId=(29a4feb9-1429-4a63-84e8-dd01989f1ec5,33ab44b4-fe7a-4160-9b5d-6145284b5b57)`
      schema:
        type: array
        items:
          type: string
          format: uuid
      style: form
      explode: false
    trenchId:
      name: trenchId
      description: internal trench identifier
      in: path
      required: true
      schema:
        type: string
        format: uuid
    workflowEngineId:
      name: workflowEngineId
      in: path
      description: unique identifier of the workflow engine
      required: true
      schema:
        type: string
        format: uuid
    workflowRunnerIdentifier:
      name: workflowRunnerId
      in: path
      required: true
      description: |
        single workflow runner identifier
      schema:
        items:
          type: string
          format: uuid
    workflowRunnerId:
      name: workflowRunnerId
      in: query
      required: true
      description: |
        one or more unique workflow runner identifiers to cease, serialized as `workflowRunnerId=(29a4feb9-1429-4a63-84e8-dd01989f1ec5,33ab44b4-fe7a-4160-9b5d-6145284b5b57)`
      schema:
        type: array
        items:
          type: string
          format: uuid
      style: form
      explode: false
    undeleteHistorical:
      name: restore
      in: query
      required: false
      description: |
        Flag parameter used to restore (undelete) specified historical resource if had previously existed but was deleted, *note*: this only applies to historical records that have not been expunged
      schema:
        type: 'null'
    deletePredictedOnly:
      name: predicted
      in: query
      required: false
      description: |
        Flag parameter used to determine to optionally
        limit the deletion to generated (predicted) variants only
      schema:
        type: 'null'
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    openId:
      type: openIdConnect
      openIdConnectUrl: "https://mni/.well-known/openid-configuration"
  responses:
    Okay:
      description: OK
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            description: General error message wrapped within HTML webpage
            type: object
    NoContent:
      description: No Content
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            description: specified identifier value was not found
            type: object
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            description: could not be processed because of conflict in the current state of the resource
            type: object
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            description: specified media type was not found or not supported
            type: object
security:
- openId:
  # {scheme}:{scope}
  - read:mni_admin
  - write:mni_admin
  - read:mni_alert
  - write:mni_alert
  - read:mni_api
  - write:mni_api
  - read:mni_cable
  - write:mni_cable
  - read:mni_cost
  - write:mni_cost
  - read:mni_duct
  - write:mni_duct
  - read:mni_ne
  - write:mni_ne
  - read:mni_pole
  - write:mni_pole
  - read:mni_predict
  - write:mni_predict
  - read:mni_q2c
  - write:mni_q2c
  - read:mni_rack
  - write:mni_rack
  - read:mni_search
  - read:mni_secret
  - write:mni_secret
  - read:mni_service
  - write:mni_service
  - read:mni_site
  - write:mni_site
  - read:mni_trench
  - write:mni_trench
  - read:mni_ui
  - write:mni_ui
